# Task ID: 4
# Title: Protocol Version Negotiation and Headers
# Status: pending
# Dependencies: 2
# Priority: medium
# Description: Implement MCP protocol version negotiation and header compliance for proper client-server communication and backward compatibility.
# Details:
Add MCP-Protocol-Version header parsing and validation. Support protocol versions 2025-06-18 (current), 2025-03-26 (fallback), and 2024-11-05 (legacy). Implement version negotiation during initialization phase. Return HTTP 400 for unsupported protocol versions. Add Accept header validation for application/json and text/event-stream. Implement proper Content-Type headers in responses. Store negotiated version in session state for subsequent requests.

# Test Strategy:
Test version negotiation with various client versions, validate header presence and format, test fallback behavior for missing headers, verify proper error responses for invalid versions, and ensure backward compatibility with older clients.

# Subtasks:
## 1. Create Protocol Version Registry and Validator [pending]
### Dependencies: None
### Description: Implement a centralized protocol version registry that defines supported MCP protocol versions (2025-06-18, 2025-03-26, 2024-11-05) with validation logic and version comparison utilities.
### Details:
Create a new module protocol_version.rs in crates/mcp/src/. Define a ProtocolVersion enum with variants for each supported version (V2025_06_18, V2025_03_26, V2024_11_05). Implement FromStr trait for parsing version strings from headers. Add version comparison methods for determining compatibility. Create a ProtocolRegistry struct to manage supported versions with methods for checking if a version is supported, finding the best matching version, and determining fallback versions. Include constants for current, fallback, and legacy protocol versions. Add comprehensive error types for version-related failures.

## 2. Implement HTTP Header Extraction and Validation [pending]
### Dependencies: 4.1
### Description: Create header extraction middleware for parsing and validating MCP-Protocol-Version and Accept headers from incoming HTTP requests using Axum extractors.
### Details:
Create headers.rs module with custom Axum extractors. Implement McpProtocolVersionHeader extractor using TypedHeader or custom FromRequestParts implementation. Add AcceptHeader extractor to validate application/json and text/event-stream content types. Create ContentTypeValidator to ensure proper Content-Type headers in responses. Implement header validation logic that returns HTTP 400 Bad Request for invalid or missing required headers. Add header constants and helper functions for header manipulation. Integrate with tracing for logging header processing.

## 3. Add Version Negotiation to Initialize Handler [pending]
### Dependencies: 4.1, 4.2
### Description: Enhance the initialize request handler in handlers.rs to implement protocol version negotiation following the MCP specification lifecycle requirements.
### Details:
Modify handle_initialize method in McpHandler to extract and validate the client's requested protocol version from the initialize request params. Implement version negotiation logic: if server supports the requested version, respond with same version; otherwise respond with server's latest supported version. Store the negotiated protocol version in a session state structure. Update the InitializeResult response to include the negotiated protocolVersion field. Add validation to ensure the client-requested version is parseable and handle version mismatch scenarios. Log version negotiation decisions for debugging.

## 4. Implement Session State Management with Protocol Version [pending]
### Dependencies: 4.3
### Description: Create session state management system that stores negotiated protocol versions and enforces version consistency across subsequent requests.
### Details:
Create session.rs module with SessionState struct containing negotiated_version field and session metadata. Implement SessionStore using Arc<RwLock<HashMap>> for thread-safe session storage keyed by session ID. Add session creation during initialization with generated UUID session ID. Implement session retrieval and validation for subsequent requests. Add session expiry mechanism with configurable TTL. Create middleware to extract session ID from Mcp-Session-Id header and attach session state to request context. Ensure all handlers have access to session state for version-aware processing.

## 5. Add Response Header Management and Version-Specific Formatting [pending]
### Dependencies: 4.2, 4.4
### Description: Implement response header management to ensure proper Content-Type headers and version-specific response formatting based on negotiated protocol version.
### Details:
Create response.rs module with ResponseBuilder that adds appropriate headers based on request context. Implement Content-Type header setting for application/json and text/event-stream responses. Add Mcp-Session-Id header to responses during initialization. Create version-specific response formatters that adjust JSON structure based on negotiated protocol version. Implement middleware to automatically add required headers to all responses. Add support for protocol version downgrade warnings in responses. Ensure CORS headers are properly maintained alongside MCP-specific headers.


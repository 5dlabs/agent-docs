# Task ID: 2
# Title: Implement Streamable HTTP Transport Foundation
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Replace the deprecated HTTP+SSE transport with the new Streamable HTTP transport following MCP 2025-06-18 specification, creating the core transport layer infrastructure.
# Details:
Implement transport.rs with full Streamable HTTP support using Axum 0.7. Create a unified MCP endpoint supporting both POST and GET methods. Implement proper JSON-RPC message handling with UTF-8 encoding. Add support for Server-Sent Events (SSE) streaming for multiple server messages. Ensure backward compatibility detection logic for clients attempting old HTTP+SSE transport. Reference .reference/transports.md for complete specification details. Use tower-http for CORS and tracing middleware integration.

# Test Strategy:
Create integration tests in crates/mcp/tests/ validating POST/GET endpoints, SSE stream initialization and message delivery, JSON-RPC request/response cycles, backward compatibility with old transport attempts, and proper error handling for malformed requests. Test with both Cursor and Toolman clients.

# Subtasks:
## 1. Create Core HTTP Transport Module Structure [pending]
### Dependencies: None
### Description: Set up the foundational transport module structure in transport.rs with necessary imports, types, and session management infrastructure following the Streamable HTTP specification.
### Details:
Create the base transport.rs module with imports for axum 0.7, tower-http, serde_json, and async-stream. Define core types including TransportConfig, SessionManager, McpSession with session ID generation using uuid v4. Implement session storage with HashMap and Arc<RwLock> for thread-safe access. Add MCP-Protocol-Version and Mcp-Session-Id header constants. Create error types for transport-specific failures. Set up logging with tracing for debug and error messages.

## 2. Implement Unified MCP Endpoint Handler [pending]
### Dependencies: 2.1
### Description: Create the main MCP endpoint handler supporting both POST and GET methods with proper content negotiation and request routing logic.
### Details:
Implement unified_mcp_handler function in transport.rs accepting both POST and GET requests. Add Accept header validation for application/json and text/event-stream. Implement POST request handling for JSON-RPC requests, notifications, and responses with appropriate status codes (202 Accepted, 400 Bad Request). Add GET request handling for SSE stream initialization. Implement content type negotiation logic to determine response format. Add MCP-Protocol-Version header extraction and validation. Integrate session ID management from headers. Create request context structure for passing session and protocol information.

## 3. Implement SSE Streaming Infrastructure [pending]
### Dependencies: 2.2
### Description: Build Server-Sent Events streaming capability for handling multiple server messages and maintaining persistent connections.
### Details:
Create SseStream struct using async-stream and tokio-stream for event generation. Implement SSE event formatting with proper data, event, and id fields per SSE specification. Add stream connection management with client tracking and cleanup on disconnect. Implement message queuing for buffering server messages before sending. Add event ID generation for stream resumability support. Create heartbeat mechanism using tokio intervals to keep connections alive. Implement proper UTF-8 encoding for JSON-RPC messages in SSE events. Add stream closing logic after sending JSON-RPC responses.

## 4. Add Backward Compatibility Detection [pending]
### Dependencies: 2.2, 2.3
### Description: Implement detection and handling logic for clients attempting to use the deprecated HTTP+SSE transport from protocol version 2024-11-05.
### Details:
Create legacy transport detection in unified handler by checking for missing MCP-Protocol-Version header. Implement fallback logic for old SSE endpoint detection when GET request expects endpoint event. Add compatibility response formatter for old transport format. Create protocol version negotiation helper functions. Implement proper error responses (405 Method Not Allowed, 404 Not Found) for legacy detection flow. Add logging for backward compatibility mode activation. Create configuration option to enable/disable legacy support.

## 5. Integrate Transport with MCP Server [pending]
### Dependencies: 2.1, 2.2, 2.3, 2.4
### Description: Wire the new Streamable HTTP transport into the existing MCP server infrastructure, replacing old endpoints and ensuring proper request flow.
### Details:
Update server.rs to use new unified transport handler from transport.rs. Replace existing /mcp POST endpoint with unified handler supporting both methods. Update /sse endpoint to redirect to unified handler or maintain for backward compatibility. Integrate McpHandler with new transport for JSON-RPC processing. Add transport configuration to McpServerState. Update CORS configuration for new endpoint requirements. Wire session management into server state. Add transport initialization in McpServer::new. Update router creation to use new transport endpoints.


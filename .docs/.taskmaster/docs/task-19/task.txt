# Task ID: 19
# Title: Security Hardening and Compliance
# Status: pending
# Dependencies: 3
# Priority: high
# Description: Implement comprehensive security measures including authentication, authorization, encryption, and compliance controls.
# Details:
Implement JWT-based authentication for MCP endpoints. Add role-based access control (RBAC) for management tools. Enable TLS/SSL for all communications. Implement API key rotation mechanism. Add request signing for integrity validation. Implement audit logging for all operations. Add rate limiting per client/IP. Configure CORS policies properly. Implement input sanitization and validation. Add security headers (CSP, HSTS, X-Frame-Options).

# Test Strategy:
Conduct penetration testing, test authentication bypass attempts, verify encryption in transit, test rate limiting effectiveness, validate audit log completeness, and perform OWASP compliance check.

# Subtasks:
## 1. Implement JWT Authentication for MCP Endpoints [pending]
### Dependencies: None
### Description: Add JWT-based authentication middleware to protect MCP server endpoints, including token generation, validation, and refresh mechanisms.
### Details:
Create a new auth module in crates/mcp/src/auth.rs with JWT token generation using jsonwebtoken crate. Implement middleware that validates JWT tokens in Authorization headers for /mcp and /sse endpoints. Add token refresh endpoint at /auth/refresh. Store JWT secrets securely via environment variables (JWT_SECRET, JWT_EXPIRY). Include claims for user_id, roles, and issued_at/expires_at timestamps. Integrate with existing McpServerState to pass authenticated user context.

## 2. Add Role-Based Access Control (RBAC) System [pending]
### Dependencies: 19.1
### Description: Implement comprehensive RBAC for management tools with role definitions, permission mappings, and authorization checks.
### Details:
Create rbac module in crates/mcp/src/rbac.rs defining roles (admin, operator, viewer) and permissions. Add role_permissions table to database schema mapping roles to tool access. Implement authorization middleware checking JWT roles against required permissions for each tool. Restrict management tools (add_rust_crate, remove_rust_crate) to admin/operator roles. Allow read-only query tools for all authenticated users. Add role management endpoints at /auth/roles for admin users.

## 3. Enable TLS/SSL and Implement Request Signing [pending]
### Dependencies: None
### Description: Configure TLS/SSL for all communications and add request signing mechanism for integrity validation.
### Details:
Add TLS configuration to Axum server using rustls or native-tls. Support both TLS certificate files and Let's Encrypt auto-renewal. Implement request signing using HMAC-SHA256 for integrity validation on sensitive endpoints. Add X-Signature header validation middleware. Configure TLS_CERT_PATH, TLS_KEY_PATH, and SIGNING_SECRET environment variables. Enforce HTTPS redirect from HTTP. Add certificate pinning support for enhanced security.

## 4. Implement Audit Logging and Rate Limiting [pending]
### Dependencies: 19.1, 19.2
### Description: Add comprehensive audit logging for all operations and implement per-client/IP rate limiting.
### Details:
Create audit_logs table storing user_id, action, resource, timestamp, IP address, and request details. Implement AuditLogger trait logging all tool calls, authentication attempts, and data modifications. Add rate limiting using tower-governor crate with configurable limits per client/IP (100 req/min default). Store rate limit state in Redis or in-memory cache. Log rate limit violations to audit logs. Add /admin/audit endpoint for viewing logs (admin only).

## 5. Add Security Headers and Input Validation [pending]
### Dependencies: 19.3
### Description: Implement security headers, CORS policies, input sanitization, and API key rotation mechanism.
### Details:
Add security headers middleware setting CSP, HSTS, X-Frame-Options, X-Content-Type-Options, and Referrer-Policy. Configure CORS to allow only whitelisted origins from CORS_ALLOWED_ORIGINS env var. Implement input validation using validator crate for all request parameters. Add SQL injection protection through parameterized queries. Implement API key rotation with api_keys table storing hashed keys, creation/expiry dates. Add /auth/rotate-key endpoint for key rotation. Sanitize all user inputs before storage or processing.


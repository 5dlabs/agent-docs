# Task ID: 12
# Title: Implement Additional Query Tools Suite
# Status: pending
# Dependencies: 8, 9
# Priority: low
# Description: Create the remaining query tools for jupyter, cilium, talos, meteora, raydium, ebpf, and rust_best_practices documentation types.
# Details:
Follow established QueryTool pattern for each documentation type. Implement type-specific metadata parsing and filtering. Add specialized response formatting per documentation type. Ensure consistent error handling and validation. Register all tools dynamically via `tools.json` (no hardcoded registration). Implement tool-specific caching strategies. Add performance monitoring per tool. Create shared utility functions for common operations.

# Test Strategy:
Test each tool with type-specific queries, validate metadata extraction and filtering, verify response formatting consistency, test error handling for edge cases, and benchmark individual tool performance.

# Subtasks:
## 1. Create shared utility module for query tools [pending]
### Dependencies: None
### Description: Implement a common utilities module with shared functions for metadata parsing, response formatting, and performance monitoring that all query tools can use
### Details:
Create crates/mcp/src/query_utils.rs module with: parse_metadata_field() generic function for extracting typed fields from JSONB, format_document_response() for consistent markdown formatting across all tools, calculate_relevance_score() for similarity-based ranking, create_performance_monitor() for tracking query execution times, and validate_query_params() for standard parameter validation. Export these utilities from lib.rs for use by all QueryTool implementations.

## 2. Implement Jupyter and Cilium query tools [pending]
### Dependencies: 11.1
### Description: Create JupyterQueryTool and CiliumQueryTool following the established RustQueryTool pattern with type-specific metadata handling
### Details:
In crates/mcp/src/tools.rs, implement JupyterQueryTool with notebook-specific metadata parsing (kernel, language, cell_types), and CiliumQueryTool with network policy metadata (policy_type, namespace, endpoints). Add corresponding vector_search methods in crates/database/src/queries.rs filtering by doc_type='jupyter' and doc_type='cilium'. Use shared utilities for common operations. Register both tools in McpHandler::new() with appropriate tool definitions including input schemas.

## 3. Implement Talos and Meteora query tools [pending]
### Dependencies: 11.1
### Description: Create TalosQueryTool and MeteoraQueryTool with specialized metadata parsing for Kubernetes and DeFi documentation
### Details:
Implement TalosQueryTool in crates/mcp/src/tools.rs with Kubernetes-specific metadata (resource_type, api_version, namespace), and MeteoraQueryTool with DeFi protocol metadata (pool_type, liquidity_params, reward_structure). Add talos_vector_search and meteora_vector_search methods to DocumentQueries. Implement custom response formatting for technical specifications and protocol parameters. Register tools in handlers.rs with comprehensive tool definitions.

## 4. Implement Raydium and eBPF query tools [pending]
### Dependencies: 11.1
### Description: Create RaydiumQueryTool and EbpfQueryTool with domain-specific metadata parsing and response formatting
### Details:
Build RaydiumQueryTool with AMM and liquidity pool metadata support (amm_version, pool_address, fee_structure), and EbpfQueryTool with kernel programming metadata (program_type, kernel_version, hook_points). Add corresponding vector search methods in queries.rs. Implement specialized formatting for code examples and technical diagrams. Add caching strategy using tokio::sync::RwLock for frequently accessed technical documentation. Register in MCP handler.

## 5. Implement RustBestPractices tool and integration testing [pending]
### Dependencies: 11.2, 11.3, 11.4
### Description: Create RustBestPracticesQueryTool and comprehensive integration tests for all seven new query tools
### Details:
Implement RustBestPracticesQueryTool with pattern/anti-pattern metadata (practice_category, rust_version, complexity_level). Add rust_best_practices_vector_search to queries.rs. Create integration tests in crates/mcp/tests/ validating all seven tools' query accuracy, metadata filtering, response formatting, error handling, and performance benchmarks (< 2 seconds per query). Verify proper tool registration and MCP protocol compliance for all tools.


# Task ID: 14
# Title: Container Image Optimization
# Status: pending
# Dependencies: 2
# Priority: medium
# Description: Optimize Docker image for size, security, and performance with multi-stage builds and minimal attack surface.
# Details:
Enhance existing Dockerfile with cargo-chef for dependency caching. Implement distroless or alpine-based runtime image. Add security scanning with trivy or snyk. Optimize binary size with strip and upx compression. Implement proper signal handling for graceful shutdown. Add non-root user with minimal permissions. Configure proper health check endpoints. Reduce image layers and optimize build cache. Target image size < 100MB.

# Test Strategy:
Scan image for vulnerabilities, measure image size and layer count, test graceful shutdown handling, verify health checks in container runtime, and benchmark startup time (< 5 seconds).

# Subtasks:
## 1. Implement cargo-chef for Dependency Caching [pending]
### Dependencies: None
### Description: Replace current manual dependency caching approach with cargo-chef to optimize Docker build times and improve layer caching efficiency
### Details:
Install cargo-chef in builder stage. Create chef stage with cargo chef prepare for generating recipe.json. Add dependencies stage with cargo chef cook for building dependencies separately. Modify builder stage to use pre-built dependencies from chef. This will significantly reduce rebuild times when only source code changes.

## 2. Migrate to Distroless Runtime Image [pending]
### Dependencies: 13.1
### Description: Replace debian:bookworm-slim base image with gcr.io/distroless/cc-debian12 for minimal attack surface and reduced image size
### Details:
Switch runtime FROM to gcr.io/distroless/cc-debian12. Remove apt-get installations in runtime stage as distroless includes only essential libraries. Ensure libssl and libpq shared libraries are available or statically link them. Update HEALTHCHECK to use built-in /health endpoint since curl won't be available. Set proper USER directive compatible with distroless nonroot user.

## 3. Add Binary Optimization and Compression [pending]
### Dependencies: 13.1
### Description: Implement strip and UPX compression to reduce binary size while maintaining performance
### Details:
Add strip command in builder stage after cargo build to remove debug symbols. Install and apply UPX compression with --best flag for maximum compression. Configure Cargo.toml with opt-level=z, lto=true, codegen-units=1 for size optimization. Add panic=abort to reduce binary size further. Target final binary size reduction of 60-70%.

## 4. Implement Graceful Shutdown and Signal Handling [pending]
### Dependencies: None
### Description: Add proper SIGTERM/SIGINT signal handling in the Rust application for container orchestration compatibility
### Details:
Implement tokio::signal handlers in http_server.rs for SIGTERM and SIGINT. Add graceful shutdown logic to close database connections and complete in-flight requests. Set proper timeout for shutdown sequence (30 seconds). Update Dockerfile with STOPSIGNAL SIGTERM. Ensure non-root user can receive and handle signals properly.

## 5. Integrate Security Scanning Pipeline [pending]
### Dependencies: 13.2, 13.3
### Description: Add Trivy vulnerability scanning to CI/CD pipeline and create security scanning script for local development
### Details:
Create scripts/scan_image.sh with Trivy scanning for vulnerabilities and misconfigurations. Add GitHub Action workflow for automated scanning on builds. Configure severity thresholds (CRITICAL/HIGH must be zero). Generate SBOM (Software Bill of Materials) for compliance. Add scanning results to build artifacts. Document security scanning process in documentation.


name: Build and Push Server (Prebuilt Binary)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Image tag to publish (e.g., v0.1.0)"
        required: false
        type: string
  push:
    branches:
      - main
      - feature/**
      - feat/**
      - fix/**
      - hotfix/**

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ${{ github.repository }}

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      short_sha: ${{ steps.version.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v4
      - id: version
        run: |
          if [ -n "${{ inputs.tag }}" ]; then
            VERSION="${{ inputs.tag }}"
          else
            VERSION="latest"
          fi
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

  test:
    runs-on: k8s-runner
    env:
      KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure kubeconfig (if provided)
        run: |
          if [ -n "${KUBECONFIG_CONTENT:-}" ]; then
            mkdir -p "$HOME/.kube"
            printf "%s" "$KUBECONFIG_CONTENT" > "$HOME/.kube/config"
            chmod 600 "$HOME/.kube/config"
            echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          else
            echo "No kubeconfig provided; skipping"
          fi
      - name: Setup Rust (pinned 1.88.0)
        run: |
          rustup toolchain install 1.88.0 --profile minimal
          rustup default 1.88.0
          rustup component add clippy rustfmt
          rustc --version
          cargo --version
          cargo fmt --version || true
      - name: Cache Rust build
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: . -> target
      - name: Set test DB env (self-hosted runner)
        run: |
          if [ -n "${{ secrets.DATABASE_URL }}" ]; then echo "TEST_DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV; fi
          echo "APP_NAME=doc-server-ci" >> $GITHUB_ENV
          echo "POOL_MIN_CONNECTIONS=1" >> $GITHUB_ENV
          echo "POOL_MAX_CONNECTIONS=5" >> $GITHUB_ENV
          echo "POOL_ACQUIRE_TIMEOUT=10" >> $GITHUB_ENV
      - name: Format check
        run: cargo fmt --all -- --check
      - name: Clippy (warnings + pedantic)
        run: cargo clippy --all-targets --all-features -- -D warnings -W clippy::pedantic
      - name: Test suite (exclude live embeddings)
        run: cargo test --workspace --all-features --exclude doc-server-embeddings

  embeddings-live:
    needs: [test]
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      RUST_LOG: info
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: docs_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d docs_test" --health-interval 10s --health-timeout 5s --health-retries 12
    steps:
      - name: Skip (no secrets)
        if: env.OPENAI_API_KEY == ''
        run: |
          echo "Skipping embeddings-live: OPENAI_API_KEY secret not set"

      - uses: actions/checkout@v4
        if: env.OPENAI_API_KEY != ''
      - name: Configure kubeconfig (if provided)
        if: env.OPENAI_API_KEY != ''
        run: |
          if [ -n "${KUBECONFIG_CONTENT:-}" ]; then
            mkdir -p "$HOME/.kube"
            printf "%s" "$KUBECONFIG_CONTENT" > "$HOME/.kube/config"
            chmod 600 "$HOME/.kube/config"
            echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          else
            echo "No kubeconfig provided; skipping"
          fi
      - name: Setup Rust (pinned 1.88.0)
        if: env.OPENAI_API_KEY != ''
        run: |
          rustup toolchain install 1.88.0 --profile minimal
          rustup default 1.88.0
      - name: Cache Rust build
        uses: Swatinem/rust-cache@v2
        if: env.OPENAI_API_KEY != ''
        with:
          workspaces: . -> target
      - name: Run embeddings live tests (unit tests inside crate)
        if: env.OPENAI_API_KEY != ''
        run: |
          # Fallback to CI postgres service if DATABASE_URL secret isn't set
          if [ -z "$DATABASE_URL" ]; then export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/docs_test; fi
          export EMBEDDINGS_TEST_MAX_WAIT_SECS=${EMBEDDINGS_TEST_MAX_WAIT_SECS:-900}
          export EMBEDDINGS_TEST_POLL_SECS=${EMBEDDINGS_TEST_POLL_SECS:-5}
          cargo test -p doc-server-embeddings -- --nocapture

  # Build step removed - using optimized Dockerfile with cargo-chef
  # that builds the binary internally for better caching and optimization

  build-and-push-image:
    needs: [version, test]
    runs-on: k8s-runner
    env:
      KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG }}
    outputs:
      image_digest: ${{ steps.build.outputs.digest }}
      image_name: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/server:${{ needs.version.outputs.version }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Configure kubeconfig (if provided)
        run: |
          if [ -n "${KUBECONFIG_CONTENT:-}" ]; then
            mkdir -p "$HOME/.kube"
            printf "%s" "$KUBECONFIG_CONTENT" > "$HOME/.kube/config"
            chmod 600 "$HOME/.kube/config"
            echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          else
            echo "No kubeconfig provided; skipping"
          fi
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push optimized image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.optimized
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/server:${{ needs.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/server:${{ needs.version.outputs.short_sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  security-scan:
    needs: [version, build-and-push-image]
    runs-on: k8s-runner
    permissions:
      actions: read
      contents: read
      packages: read
      security-events: write
    env:
      KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure kubeconfig (if provided)
        run: |
          if [ -n "${KUBECONFIG_CONTENT:-}" ]; then
            mkdir -p "$HOME/.kube"
            printf "%s" "$KUBECONFIG_CONTENT" > "$HOME/.kube/config"
            chmod 600 "$HOME/.kube/config"
            echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          else
            echo "No kubeconfig provided; skipping"
          fi
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
      - name: Run security scan
        env:
          IMAGE_NAME: ${{ needs.build-and-push-image.outputs.image_name }}
          EXIT_ON_VIOLATION: 0
        run: |
          docker pull "$IMAGE_NAME"
          ./scripts/scan_image.sh "$IMAGE_NAME"
      - name: Upload SARIF results
        if: always()
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: security-reports/results.sarif
      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ needs.version.outputs.short_sha }}
          path: security-reports/
          retention-days: 30

  summary:
    name: Run Summary
    needs: [version, test, embeddings-live, build-and-push-image, security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Download security artifacts (if available)
        uses: actions/download-artifact@v4
        with:
          name: security-reports-${{ needs.version.outputs.short_sha }}
          path: security-reports
        continue-on-error: true

      - name: Install jq (for summarizing)
        run: sudo apt-get update && sudo apt-get install -y jq
        continue-on-error: true

      - name: Generate Markdown Summary
        run: |
          VERSION="${{ needs.version.outputs.version }}"
          SHORT_SHA="${{ needs.version.outputs.short_sha }}"
          IMAGE_NAME="${{ needs.build-and-push-image.outputs.image_name }}"
          TEST_STATUS="${{ needs.test.result }}"
          EMB_STATUS="${{ needs.embeddings-live.result }}"
          BUILD_STATUS="${{ needs.build-and-push-image.result }}"
          SEC_STATUS="${{ needs.security-scan.result }}"
          DEPLOY_STATUS="${{ needs.deploy.result }}"

          # Security counts (best effort)
          if [ -f security-reports/vulnerability-report.json ]; then
            TOTAL=$(jq '[.Results[]? | .Vulnerabilities[]?] | length' security-reports/vulnerability-report.json 2>/dev/null || echo 0)
            CRIT=$(jq '[.Results[]? | .Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' security-reports/vulnerability-report.json 2>/dev/null || echo 0)
            HIGH=$(jq '[.Results[]? | .Vulnerabilities[]? | select(.Severity=="HIGH")] | length' security-reports/vulnerability-report.json 2>/dev/null || echo 0)
            SEC_SUMMARY="${TOTAL} total (CRITICAL: ${CRIT}, HIGH: ${HIGH})"
          else
            SEC_SUMMARY="(artifact not available)"
          fi

          cat >> "$GITHUB_STEP_SUMMARY" <<'EOF'
          # ✅ Doc Server CI Summary

          EOF

          cat >> "$GITHUB_STEP_SUMMARY" <<EOF
          **Commit**: \
          
          - Version: \
            \
            \
          - Short SHA: \
            \
            \
          
          **Container Image**: \
          
          - Name: \
            \
            \
          
          **Job Status**:
          
          | Stage | Status |
          |---|---|
          | Format + Clippy + Tests | ${TEST_STATUS} |
          | Embeddings (live) | ${EMB_STATUS} |
          | Build & Push Image | ${BUILD_STATUS} |
          | Security Scan | ${SEC_STATUS} |
          | Deploy (Helm) | ${DEPLOY_STATUS} |
          
          **Security Summary**: ${SEC_SUMMARY}
          
          - Artifacts: security-reports-${SHORT_SHA}
          
          EOF

          # Fill inline values escaped above
          sed -i "s|Version: \\\n+            \\\n+            \\\n+|Version: ${VERSION}|" "$GITHUB_STEP_SUMMARY"
          sed -i "s|Short SHA: \\\n+            \\\n+            \\\n+|Short SHA: ${SHORT_SHA}|" "$GITHUB_STEP_SUMMARY"
          sed -i "s|Name: \\\n+            \\\n+            \\\n+|Name: ${IMAGE_NAME}|" "$GITHUB_STEP_SUMMARY"

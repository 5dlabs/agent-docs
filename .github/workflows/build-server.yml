name: Build and Push Server (Prebuilt Binary)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag to publish (e.g., v0.1.0)'
        required: false
        type: string
  push:
    branches:
      - main
      - feature/**
      - feat/**
      - fix/**
      - hotfix/**

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ${{ github.repository }}

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      short_sha: ${{ steps.version.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v4
      - id: version
        run: |
          if [ -n "${{ inputs.tag }}" ]; then
            VERSION="${{ inputs.tag }}"
          else
            VERSION="latest"
          fi
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust (stable)
        run: |
          rustup default stable
          rustup update stable
          rustup component add clippy rustfmt
          rustc --version
          cargo --version
          cargo fmt --version || true
      - name: Cache Rust build
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: . -> target
      - name: Format check
        run: cargo fmt --all -- --check
      - name: Clippy (warnings + pedantic)
        run: cargo clippy --all-targets --all-features -- -D warnings -W clippy::pedantic
      - name: Test suite
        run: cargo test --all-features

  embeddings-live:
    if: ${{ secrets.OPENAI_API_KEY != '' && secrets.DATABASE_URL != '' }}
    needs: [test]
    runs-on: ubuntu-latest
    timeout-minutes: 25
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: docs_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d docs_test" \
          --health-interval 10s --health-timeout 5s --health-retries 12
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      # Prefer provided secret; fallback to CI postgres service
      DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/docs_test' }}
      RUST_LOG: info
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust (stable)
        run: |
          rustup default stable
          rustup update stable
      - name: Cache Rust build
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: . -> target
      - name: Run embeddings live tests only
        run: |
          cargo test -p doc-server-embeddings --test integration_tests -- --nocapture

  # Build step removed - using optimized Dockerfile with cargo-chef
  # that builds the binary internally for better caching and optimization

  build-and-push-image:
    needs: [version, test]
    runs-on: k8s-runner
    outputs:
      image_digest: ${{ steps.build.outputs.digest }}
      image_name: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/server:${{ needs.version.outputs.version }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push optimized image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.optimized
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/server:${{ needs.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/server:${{ needs.version.outputs.short_sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  security-scan:
    needs: [version, build-and-push-image]
    runs-on: k8s-runner
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
      - name: Run security scan
        env:
          IMAGE_NAME: ${{ needs.build-and-push-image.outputs.image_name }}
        run: |
          ./scripts/scan_image.sh "$IMAGE_NAME"
      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: security-reports/results.sarif
      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ needs.version.outputs.short_sha }}
          path: security-reports/
          retention-days: 30

  deploy:
    needs: [version, build-and-push-image, security-scan]
    runs-on: [k8s-runner]
    steps:
      - uses: actions/checkout@v4
      - name: Setup tools
        run: |
          mkdir -p $HOME/bin
          if [ -f /shared/kubectl ]; then
            cp /shared/kubectl $HOME/bin/
            chmod +x $HOME/bin/kubectl
          fi
          if [ -f /shared/helm ]; then
            cp /shared/helm $HOME/bin/
            chmod +x $HOME/bin/helm
          fi
          echo "$HOME/bin" >> $GITHUB_PATH
      - name: Verify Kubernetes connectivity
        run: |
          kubectl cluster-info
          kubectl get nodes
      - name: Deploy with Helm
        run: |
          kubectl create namespace mcp --dry-run=client -o yaml | kubectl apply -f -
          helm upgrade --install doc-server ./helm/agent-docs-server \
            --namespace mcp \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}/server \
            --set image.tag=${{ needs.version.outputs.version }} \
            --set image.pullPolicy=Always \
            --wait \
            --timeout=300s



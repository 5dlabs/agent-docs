{
  "url": "file:///tmp/cilium-repo/Documentation/configuration/api-rate-limiting.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _api_rate_limiting:\n\n*****************\nAPI Rate Limiting\n*****************\n\nThe per node Cilium agent is essentially event-driven. For example, the CNI\nplugin is invoked when a new workload is scheduled onto the node which in turn\nmakes an API call to the Cilium agent to allocate an IP address and create the\nCilium endpoint. Another example is loading of network policy or service\ndefinitions where changes of these definitions will create an event which will\nnotify the Cilium agent that a modification is required.\n\nDue to being event-driven, the amount of work performed by the Cilium agent\nhighly depends on the rate of external events it receives. In order to\nconstrain the resources that the Cilium agent consumes, it can be helpful to\nrestrict the rate and allowed parallel executions of API calls.\n\nDefault Rate Limits\n===================\n\nThe following API calls are currently subject to rate limiting:\n\n========================== ====== ===== ============= ============ ================= =========== ===============================\nAPI Call                   Limit  Burst Max Parallel  Min Parallel Max Wait Duration Auto Adjust Estimated Processing Duration\n========================== ====== ===== ============= ============ ================= =========== ===============================\n``PUT /endpoint/{id}``     0.5/s  4     4                          15s               True        2s\n``DELETE /endpoint/{id}``               4             4                              True        200ms\n``GET /endpoint/{id}/*``   4/s    4     4             2            10s               True        200ms\n``PATCH /endpoint/{id}*``  0.5/s  4     4                          15s               True        1s\n``GET /endpoint``          1/s    4     2             2                              True        300ms\n========================== ====== ===== ============= ============ ================= =========== ===============================\n\nConfiguration\n=============\n\nThe ``api-rate-limit`` option can be used to overwrite individual settings of the\ndefault configuration::\n\n   --api-rate-limit endpoint-create=rate-limit:2/s,rate-burst:4\n\nAPI call to Configuration mapping\n---------------------------------\n\n========================== ====================\nAPI Call                   Config Name\n========================== ====================\n``PUT /endpoint/{id}``     ``endpoint-create``\n``DELETE /endpoint/{id}``  ``endpoint-delete``\n``GET /endpoint/{id}/*``   ``endpoint-get``\n``PATCH /endpoint/{id}*``  ``endpoint-patch``\n``GET /endpoint``          ``endpoint-list``\n========================== ====================\n\nConfiguration Parameters\n------------------------\n\n================================= ========= ========= =====================================================================================\nConfiguration Key                 Example   Default   Description\n================================= ========= ========= =====================================================================================\n``rate-limit``                    ``5/m``   None      Allowed requests per time unit in the format ``<number>/<duration>``.\n``rate-burst``                    ``4``     None      Burst of API requests allowed by rate limiter.\n``min-wait-duration``             ``10ms``  ``0``     Minimum wait duration each API call has to wait before being processed.\n``max-wait-duration``             ``15s``   ``0``     Maximum duration an API call is allowed to wait before it fails.\n``estimated-processing-duration`` ``100ms`` ``0``     Estimated processing duration of an average API call. Used for automatic adjustment.\n``auto-adjust``                   ``true``  ``false`` Enable automatic adjustment of ``rate-limit``, ``rate-burst`` and ``parallel-requests``.\n``parallel-requests``             ``4``     ``0``     Number of parallel API calls allowed.\n``min-parallel-requests``         ``2``     ``0``     Lower limit of parallel requests when auto-adjusting.\n``max-parallel-requests``         ``6``     ``0``     Upper limit of parallel requests when auto-adjusting.\n``mean-over``                     ``10``    ``10``    Number of API calls to calculate mean processing duration for auto adjustment.\n``log``                           ``true``  ``false`` Log an Info message for each API call processed.\n``delayed-adjustment-factor``     ``0.25``  ``0.5``   Factor for slower adjustment of ``rate-burst`` and ``parallel-requests``.\n``max-adjustment-factor``         ``10.0``  ``100.0`` Maximum factor the auto-adjusted values can deviate from the initial base values configured.\n================================= ========= ========= =====================================================================================\n\nValid duration values\n---------------------\n\nThe ``rate-limit`` option expects a value in the form ``<number>/<duration>``\nwhere ``<duration>`` is a value that can be parsed with `ParseDuration()\n<https://golang.org/pkg/time/#ParseDuration>`_. The supported units are:\n``ns``, ``us``, ``ms``, ``s``, ``m``, ``h``.\n\n**Examples:**\n\n* ``rate-limit:10/2m``\n* ``rate-limit:3.5/h``\n* ``rate-limit:1/100ms``\n\nAutomatic Adjustment\n====================\n\nStatic values are relatively useless as the Cilium agent will run on different\nmachine types. Deriving rate limits based on number of available CPU cores or\navailable memory can be misleading as well as the Cilium agent may be subject\nto CPU and memory constraints.\n\nFor this reason, all API call rate limiting is done with automatic adjustment\nof the limits with the goal to stay as close as possible to the configured\nestimated processing duration. This processing duration is specified for each\ngroup of API call and is constantly monitored.\n\nOn completion of every API call, new limits are calculated. For this purpose, an\nadjustment factor is calculated:\n\n.. code-block:: go\n\n    AdjustmentFactor := EstimatedProcessingDuration / MeanProcessingDuration\n    AdjustmentFactor = Min(Max(AdjustmentFactor, 1.0/MaxAdjustmentFactor), MaxAdjustmentFactor)\n\nThis adjustment factor is then applied to ``rate-limit``, ``rate-burst`` and\n``parallel-requests`` and will steer the mean processing duration to get closer\nto the estimated processing duration.\n\nIf ``delayed-adjustment-factor`` is specified, then this additional factor is\nused to slow the growth of the ``rate-burst`` and ``parallel-requests`` as both\nvalues should typically adjust slower than ``rate-limit``:\n\n.. code-block:: go\n\n    NewValue = OldValue * AdjustmentFactor\n    NewValue = OldValue + ((NewValue - OldValue) * DelayedAdjustmentFactor)\n\nMetrics\n=======\n\nAll API calls subject to rate limiting will expose :ref:`metrics_api_rate_limiting`. Example::\n\n    cilium_api_limiter_adjustment_factor                  api_call=\"endpoint-create\"                                                0.695787\n    cilium_api_limiter_processed_requests_total           api_call=\"endpoint-create\" outcome=\"success\" return_code=\"200\"            7.000000\n    cilium_api_limiter_processing_duration_seconds        api_call=\"endpoint-create\" value=\"estimated\"                              2.000000\n    cilium_api_limiter_processing_duration_seconds        api_call=\"endpoint-create\" value=\"mean\"                                   2.874443\n    cilium_api_limiter_rate_limit                         api_call=\"endpoint-create\" value=\"burst\"                                  4.000000\n    cilium_api_limiter_rate_limit                         api_call=\"endpoint-create\" value=\"limit\"                                  0.347894\n    cilium_api_limiter_requests_in_flight                 api_call=\"endpoint-create\" value=\"in-flight\"                              0.000000\n    cilium_api_limiter_requests_in_flight                 api_call=\"endpoint-create\" value=\"limit\"                                  0.000000\n    cilium_api_limiter_wait_duration_seconds              api_call=\"endpoint-create\" value=\"max\"                                    15.000000\n    cilium_api_limiter_wait_duration_seconds              api_call=\"endpoint-create\" value=\"mean\"                                   0.000000\n    cilium_api_limiter_wait_duration_seconds              api_call=\"endpoint-create\" value=\"min\"                                    0.000000\n\nUnderstanding the log output\n============================\n\nThe API rate limiter logs under the ``rate`` subsystem. An example message can\nbe seen below::\n\n   level=info msg=\"API call has been processed\" name=endpoint-create processingDuration=772.847247ms subsys=rate totalDuration=14.923958916s uuid=d34a2e1f-1ac9-11eb-8663-42010a8a0fe1 waitDurationTotal=14.151023084s\n\nThe following is an explanation for all the API rate limiting messages:\n\n::\n\n   \"Processing API request with rate limiter\"\n\nThe request was admitted into the rate limiter. The associated HTTP context\n(caller's request) has not yet timed out. The request will now be rate-limited\naccording to the configuration of the rate limiter. It will enter the waiting\nstage according to the computed waiting duration.\n\n::\n\n   \"API request released by rate limiter\"\n\n\nThe request has finished waiting its computed duration to achieve\nrate-limiting. The underlying HTTP API action will now take place. This means\nthat this request was not thrown back at the caller with a 429 HTTP status\ncode.\n\nThis is a common message when the requests are being processed within the\nconfigured bounds of the rate limiter.\n\n::\n\n   \"API call has been processed\":\n\nThe API rate limiter has processed this request and the underlying HTTP API\naction has finished. This means the request is no longer actively waiting or in\nother words, no longer being rate-limited. This does not mean the underlying\nHTTP action has succeeded; only that this request has been dealt with.\n\n::\n\n   \"Not processing API request due to cancelled context\"\n\nThe underlying HTTP context (request) was cancelled. In other words, the caller\nhas given up on the request. This most likely means that the HTTP request timed\nout. A 429 HTTP response status code is returned to the caller, which may or\nmay not receive it anyway.\n\n::\n\n   \"Not processing API request. Wait duration for maximum parallel requests exceeds maximum\"\n\nThe request has been denied by the rate limiter because too many parallel\nrequests are already in flight. The caller will receive a 429 HTTP status\nresponse.\n\nThis is a common message when the rate limiter is doing its job of preventing\ntoo many parallel requests at once.\n\n::\n\n   \"Not processing API request. Wait duration exceeds maximum\"\n\nThe request has been denied by the rate limiter because the request's waiting\nduration would exceed the maximum configured waiting duration. For example, if\nthe maximum waiting duration was ``5s`` and due to the backlog of the rate\nlimiter, this request would need to wait ``10s``, then this request would be\nthrown out. A 429 HTTP response status code would be returned to the caller.\n\nThis is the most common message when the rate limiter is doing its job of\npacing the incoming requests into Cilium.\n\n::\n\n   \"Not processing API request due to cancelled context while waiting\"\n\nThe request has been denied by the rate limiter because after the request has\nwaited its calculated waiting duration, the context associated with the request\nhas been cancelled. In the most likely scenario, this means that there was an\nHTTP timeout while the request was actively being rate-limited or in other\nwords, actively being delayed by the rate limiter. A 429 HTTP response status\ncode is returned to the caller.\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/configuration/api-rate-limiting.rst",
  "extracted_at": "2025-09-03T01:13:28.728410Z"
}
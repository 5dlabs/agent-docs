{
  "url": "file:///tmp/cilium-repo/Documentation/network/servicemesh/envoy-traffic-management.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n .. _gs_envoy_traffic_management: \n \n L7 Load Balancing and URL re-writing \n \n Cilium Service Mesh defines a  CiliumEnvoyConfig  CRD which allows users\nto set the configuration of the Envoy component built into Cilium agents. \n This example sets up an Envoy listener which load balances requests\nbetween two backend services. \n Deploy Test Applications \n .. parsed-literal:: \n $ kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes/servicemesh/envoy/test-application.yaml\n \n The test workloads consist of: \n \n two client deployments,  client  and  client2 \n two services,  echo-service-1  and  echo-service-2 \n \n View information about these pods: \n .. code-block:: shell-session \n $ kubectl get pods --show-labels -o wide\nNAME                              READY   STATUS    RESTARTS   AGE    IP          NODE           NOMINATED NODE   READINESS GATES   LABELS\nclient-7568bc7f86-dlfqr           1/1     Running   0          100s   10.0.1.8    minikube-m02   <none>           <none>            kind=client,name=client,pod-template-hash=7568bc7f86\nclient2-8b4c4fd75-xn25d           1/1     Running   0          100s   10.0.1.24   minikube-m02   <none>           <none>            kind=client,name=client2,other=client,pod-template-hash=8b4c4fd75\necho-service-1-97748874-4sztx     2/2     Running   0          100s   10.0.1.86   minikube-m02   <none>           <none>            kind=echo,name=echo-service-1,other=echo,pod-template-hash=97748874\necho-service-2-76c584c4bf-p4z4w   2/2     Running   0          100s   10.0.1.16   minikube-m02   <none>           <none>            kind=echo,name=echo-service-2,pod-template-hash=76c584c4bf\n \n You can see that \n \n Only  client2  is labeled with  other=client  - we will use this\nin a  CiliumNetworkPolicy  definition later in this example. \n \n Make an environment variable with the pod ID for  client2 : \n .. code-block:: shell-session \n $ export CLIENT2=$(kubectl get pods -l name=client2 -o jsonpath='{.items[0].metadata.name}')\n \n We are going to use Envoy configuration to load-balance requests between\nthese two services  echo-service-1  and  echo-service-2 . \n Start Observing Traffic with Hubble \n Enable Hubble in your cluster with the step mentioned in :ref: hubble_setup . \n Start a second terminal, then enable hubble port forwarding and observe\ntraffic from the  client2  pod: \n .. code-block:: shell-session \n $ kubectl -n kube-system port-forward deployment/hubble-relay 4245:4245 &\n$ hubble observe --from-pod $CLIENT2 -f\n \n You should be able to get a response from both of the backend services\nindividually from  client2 : \n .. code-block:: shell-session \n $ kubectl exec -it $CLIENT2 -- curl -v echo-service-1:8080/\n$ kubectl exec -it $CLIENT2 -- curl -v echo-service-2:8080/\n \n Notice that Hubble shows all the flows between these pods as being either\n to/from-stack ,  to/from-overlay  or  to/from-endpoint  - there is no\ntraffic marked as flowing to or from the proxy at this stage. (This assumes\nyou don't already have any Layer 7 policies in place affecting this traffic.) \n Verify that you get a 404 error response if you curl to the non-existent URL\n /foo  on these services: \n .. code-block:: shell-session \n $ kubectl exec -it $CLIENT2 -- curl -v echo-service-1:8080/foo\n$ kubectl exec -it $CLIENT2 -- curl -v echo-service-2:8080/foo\n \n Add Layer 7 Policy \n Adding a Layer 7 policy introduces the Envoy proxy into the path for this traffic. \n .. parsed-literal:: \n $ kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes/servicemesh/envoy/client-egress-l7-http.yaml\n$ kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes/servicemesh/envoy/client-egress-only-dns.yaml\n \n Make a request to a backend service (either will do): \n .. code-block:: shell-session \n $ kubectl exec -it $CLIENT2 -- curl -v echo-service-1:8080/\n$ kubectl exec -it $CLIENT2 -- curl -v echo-service-2:8080/foo\n \n Adding a Layer 7 policy enables Layer 7 visibility. Notice that the Hubble output\nnow includes flows  to-proxy , and also shows the HTTP protocol information at\nlevel 7 (for example  HTTP/1.1 GET http://echo-service-1:8080/ ) \n .. Note:: \n Note that Envoy may `sanitize some headers <https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/header_sanitizing#http-header-sanitizing>`_.\n\nInstead, you can make Envoy trust previous hops and prevent Envoy from rewriting\nsome of these HTTP headers. Trust previous hops by setting Helm values\n``envoy.xffNumTrustedHopsL7PolicyIngress`` and ``envoy.xffNumTrustedHopsL7PolicyEgress``\nto the number of hops to trust.\n\nFor an egress policy the previous hop is the source pod, whereas for an ingress policy\nit can be either the source pod, the \"egress policy transparent proxy\", Cilium Ingress Controller,\nCilium Gateway API, or any other Ingress proxy or infrastructure.\n\nDepending on your environment, you should consider the security implications of trusting\nprevious hops.\n \n Test Layer 7 Policy Enforcement \n The policy only permits GET requests to the  /  path, so you will see requests\nto any other URL being dropped. For example, try: \n .. code-block:: shell-session \n $ kubectl exec -it $CLIENT2 -- curl -v echo-service-1:8080/foo\n \n The Hubble output will show the HTTP request being dropped, like this: \n :: \n Jul  7 08:40:15.076: default/client2-8b4c4fd75-6pgvl:58586 -> default/echo-service-1-97748874-n7758:8080 http-request DROPPED (HTTP/1.1 GET http://echo-service-1:8080/foo)\n \n And the curl should show a  403 Forbidden response . \n Add Envoy load-balancing and URL re-writing \n Apply the  envoy-traffic-management-test.yaml  file, which defines a  CiliumClusterwideEnvoyConfig . \n .. parsed-literal:: \n $ kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes/servicemesh/envoy/envoy-traffic-management-test.yaml\n \n .. include:: warning.rst \n This configuration listens for traffic intended for either of the two\n echo-  services and: \n \n load-balances 50/50 between the two backend  echo-  services \n rewrites the path  /foo  to  / \n \n A request to  /foo  should now succeed, because of the path re-writing: \n .. code-block:: shell-session \n $ kubectl exec -it $CLIENT2 -- curl -v echo-service-1:8080/foo\n \n But the network policy still prevents requests to any path that is not\nrewritten to  / . For example, this request will result in a packet\nbeing dropped and a 403 Forbidden response code: \n .. code-block:: shell-session \n $ kubectl exec -it $CLIENT2 -- curl -v echo-service-1:8080/bar\n\n### Output from hubble observe\nJul  7 08:43:47.165: default/client2-8b4c4fd75-6pgvl:33376 -> default/echo-service-2-76c584c4bf-874dm:8080 http-request DROPPED (HTTP/1.1 GET http://echo-service-1:8080/bar)\n \n Try making several requests to one backend service. You should see in\nthe Hubble output approximately half the time, they are handled by the\nother backend. \n Example: \n :: \n Jul  7 08:45:25.807: default/client2-8b4c4fd75-6pgvl:37388 -> kube-system/coredns-64897985d-8jhhn:53 L3-L4 REDIRECTED (UDP)\nJul  7 08:45:25.807: default/client2-8b4c4fd75-6pgvl:37388 -> kube-system/coredns-64897985d-8jhhn:53 to-proxy FORWARDED (UDP)\nJul  7 08:45:25.807: default/client2-8b4c4fd75-6pgvl:37388 -> kube-system/coredns-64897985d-8jhhn:53 dns-request FORWARDED (DNS Query echo-service-1.default.svc.cluster.local. AAAA)\nJul  7 08:45:25.807: default/client2-8b4c4fd75-6pgvl:37388 -> kube-system/coredns-64897985d-8jhhn:53 dns-request FORWARDED (DNS Query echo-service-1.default.svc.cluster.local. A)\nJul  7 08:45:25.808: default/client2-8b4c4fd75-6pgvl:57942 -> default/echo-service-1:8080 none REDIRECTED (TCP Flags: SYN)\nJul  7 08:45:25.808: default/client2-8b4c4fd75-6pgvl:57942 -> default/echo-service-1:8080 to-proxy FORWARDED (TCP Flags: SYN)\nJul  7 08:45:25.808: default/client2-8b4c4fd75-6pgvl:57942 -> default/echo-service-1:8080 to-proxy FORWARDED (TCP Flags: ACK)\nJul  7 08:45:25.808: default/client2-8b4c4fd75-6pgvl:57942 -> default/echo-service-1:8080 to-proxy FORWARDED (TCP Flags: ACK, PSH)\nJul  7 08:45:25.809: default/client2-8b4c4fd75-6pgvl:57942 -> default/echo-service-2-76c584c4bf-874dm:8080 L3-L4 REDIRECTED (TCP Flags: SYN)\nJul  7 08:45:25.809: default/client2-8b4c4fd75-6pgvl:57942 -> default/echo-service-2-76c584c4bf-874dm:8080 to-endpoint FORWARDED (TCP Flags: SYN)\nJul  7 08:45:25.809: default/client2-8b4c4fd75-6pgvl:57942 -> default/echo-service-2-76c584c4bf-874dm:8080 to-endpoint FORWARDED (TCP Flags: ACK)\nJul  7 08:45:25.809: default/client2-8b4c4fd75-6pgvl:57942 -> default/echo-service-2-76c584c4bf-874dm:8080 to-endpoint FORWARDED (TCP Flags: ACK, PSH)\nJul  7 08:45:25.809: default/client2-8b4c4fd75-6pgvl:57942 -> default/echo-service-2-76c584c4bf-874dm:8080 http-request FORWARDED (HTTP/1.1 GET http://echo-service-1:8080/)\nJul  7 08:45:25.811: default/client2-8b4c4fd75-6pgvl:57942 -> default/echo-service-1:8080 to-proxy FORWARDED (TCP Flags: ACK, FIN)\nJul  7 08:45:25.811: default/client2-8b4c4fd75-6pgvl:57942 -> default/echo-service-1:8080 to-proxy FORWARDED (TCP Flags: ACK)\nJul  7 08:45:30.811: default/client2-8b4c4fd75-6pgvl:57942 -> default/echo-service-2-76c584c4bf-874dm:8080 to-endpoint FORWARDED (TCP Flags: ACK, FIN)",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/servicemesh/envoy-traffic-management.rst",
  "extracted_at": "2025-09-03T01:13:29.155789Z"
}
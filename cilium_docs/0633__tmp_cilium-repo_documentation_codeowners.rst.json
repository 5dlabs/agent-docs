{
  "url": "file:///tmp/cilium-repo/Documentation/codeowners.rst",
  "content": "..\n    This file was autogenerated via Documentation/update-codeowners.sh, do not edit manually\n\nCode owners are used by the Cilium community to consolidate common knowledge\ninto teams that can provide consistent and actionable feedback to\ncontributors. This section will describe groups of teams and suggestions\nabout the focus areas for review.\n\nThe primary motivation for these teams is to provide structure around review\nprocesses to ensure that contributors know how to reach out to community\nmembers to conduct discussions, ensure contributions meet the expectations of\nthe community, and align on the direction of proposed changes. Furthermore,\nwhile these teams are primarily drawn upon to provide review on specific pull\nrequests, they are also encouraged to self-organize around how to make\nimprovements to their areas of the Cilium project over time.\n\nAny committer may self-nominate to code owner teams. Reach out to the core\nteam on the #committers channel in Slack to coordinate. Committers do not\nrequire expert knowledge in an area in order to join a code owner team,\nonly a willingness to engage in discussions and learn about the area.\n\nProject-wide\n++++++++++++\n\nThese code owners may provide feedback for Pull Requests submitted to any\nrepository in the Cilium project:\n\n- `@cilium/api <https://github.com/orgs/cilium/teams/api>`__:\n  Ensure the backwards-compatibility of Cilium REST and gRPC APIs, excluding\n  Hubble which is owned by `@cilium/sig-hubble-api <https://github.com/orgs/cilium/teams/sig-hubble-api>`__.\n- `@cilium/build <https://github.com/orgs/cilium/teams/build>`__:\n  Provide feedback on languages and scripting used for build and packaging\n  system: Make, Shell, Docker.\n- `@cilium/cli <https://github.com/orgs/cilium/teams/cli>`__:\n  Provide user experience feedback on changes to Command-Line Interfaces.\n  These owners are a stand-in for the user community to bring a user\n  perspective to the review process. Consider how information is presented,\n  consistency of flags and options.\n- `@cilium/ci-structure <https://github.com/orgs/cilium/teams/ci-structure>`__:\n  Provide guidance around the best use of Cilium project continuous\n  integration and testing infrastructure, including GitHub actions, VM\n  helpers, testing frameworks, etc.\n- `@cilium/community <https://github.com/orgs/cilium/teams/community>`__:\n  Maintain files that refer to Cilium community users such as USERS.md.\n- `@cilium/contributing <https://github.com/orgs/cilium/teams/contributing>`__:\n  Encourage practices that ensure an inclusive contributor community. Review\n  tooling and scripts used by contributors.\n- `@cilium/docs-structure <https://github.com/orgs/cilium/teams/docs-structure>`__:\n  Ensure the consistency and layout of documentation. General feedback on the\n  use of Sphinx, how to communicate content clearly to the community. This\n  code owner is not expected to validate the technical correctness of\n  submissions. Correctness is typically handled by another code owner group\n  which is also assigned to any given piece of documentation.\n- `@cilium/sig-foundations <https://github.com/orgs/cilium/teams/sig-foundations>`__:\n  Review changes to the core libraries and provide guidance to overall\n  software architecture.\n- `@cilium/github-sec <https://github.com/orgs/cilium/teams/github-sec>`__:\n  Responsible for maintaining the security of repositories in the Cilium\n  project by maintaining best practices for workflow usage, for instance\n  preventing malicious use of GitHub actions.\n- `@cilium/helm <https://github.com/orgs/cilium/teams/helm>`__:\n  Provide input on the way that Helm can be used to configure features. These\n  owners are a stand-in for the user community to bring a user perspective to\n  the review process. Ensure that Helm changes are defined in manners that\n  will be forward-compatible for upgrade and follow best practices for\n  deployment (for example, being GitOps-friendly).\n- `@cilium/sig-hubble-api <https://github.com/orgs/cilium/teams/sig-hubble-api>`__:\n  Review Hubble API changes related to gRPC endpoints.\n  The team ensures that API changes are backward\n  compatible or that a new API version is created for backward incompatible\n  changes.\n- `@cilium/metrics <https://github.com/orgs/cilium/teams/metrics>`__:\n  Provide recommendations about the types, names and labels for metrics to\n  follow best practices. This includes considering the cardinality impact of\n  metrics being added or extended.\n- `@cilium/release-managers <https://github.com/orgs/cilium/teams/release-managers>`__:\n  Review files related to releases like AUTHORS and VERSION.\n- `@cilium/security <https://github.com/orgs/cilium/teams/security>`__:\n  Provide feedback on changes that could have security implications for Cilium,\n  and maintain security-related documentation.\n- `@cilium/vendor <https://github.com/orgs/cilium/teams/vendor>`__:\n  Review vendor updates for software dependencies to check for any potential\n  upstream breakages / incompatibilities. Discourage the use of unofficial\n  forks of upstream libraries if they are actively maintained.\n\nRepository Owners\n+++++++++++++++++\n\nThe following code owners are responsible for a range of general feedback for\ncontributions to specific repositories:\n\n- `@cilium/sig-hubble <https://github.com/orgs/cilium/teams/sig-hubble>`__:\n  Review all Cilium and Hubble code related to observing system events,\n  exporting those via gRPC protocols outside the node and outside the\n  cluster. those event channels, for example via TLS.\n- `@cilium/hubble-metrics <https://github.com/orgs/cilium/teams/hubble-metrics>`__:\n  Review code related to Hubble metrics, ensure changes in exposed metrics are\n  consistent and not breaking without careful consideration.\n- `@cilium/hubble-ui <https://github.com/orgs/cilium/teams/hubble-ui>`__:\n  Maintain the Hubble UI graphical interface.\n- `@cilium/tetragon <https://github.com/orgs/cilium/teams/tetragon>`__:\n  Review of all Tetragon code, both for Go and C (for eBPF).\n\nThe teams above are responsible for reviewing the majority of contributions\nto the corresponding repositories. Additionally, there are \"maintainer\" teams\nlisted below which may not be responsible for overall code review for a\nrepository, but they have administrator access to the repositories and so\nthey can assist with configuring GitHub repository settings, secrets, and\nrelated processes. For the full codeowners for individual repositories, see\nthe CODEOWNERS file in the corresponding repository.\n\n- `@cilium/cilium-cli-maintainers <https://github.com/orgs/cilium/teams/cilium-cli-maintainers>`__\n- `@cilium/cilium-maintainers <https://github.com/orgs/cilium/teams/cilium-maintainers>`__\n- `@cilium/cilium-packer-ci-build-maintainers <https://github.com/orgs/cilium/teams/cilium-packer-ci-build-maintainers>`__\n- `@cilium/ebpf-lib-maintainers <https://github.com/orgs/cilium/teams/ebpf-lib-maintainers>`__\n- `@cilium/hubble-maintainers <https://github.com/orgs/cilium/teams/hubble-maintainers>`__\n- `@cilium/image-tools-maintainers <https://github.com/orgs/cilium/teams/image-tools-maintainers>`__\n- `@cilium/metallb-maintainers <https://github.com/orgs/cilium/teams/metallb-maintainers>`__\n- `@cilium/openshift-terraform-maintainers <https://github.com/orgs/cilium/teams/openshift-terraform-maintainers>`__\n- `@cilium/proxy-maintainers <https://github.com/orgs/cilium/teams/proxy-maintainers>`__\n- `@cilium/tetragon-maintainers <https://github.com/orgs/cilium/teams/tetragon-maintainers>`__\n\nCloud Integrations\n++++++++++++++++++\n\nThe following codeowner groups provide insight into the integrations with\nspecific cloud providers:\n\n- `@cilium/alibabacloud <https://github.com/orgs/cilium/teams/alibabacloud>`__\n- `@cilium/aws <https://github.com/orgs/cilium/teams/aws>`__\n- `@cilium/azure <https://github.com/orgs/cilium/teams/azure>`__\n\nCilium Internals\n++++++++++++++++\n\nThe following codeowner groups cover more specific knowledge about Cilium\nAgent internals or the way that particular Cilium features interact with\nexternal software and protocols:\n\n- `@cilium/docker <https://github.com/orgs/cilium/teams/docker>`__:\n  Maintain the deprecated docker-plugin.\n- `@cilium/endpoint <https://github.com/orgs/cilium/teams/endpoint>`__:\n  Provide background on how the Cilium Endpoint package fits into the overall\n  agent architecture, relationship with generation of policy / datapath\n  constructs, serialization and restore from disk.\n- `@cilium/envoy <https://github.com/orgs/cilium/teams/envoy>`__:\n  Maintain the L7 proxy integration with Envoy. This includes the\n  configurations for Envoy via xDS protocols as well as the extensible\n  proxylib framework for Go-based layer 7 filters.\n- `@cilium/egress-gateway <https://github.com/orgs/cilium/teams/egress-gateway>`__:\n  Maintain the egress gateway control plane and datapath logic.\n- `@cilium/fqdn <https://github.com/orgs/cilium/teams/fqdn>`__:\n  Maintain the L7 DNS proxy integration.\n- `@cilium/ipcache <https://github.com/orgs/cilium/teams/ipcache>`__:\n  Provide background on how the userspace IPCache structure fits into the\n  overall agent architecture, ordering constraints with respect to network\n  policies and encryption. Handle the relationship between Kubernetes state\n  and datapath state as it pertains to remote peers.\n- `@cilium/ipsec <https://github.com/orgs/cilium/teams/ipsec>`__:\n  Maintain the kernel IPsec configuration and related eBPF logic to ensure\n  traffic is correctly encrypted.\n- `@cilium/kvstore <https://github.com/orgs/cilium/teams/kvstore>`__:\n  Review Cilium interactions with key-value stores, particularly etcd.\n  Understand the client libraries used by Cilium for sharing state between\n  nodes and clusters.\n- `@cilium/loader <https://github.com/orgs/cilium/teams/loader>`__:\n  Maintain the tooling that allows eBPF programs to be loaded into the\n  kernel: LLVM, bpftool, use of cilium/ebpf for loading programs in the\n  agent, ELF templating, etc.\n- `@cilium/operator <https://github.com/orgs/cilium/teams/operator>`__:\n  Review operations that occur once per cluster via the Cilium Operator\n  component. Take care of the corresponding garbage collection and leader\n  election logic.\n- `@cilium/proxy <https://github.com/orgs/cilium/teams/proxy>`__:\n  Review low-level implementations used to redirect L7 traffic to the actual\n  proxy implementations (FQDN, Envoy, ...).\n- `@cilium/sig-agent <https://github.com/orgs/cilium/teams/sig-agent>`__:\n  Provide Cilium (agent) general Go review. Internal architecture, core data\n  structures and daemon startup.\n- `@cilium/sig-bgp <https://github.com/orgs/cilium/teams/sig-bgp>`__:\n  Review changes to our BGP integration.\n- `@cilium/sig-clustermesh <https://github.com/orgs/cilium/teams/sig-clustermesh>`__:\n  Ensure the reliability of state sharing between clusters to ensure that\n  each cluster maintains a separate fault domain.\n- `@cilium/sig-datapath <https://github.com/orgs/cilium/teams/sig-datapath>`__:\n  Provide feedback on all eBPF code changes, use of the kernel APIs for\n  configuring the networking and socket layers. Coordination of kernel\n  subsystems such as xfrm (IPsec), iptables / nftables, tc. Maintain the\n  control plane layers that populate most eBPF maps; account for endianness\n  and system architecture impacts on the datapath code.\n- `@cilium/sig-encryption <https://github.com/orgs/cilium/teams/sig-encryption>`__\n  Review control and data plane logic related with encryption (IPSec and\n  WireGuard).\n- `@cilium/sig-hubble <https://github.com/orgs/cilium/teams/sig-hubble>`__:\n  Review all Cilium and Hubble code related to observing system events,\n  exporting those via gRPC protocols outside the node and outside the\n  cluster. Ensure the security of those event channels, for example via TLS.\n- `@cilium/sig-ipam <https://github.com/orgs/cilium/teams/sig-ipam>`__:\n  Coordinate the implementation between all of the IP Address Management\n  modes, provide awareness/insight into IP resource exhaustion and garbage\n  collection concerns.\n- `@cilium/sig-k8s <https://github.com/orgs/cilium/teams/sig-k8s>`__:\n  Provide input on all interactions with Kubernetes, both for standard\n  resources and CRDs. Ensure best practices are followed for the coordination\n  of clusterwide state in order to minimize memory usage.\n- `@cilium/sig-lb <https://github.com/orgs/cilium/teams/sig-lb>`__:\n  Maintain the layers necessary to coordinate all load balancing\n  configurations within the agent control plane, including Services,\n  ClusterIP, NodePorts, Maglev, local redirect policies, and\n  NAT46/NAT64.\n- `@cilium/sig-policy <https://github.com/orgs/cilium/teams/sig-policy>`__:\n  Ensure consistency of semantics for all network policy representations.\n  Responsible for all policy logic from Kubernetes down to eBPF policymap\n  entries, including all intermediate layers such as the Policy Repository,\n  SelectorCache, PolicyCache, CachedSelectorPolicy, EndpointPolicy, etc.\n- `@cilium/sig-scalability <https://github.com/orgs/cilium/teams/sig-scalability>`__:\n  Maintain scalability and performance tests. Provide input on scalability\n  and performance related changes.\n- `@cilium/sig-servicemesh <https://github.com/orgs/cilium/teams/sig-servicemesh>`__:\n  Provide input on the way that Service Mesh constructs such as Gateway API\n  are converted into lower-level constructs backed by eBPF or Envoy\n  configurations. Maintain the CRDs necessary for Service Mesh functionality.\n- `@cilium/wireguard <https://github.com/orgs/cilium/teams/wireguard>`__:\n  Maintain the kernel WireGuard configuration and datapath impacts related to\n  ensuring traffic is encrypted correctly when WireGuard mode is enabled.\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/codeowners.rst",
  "extracted_at": "2025-09-03T01:13:29.367353Z"
}
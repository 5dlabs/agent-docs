{
  "url": "file:///tmp/cilium-repo/Documentation/network/kubernetes/policy.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _k8s_policy:\n\n**************\nNetwork Policy\n**************\n\nIf you are running Cilium on Kubernetes, you can benefit from Kubernetes\ndistributing policies for you. In this mode, Kubernetes is responsible for\ndistributing the policies across all nodes and Cilium will automatically apply\nthe policies. Three formats are available to configure network policies natively\nwith Kubernetes:\n\n- The standard `NetworkPolicy` resource which supports L3 and L4 policies\n  at ingress or egress of the Pod.\n\n- The extended `CiliumNetworkPolicy` format which is available as a\n  :term:`CustomResourceDefinition` which supports specification of policies\n  at Layers 3-7 for both ingress and egress.\n\n- The `CiliumClusterwideNetworkPolicy` format which is a cluster-scoped\n  :term:`CustomResourceDefinition` for specifying cluster-wide policies to be enforced\n  by Cilium. The specification is same as that of `CiliumNetworkPolicy` with\n  no specified namespace.\n\nCilium supports running multiple of these policy types at the same time.\nHowever caution should be applied when using multiple policy types at the same\ntime, as it can be confusing to understand the complete set of allowed traffic\nacross multiple policy types.  If close attention is not applied this may lead\nto unintended policy allow behavior.\n\n.. _NetworkPolicy:\n.. _networkpolicy_state:\n\nNetworkPolicy\n=============\n\nFor more information, see the official `NetworkPolicy documentation\n<https://kubernetes.io/docs/concepts/services-networking/network-policies/>`_.\n\nKnown missing features for Kubernetes Network Policy:\n\n+-------------------------------+-------------------+\n| Feature                       | Tracking Issue    |\n+===============================+===================+\n| ``ipBlock`` set with a pod IP | :gh-issue:`9209`  |\n+-------------------------------+-------------------+\n\n.. _CiliumNetworkPolicy:\n\nCiliumNetworkPolicy\n===================\n\nThe `CiliumNetworkPolicy` is very similar to the standard `NetworkPolicy`. The\npurpose is to provide the functionality which is not yet supported in\n`NetworkPolicy`. Ideally all of the functionality will be merged into the\nstandard resource format and this CRD will no longer be required.\n\nThe raw specification of the resource in Go looks like this:\n\n.. code-block:: go\n\n        type CiliumNetworkPolicy struct {\n                // +deepequal-gen=false\n                metav1.TypeMeta `json:\",inline\"`\n                // +deepequal-gen=false\n                metav1.ObjectMeta `json:\"metadata\"`\n\n                // Spec is the desired Cilium specific rule specification.\n                Spec *api.Rule `json:\"spec,omitempty\"`\n\n                // Specs is a list of desired Cilium specific rule specification.\n                Specs api.Rules `json:\"specs,omitempty\"`\n\n                // Status is the status of the Cilium policy rule\n                //\n                // +deepequal-gen=false\n                // +kubebuilder:validation:Optional\n                Status CiliumNetworkPolicyStatus `json:\"status\"`\n        }\n\nMetadata\n  Describes the policy. This includes:\n\n    * Name of the policy, unique within a namespace\n    * Namespace of where the policy has been injected into\n    * Set of labels to identify a resource in Kubernetes\n\nSpec\n  Field which contains a :ref:`policy_rule`.\nSpecs\n  Field which contains a list of :ref:`policy_rule`. This field is useful if\n  multiple rules must be removed or added automatically.\n\nStatus\n  Provides visibility into whether the policy has been successfully applied.\n\nExamples\n========\n\nSee :ref:`policy_examples`, :ref:`l4_policy` and :ref:`l7_policy` for\ndetailed lists of example policies.\n\n\n.. _CiliumClusterwideNetworkPolicy:\n\nCiliumClusterwideNetworkPolicy\n==============================\n\n`CiliumClusterwideNetworkPolicy` is similar to `CiliumNetworkPolicy`, except\n(1) policies defined by `CiliumClusterwideNetworkPolicy` are non-namespaced and are\ncluster-scoped, and (2) it enables the use of :ref:`NodeSelector`. Internally\nthe policy is identical to `CiliumNetworkPolicy` and thus the effects of this\npolicy specification are also same.\n\nThe raw specification of the resource in Go looks like this:\n\n.. code-block:: go\n\n        type CiliumClusterwideNetworkPolicy struct {\n                // Spec is the desired Cilium specific rule specification.\n                Spec *api.Rule\n\n                // Specs is a list of desired Cilium specific rule specification.\n                Specs api.Rules\n\n                // Status is the status of the Cilium policy rule.\n                //\n                // The reason this field exists in this structure is due a bug in the k8s\n                // code-generator that doesn't create a `UpdateStatus` method because the\n                // field does not exist in the structure.\n                //\n                // +kubebuilder:validation:Optional\n                Status CiliumNetworkPolicyStatus\n        }\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/kubernetes/policy.rst",
  "extracted_at": "2025-09-03T01:13:29.220987Z"
}
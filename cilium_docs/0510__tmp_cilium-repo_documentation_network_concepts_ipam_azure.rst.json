{
  "url": "file:///tmp/cilium-repo/Documentation/network/concepts/ipam/azure.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _ipam_azure:\n\n##########\nAzure IPAM\n##########\n\n.. note::\n\n   While still maintained for now, Azure IPAM is considered legacy and is not\n   compatible with AKS clusters created in `Bring your own CNI <https://docs.microsoft.com/en-us/azure/aks/use-byo-cni?tabs=azure-cli>`_\n   mode. The recommended way to install cilium on AKS are \n   `Bring your own CNI <https://docs.microsoft.com/en-us/azure/aks/use-byo-cni?tabs=azure-cli>`__ or\n   `Azure CNI Powered by Cilium <https://aka.ms/aks/cilium-dataplane>`__.\n   \n\nThe Azure IPAM allocator is specific to Cilium deployments running in the Azure\ncloud and performs IP allocation based on `Azure Private IP addresses\n<https://docs.microsoft.com/en-us/azure/virtual-network/private-ip-addresses>`__.\n\nThe architecture ensures that only a single operator communicates with the\nAzure API to avoid rate-limiting issues in large clusters. A pre-allocation\nwatermark allows to maintain a number of IP addresses to be available for use\non nodes at all time without requiring to contact the Azure API when a new pod\nis scheduled in the cluster.\n\n************\nArchitecture\n************\n\n.. image:: azure_arch.png\n    :align: center\n\nThe Azure IPAM allocator builds on top of the CRD-backed allocator. Each node\ncreates a ``ciliumnodes.cilium.io`` custom resource matching the node name when\nCilium starts up for the first time on that node. The Cilium agent running on\neach node will retrieve the Kubernetes ``v1.Node`` resource and extract the\n``.Spec.ProviderID`` field in order to derive the `Azure instance ID <https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-instance-ids>`__.\nAzure allocation parameters are provided as agent configuration option and are\npassed into the custom resource as well.\n\nThe Cilium operator listens for new ``ciliumnodes.cilium.io`` custom resources\nand starts managing the IPAM aspect automatically. It scans the Azure instances\nfor existing interfaces with associated IPs and makes them available via the\n``spec.ipam.available`` field. It will then constantly monitor the used IP\naddresses in the ``status.ipam.used`` field and allocate more IPs as needed to\nmeet the IP pre-allocation watermark. This ensures that there are always IPs\navailable\n\n*************\nConfiguration\n*************\n\n* The Cilium agent and operator must be run with the option ``--ipam=azure`` or\n  the option ``ipam: azure``  must be set in the ConfigMap. This will enable Azure\n  IPAM allocation in both the node agent and operator.\n\n* In most scenarios, it makes sense to automatically create the\n  ``ciliumnodes.cilium.io`` custom resource when the agent starts up on a node\n  for the first time. To enable this, specify the option\n  ``--auto-create-cilium-node-resource`` or  set\n  ``auto-create-cilium-node-resource: \"true\"`` in the ConfigMap.\n\n* It is generally a good idea to enable metrics in the Operator as well with\n  the option ``--enable-metrics``. See the section :ref:`install_metrics` for\n  additional information how to install and run Prometheus including the\n  Grafana dashboard.\n\nAzure Allocation Parameters\n===========================\n\nThe following parameters are available to control the IP allocation:\n\n``spec.ipam.min-allocate``\n  The minimum number of IPs that must be allocated when the node is first\n  bootstrapped. It defines the minimum base socket of addresses that must be\n  available. After reaching this watermark, the PreAllocate and\n  MaxAboveWatermark logic takes over to continue allocating IPs.\n\n  If unspecified, no minimum number of IPs is required.\n\n``spec.ipam.pre-allocate``\n  The number of IP addresses that must be available for allocation at all\n  times.  It defines the buffer of addresses available immediately without\n  requiring for the operator to get involved.\n\n  If unspecified, this value defaults to 8.\n\n``spec.ipam.max-above-watermark``\n  The maximum number of addresses to allocate beyond the addresses needed to\n  reach the PreAllocate watermark.  Going above the watermark can help reduce\n  the number of API calls to allocate IPs.\n\n  If let unspecified, the value defaults to 0.\n\n*******************\nOperational Details\n*******************\n\nCache of Interfaces, Subnets, and VirtualNetworks\n=================================================\n\nThe operator maintains a list of all Azure ScaleSets, Instances, Interfaces,\nVirtualNetworks, and Subnets associated with the Azure subscription in a cache.\n\nThe cache is updated once per minute or after an IP allocation has been\nperformed. When triggered based on an allocation, the operation is performed at\nmost once per second.\n\nPublication of available IPs\n============================\n\nFollowing the update of the cache, all CiliumNode custom resources representing\nnodes are updated to publish eventual new IPs that have become available.\n\nIn this process, all interfaces are scanned for all available IPs.  All IPs\nfound are added to ``spec.ipam.available``. Each interface is also added to\n``status.azure.interfaces``.\n\nIf this update caused the custom resource to change, the custom resource is\nupdated using the Kubernetes API methods ``Update()`` and/or ``UpdateStatus()``\nif available.\n\nDetermination of IP deficits or excess\n======================================\n\nThe operator constantly monitors all nodes and detects deficits in available IP\naddresses. The check to recognize a deficit is performed on two occasions:\n\n * When a ``CiliumNode`` custom resource is updated\n * All nodes are scanned in a regular interval (once per minute)\n\nWhen determining whether a node has a deficit in IP addresses, the following\ncalculation is performed:\n\n.. code-block:: go\n\n     spec.ipam.pre-allocate - (len(spec.ipam.available) - len(status.ipam.used))\n\nFor excess IP calculation:\n\n.. code-block:: go\n\n     (len(spec.ipam.available) - len(status.ipam.used)) - (spec.ipam.pre-allocate + spec.ipam.max-above-watermark)\n\nUpon detection of a deficit, the node is added to the list of nodes which\nrequire IP address allocation. When a deficit is detected using the interval\nbased scan, the allocation order of nodes is determined based on the severity\nof the deficit, i.e. the node with the biggest deficit will be at the front of\nthe allocation queue. Nodes that need to release IPs are behind nodes that need\nallocation.\n\nThe allocation queue is handled on demand but at most once per second.\n\nIP Allocation\n=============\n\nWhen performing IP allocation for a node with an address deficit, the operator\nfirst looks at the interfaces already attached to the instance represented by\nthe CiliumNode resource.\n\nThe operator will then pick the first interface which meets the following\ncriteria:\n\n * The interface has addresses associated which are not yet used or the number of\n   addresses associated with the interface is lesser than `maximum number of\n   addresses\n   <https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#networking-limits>`__\n   that can be associated to an interface.\n\n * The subnet associated with the interface has IPs available for allocation\n\nThe following formula is used to determine how many IPs are allocated on the\ninterface:\n\n.. code-block:: go\n\n      min(AvailableOnSubnet, min(AvailableOnInterface, NeededAddresses + spec.ipam.max-above-watermark))\n\nThis means that the number of IPs allocated in a single allocation cycle can be\nless than what is required to fulfill ``spec.ipam.pre-allocate``.\n\nIP Release\n==========\n\nWhen performing IP release for a node with IP excess, the operator scans the\ninterface attached to the node. The following formula is used to determine how\nmany IPs are available for release on the interface:\n\n.. code-block:: go\n\n      min(FreeOnInterface, (TotalFreeIPs - spec.ipam.pre-allocate - spec.ipam.max-above-watermark))\n\nNode Termination\n================\n\nWhen a node or instance terminates, the Kubernetes apiserver will send a node\ndeletion event. This event will be picked up by the operator and the operator\nwill delete the corresponding ``ciliumnodes.cilium.io`` custom resource.\n\n.. _ipam_azure_required_privileges:\n\n*******************\nRequired Privileges\n*******************\n\nThe following Azure API calls are being performed by the Cilium operator. The\nService Principal provided must have privileges to perform these within the\nscope of the AKS cluster node resource group:\n\n * `Network Interfaces - Create Or Update <https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfaces/createorupdate>`__\n * `NetworkInterface In VMSS - List Virtual Machine Scale Set Network Interfaces <https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterface%20in%20vmss/listvirtualmachinescalesetnetworkinterfaces>`__\n * `Virtual Networks - List <https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualnetworks/list>`__\n * `Virtual Machine Scale Sets - List All <https://docs.microsoft.com/en-us/rest/api/compute/virtualmachinescalesets/listall>`__\n\n.. note::\n\n   The node resource group is *not* the resource group of the AKS cluster. A\n   single resource group may hold multiple AKS clusters, but each AKS cluster\n   regroups all resources in an automatically managed secondary resource group.\n   See `Why are two resource groups created with AKS? <https://docs.microsoft.com/en-us/azure/aks/faq#why-are-two-resource-groups-created-with-aks>`__\n   for more details.\n\n*******\nMetrics\n*******\n\nThe metrics are documented in the section :ref:`ipam_metrics`.\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/concepts/ipam/azure.rst",
  "extracted_at": "2025-09-03T01:13:29.217534Z"
}
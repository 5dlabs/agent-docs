{
  "url": "file:///tmp/cilium-repo/Documentation/contributing/development/contributing_guide.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n .. _howto_contribute: \n How To Contribute \n This document shows how to contribute as a community contributor.\n:ref: Guidance for reviewers and committers <reviewer_committer>  is also\navailable. \n Cilium Feature Proposals \n \nBefore you start working on a significant code change, it's a good idea to make sure\nthat your approach is likely to be accepted. The best way to do this is to\ncreate a `Cilium issue of type \"Feature Request\" on \nGitHub <https://github.com/cilium/cilium/issues/new?assignees=&labels=kind%2Ffeature&template=feature_template.md&title=CFP%3A+>`_\nwhere you describe your plans.\n\nFor longer proposals, you might like to include a link to an external doc (e.g.\na Google doc) where it's easier for reviewers to make comments and suggestions\nin-line. The GitHub feature request template includes a link to the `Cilium\nFeature Proposal template <https://docs.google.com/document/d/1vtE82JExQHw8_-pX2Uhq5acN1BMPxNlS6cMQUezRTWg/edit>`_ which you are welcome to use to help structure your\nproposal. Please make a copy of that template, fill it in with your ideas, and \nensure it's publicly visible, before adding the link into the GitHub issue.\n\nAfter the initial discussion, CFPs should be added to the `design-cfps repo <https://github.com/cilium/design-cfps>`_\nso the design and discussion can be stored for future reference.\n\n.. _provision_environment:\n\nClone and Provision Environment\n \n #. Make sure you have a  GitHub account <https://github.com/join> .\n#. Fork the  Cilium repository <https://github.com/cilium/cilium>  to your GitHub user or organization.\n#. Turn off GitHub actions for your fork as described in the  GitHub Docs <https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#managing-github-actions-permissions-for-your-repository> _.\nThis is recommended to avoid unnecessary CI notification failures on the fork.\n#. Clone your  ${YOUR_GITHUB_USERNAME_OR_ORG}/cilium  fork and set up the base repository as  upstream  remote: \n .. code-block:: shell-session \n   git clone https://github.com/${YOUR_GITHUB_USERNAME_OR_ORG}/cilium.git\n  cd cilium\n  git remote add upstream https://github.com/cilium/cilium.git\n \n #. Set up your :ref: dev_env .\n#. Check the GitHub issues for  good tasks to get started    <https://github.com/cilium/cilium/issues?q=is%3Aopen+is%3Aissue+label%3Agood-first-issue> _.\n#. Follow the steps in :ref: making_changes  to start contributing :) \n .. _submit_pr: \n Submitting a pull request \n \nContributions must be submitted in the form of pull requests against the\nupstream GitHub repository at https://github.com/cilium/cilium.\n\n#. Fork the Cilium repository.\n#. Push your changes to the topic branch in your fork of the repository.\n#. Submit a pull request on https://github.com/cilium/cilium.\n\nBefore hitting the submit button, please make sure that the following\nrequirements have been met:\n\n#. Take some time to describe your change in the PR description! A well-written\n   description about the motivation of the change and choices you made during\n   the implementation can go a long way to help the reviewers understand why\n   you've made the change and why it's a good way to solve your problem. If\n   it helps you to explain something, use pictures or\n   `Mermaid diagrams <https://mermaid-js.github.io/>`_.\n#. Each commit must compile and be functional on its own to allow for\n   bisecting of commits in the event of a bug affecting the tree.\n#. All code is covered by unit and/or runtime tests where feasible.\n#. All changes have been tested and checked for regressions by running the\n   existing testsuite against your changes. See the :ref:`testsuite-legacy` section\n   for additional details.\n#. All commits contain a well written commit description including a title,\n   description and a ``Fixes: #XXX`` line if the commit addresses a particular\n   GitHub issue. Note that the GitHub issue will be automatically closed when\n   the commit is merged.\n\n   ::\n\n        apipanic: Log stack at debug level\n\n        Previously, it was difficult to debug issues when the API panicked\n        because only a single line like the following was printed:\n\n        level=warning msg=\"Cilium API handler panicked\" client=@ method=GET\n        panic_message=\"write unix /var/run/cilium/cilium.sock->@: write: broken\n        pipe\"\n\n        This patch logs the stack at this point at debug level so that it can at\n        least be determined in developer environments.\n\n        Fixes: #4191\n\n        Signed-off-by: Joe Stringer <joe@cilium.io>\n\n   .. note::\n\n       Make sure to include a blank line in between commit title and commit\n       description.\n\n#. If any of the commits fixes a particular commit already in the tree, that\n   commit is referenced in the commit message of the bugfix. This ensures that\n   whoever performs a backport will pull in all required fixes:\n\n   ::\n\n      daemon: use endpoint RLock in HandleEndpoint\n\n      Fixes: a804c7c7dd9a (\"daemon: wait for endpoint to be in ready state if specified via EndpointChangeRequest\")\n\n      Signed-off-by: Andr√© Martins <andre@cilium.io>\n\n   .. note::\n\n      The proper format for the ``Fixes:`` tag referring to commits is to use\n      the first 12 characters of the git SHA followed by the full commit title\n      as seen above without breaking the line.\n\n#. If you change CLI arguments of any binaries in this repo, the CI will reject your PR if you don't\n   also update the command reference docs. To do so, make sure to run the ``postcheck`` make target.\n\n   .. code-block:: shell-session\n\n      $ make postcheck\n      $ git add Documentation/cmdref\n      $ git commit\n\n#. All commits are signed off. See the section :ref:`dev_coo`.\n\n   .. note::\n\n       Passing the ``-s`` option to ``git commit`` will add the\n       ``Signed-off-by:`` line to your commit message automatically.\n\n#. Document any user-facing or breaking changes in ``Documentation/operations/upgrade.rst``.\n\n#. (optional) Pick the appropriate milestone for which this PR is being\n   targeted, e.g. ``1.6``, ``1.7``. This is in particular important in the time\n   frame between the feature freeze and final release date.\n\n#. If you have permissions to do so, pick the right release-note label. These\n   labels will be used to generate the release notes which will primarily be\n   read by users.\n\n   +-----------------------------------+--------------------------------------------------------------------------------------------------------+\n   | Labels                            | When to set                                                                                            |\n   +===================================+========================================================================================================+\n   | ``release-note/bug``              | This is a non-trivial bugfix and is a user-facing bug                                                  |\n   +-----------------------------------+--------------------------------------------------------------------------------------------------------+\n   | ``release-note/major``            | This is a major feature addition, e.g. Add MongoDB support                                             |\n   +-----------------------------------+--------------------------------------------------------------------------------------------------------+\n   | ``release-note/minor``            | This is a minor feature addition, e.g. Add support for a Kubernetes version                            |\n   +-----------------------------------+--------------------------------------------------------------------------------------------------------+\n   | ``release-note/misc``             | This is a not user-facing change, e.g. Refactor endpoint package, a bug fix of a non-released feature  |\n   +-----------------------------------+--------------------------------------------------------------------------------------------------------+\n   | ``release-note/ci``               | This is a CI feature or bug fix.                                                                       |\n   +-----------------------------------+--------------------------------------------------------------------------------------------------------+\n\n#. Verify the release note text. If not explicitly changed, the title of the PR\n   will be used for the release notes. If you want to change this, you can add\n   a special section to the description of the PR.\n   These release notes are primarily going to be read by users, so it is\n   important that release notes for bugs, major and minor features do not\n   contain internal details of Cilium functionality which sometimes are\n   irrelevant for users.\n\n   Example of a bad release note\n   ::\n\n      ```release-note\n      Fix concurrent access in k8s watchers structures\n      ```\n\n   Example of a good release note\n   ::\n\n      ```release-note\n      Fix panic when Cilium received an invalid Cilium Network Policy from Kubernetes\n      ```\n\n   .. note::\n\n      If multiple lines are provided, then the first line serves as the high\n      level bullet point item and any additional line will be added as a sub\n      item to the first line.\n\n#. If you have permissions, pick the right labels for your PR:\n\n   +------------------------------+---------------------------------------------------------------------------+\n   | Labels                       | When to set                                                               |\n   +==============================+===========================================================================+\n   | ``kind/bug``                 | This is a bugfix worth mentioning in the release notes                    |\n   +------------------------------+---------------------------------------------------------------------------+\n   | ``kind/enhancement``         | This enhances existing functionality in Cilium                            |\n   +------------------------------+---------------------------------------------------------------------------+\n   | ``kind/feature``             | This is a feature                                                         |\n   +------------------------------+---------------------------------------------------------------------------+\n   | ``release-blocker/X.Y``      | This PR should block the next X.Y release                                 |\n   +------------------------------+---------------------------------------------------------------------------+\n   | ``needs-backport/X.Y``       | PR needs to be backported to these stable releases                        |\n   +------------------------------+---------------------------------------------------------------------------+\n   | ``backport/X.Y``             | This is backport PR, may only be set as part of :ref:`backport_process`   |\n   +------------------------------+---------------------------------------------------------------------------+\n   | ``upgrade-impact``           | The code changes have a potential upgrade impact                          |\n   +------------------------------+---------------------------------------------------------------------------+\n   | ``area/*`` (Optional)        | Code area this PR covers                                                  |\n   +------------------------------+---------------------------------------------------------------------------+\n\n   .. note::\n\n      If you do not have permissions to set labels on your pull request. Leave\n      a comment and a core team member will add the labels for you. Most\n      reviewers will do this automatically without prior request.\n\n#. Open a draft pull request. GitHub provides the ability to create a Pull\n   Request in \"draft\" mode. On the \"New Pull Request\" page, below the pull\n   request description box there is a button for creating the pull request.\n   Click the arrow and choose \"Create draft pull request\". If your PR is still a\n   work in progress, please select this mode. You will still be able to run the\n   CI against it.\n\n   .. image:: https://i1.wp.com/user-images.githubusercontent.com/3477155/52671177-5d0e0100-2ee8-11e9-8645-bdd923b7d93b.gif\n       :align: center\n\n#. To notify reviewers that the PR is ready for review, click **Ready for\n   review** at the bottom of the page.\n\n#. Engage in any discussions raised by reviewers and address any changes\n   requested. Set the PR to draft PR mode while you address changes, then click\n   **Ready for review** to re-request review.\n\n   .. image:: /images/cilium_request_review.png\n\nGetting a pull request merged\n \n #. As you submit the pull request as described in the section :ref: submit_pr .\nOne of the reviewers will start a CI run by replying with a comment\n /test  as described in :ref: trigger_phrases . If you are an\n organization member _, you can trigger the CI run yourself. CI consists of: \n #. Static code analysis by GitHub Actions and Travis CI. Golang linter\nsuggestions are added in-line on PRs. For other failed jobs, please refer\nto build log for required action (e.g. Please run  go mod tidy && go mod       vendor  and submit your changes, etc). \n #. :ref: ci_gha : Will run a series of tests: \n   #. Unit tests\n  #. Single node runtime tests\n  #. Multi node Kubernetes tests\n\n  If a CI test fails which seems unrelated to your PR, it may be a flaky\n  test. Follow the process described in :ref:`ci_failure_triage`.\n \n #. As part of the submission, GitHub will have requested a review from the\nrespective code owners according to the  CODEOWNERS  file in the\nrepository. \n #. Address any feedback received from the reviewers\n#. You can push individual commits to address feedback and then rebase your\nbranch at the end before merging.\n#. Once you have addressed the feedback, re-request a review from the\nreviewers that provided feedback by clicking on the button next to their\nname in the list of reviewers. This ensures that the reviewers are\nnotified again that your PR is ready for subsequent review. \n #. Owners of the repository will automatically adjust the labels on the pull\nrequest to track its state and progress towards merging. \n #. Once the PR has been reviewed and the CI tests have passed, the PR will be\nmerged by one of the repository owners. In case this does not happen, ping\nus on  Cilium Slack _ in the  #development  channel. \n .. _organization member: https://github.com/cilium/community/blob/main/CONTRIBUTOR-LADDER.md#organization-member \n Handling large pull requests \n If the PR is considerably large (e.g. with more than 200 lines changed and/or\nmore than 6 commits), consider whether there is a good way to split the PR into\nsmaller PRs that can be merged more incrementally. Reviewers are often more\nhesitant to review large PRs due to the level of complexity involved in\nunderstanding the changes and the amount of time required to provide\nconstructive review comments. By making smaller logical PRs, this makes it\neasier for the reviewer to provide comments and to engage in dialogue on the\nPR, and also means there should be fewer overall pieces of feedback that you\nneed to address as a contributor. Tighter feedback cycles like this then make\nit easier to get your contributions into the tree, which also helps with\nreducing conflicts with other contributions. Good candidates for smaller PRs\nmay be individual bugfixes, or self-contained refactoring that adjusts the code\nin order to make it easier to build subsequent functionality on top. \n While handling review on larger PRs, consider creating a new commit to address\nfeedback from each review that you receive on your PR. This will make the\nreview process smoother as GitHub has limitations that prevents reviewers from\nonly seeing the new changes added since the last time they have reviewed a PR.\nOnce all reviews are addressed those commits should be squashed against the\ncommit that introduced those changes. This can be accomplished by the usage of\n git rebase -i upstream/main  and in that window, move these new commits\nbelow the commit that introduced the changes and replace the work  pick  with\n fixup . In the following example, commit  d2cb02265  will be combined into\n 9c62e62d8  and commit  146829b59  will be combined into  9400fed20 . \n ::\n\n    pick 9c62e62d8 docs: updating contribution guide process\n    fixup d2cb02265 joe + paul + chris changes\n    pick 9400fed20 docs: fixing typo\n    fixup 146829b59 Quentin and Maciej reviews\n \n Once this is done you can perform push force into your branch and request for\nyour PR to be merged. \n Reviewers should apply the documented :ref: review_process  when providing\nfeedback to a PR. \n .. _dev_coo: \n Developer's Certificate of Origin \n \nTo improve tracking of who did what, we've introduced a \"sign-off\"\nprocedure.\n\nThe sign-off is a simple line at the end of the explanation for the\ncommit, which certifies that you wrote it or otherwise have the right to\npass it on as open-source work. The rules are pretty simple: if you can\ncertify the below:\n\n::\n\n    Developer Certificate of Origin\n    Version 1.1\n\n    Copyright (C) 2004, 2006 The Linux Foundation and its contributors.\n    1 Letterman Drive\n    Suite D4700\n    San Francisco, CA, 94129\n\n    Everyone is permitted to copy and distribute verbatim copies of this\n    license document, but changing it is not allowed.\n\n\n    Developer's Certificate of Origin 1.1\n\n    By making a contribution to this project, I certify that:\n\n    (a) The contribution was created in whole or in part by me and I\n        have the right to submit it under the open source license\n        indicated in the file; or\n\n    (b) The contribution is based upon previous work that, to the best\n        of my knowledge, is covered under an appropriate open source\n        license and I have the right under that license to submit that\n        work with modifications, whether created in whole or in part\n        by me, under the same open source license (unless I am\n        permitted to submit under a different license), as indicated\n        in the file; or\n\n    (c) The contribution was provided directly to me by some other\n        person who certified (a), (b) or (c) and I have not modified\n        it.\n\n    (d) I understand and agree that this project and the contribution\n        are public and that a record of the contribution (including all\n        personal information I submit with it, including my sign-off) is\n        maintained indefinitely and may be redistributed consistent with\n        this project or the open source license(s) involved.\n\nthen you just add a line saying:\n\n::\n\n   Signed-off-by: Random J Developer <random@developer.example.org>\n\nIf you need to add your sign off to a commit you have already made, please see `this article <https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/managing-commits/amending-a-commit>`_.\n\nCilium follows the real names policy described in the CNCF `DCO Guidelines v1.0\n<https://github.com/cncf/foundation/blob/main/dco-guidelines.md>`_:\n\n::\n\n    The DCO requires the use of a real name that can be used to identify\n    someone in case there is an issue about a contribution they made.\n\n    A real name does not require a legal name, nor a birth name, nor any name\n    that appears on an official ID (e.g. a passport). Your real name is the\n    name you convey to people in the community for them to use to identify you\n    as you. The key concern is that your identification is sufficient enough to\n    contact you if an issue were to arise in the future about your\n    contribution.\n\n    Your real name should not be an anonymous id or false name that\n    misrepresents who you are.\n\n.. _contributor_ladder:\n\nContributor Ladder\n~~~~~~~~~~~~~~~~~~\n\nTo help contributors grow in both privileges and responsibilities for the\nproject, Cilium also has a `contributor ladder \n<https://github.com/cilium/community/blob/main/CONTRIBUTOR-LADDER.md>`_.\nThe ladder lays out how contributors can go from community contributor\nto a committer and what is expected for each level. Community members\ngenerally start at the first levels of the \"ladder\" and advance up it as\ntheir involvement in the project grows. Our contributors are happy to \nhelp you advance along the contributor ladder.",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/contributing/development/contributing_guide.rst",
  "extracted_at": "2025-09-03T01:13:28.794780Z"
}
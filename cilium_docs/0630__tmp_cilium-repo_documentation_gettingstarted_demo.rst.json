{
  "url": "file:///tmp/cilium-repo/Documentation/gettingstarted/demo.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _starwars_demo:\n\n#######################################\nGetting Started with the Star Wars Demo\n#######################################\n\n.. include:: /security/gsg_sw_demo.rst\n\nCheck Current Access\n====================\nFrom the perspective of the *deathstar* service, only the ships with label ``org=empire`` are allowed to connect and request landing. Since we have no rules enforced, both *xwing* and *tiefighter* will be able to request landing. To test this, use the commands below.\n\n.. code-block:: shell-session\n\n    $ kubectl exec xwing -- curl -s -XPOST deathstar.default.svc.cluster.local/v1/request-landing\n    Ship landed\n    $ kubectl exec tiefighter -- curl -s -XPOST deathstar.default.svc.cluster.local/v1/request-landing\n    Ship landed\n\nApply an L3/L4 Policy\n=====================\n\nWhen using Cilium, endpoint IP addresses are irrelevant when defining security\npolicies. Instead, you can use the labels assigned to the pods to define\nsecurity policies. The policies will be applied to the right pods based on the labels irrespective of where or when it is running within the cluster.\n\nWe'll start with the basic policy restricting deathstar landing requests to only the ships that have label (``org=empire``). This will not allow any ships that don't have the ``org=empire`` label to even connect with the *deathstar* service.\nThis is a simple policy that filters only on IP protocol (network layer 3) and TCP protocol (network layer 4), so it is often referred to as an L3/L4 network security policy.\n\nNote: Cilium performs stateful *connection tracking*, meaning that if policy allows\nthe frontend to reach backend, it will automatically allow all required reply\npackets that are part of backend replying to frontend within the context of the\nsame TCP/UDP connection.\n\n**L4 Policy with Cilium and Kubernetes**\n\n.. image:: images/cilium_http_l3_l4_gsg.png\n   :scale: 30 %\n\nWe can achieve that with the following CiliumNetworkPolicy:\n\n.. literalinclude:: ../../examples/minikube/sw_l3_l4_policy.yaml\n   :language: yaml\n\nCiliumNetworkPolicies match on pod labels using an \"endpointSelector\" to identify the sources and destinations to which the policy applies.\nThe above policy whitelists traffic sent from any pods with label (``org=empire``) to *deathstar* pods with label (``org=empire, class=deathstar``) on TCP port 80.\n\nTo apply this L3/L4 policy, run:\n\n.. parsed-literal::\n\n    $ kubectl create -f \\ |SCM_WEB|\\/examples/minikube/sw_l3_l4_policy.yaml\n    ciliumnetworkpolicy.cilium.io/rule1 created\n\n\nNow if we run the landing requests again, only the *tiefighter* pods with the label ``org=empire`` will succeed. The *xwing* pods will be blocked!\n\n.. code-block:: shell-session\n\n    $ kubectl exec tiefighter -- curl -s -XPOST deathstar.default.svc.cluster.local/v1/request-landing\n    Ship landed\n\nThis works as expected. Now the same request run from an *xwing* pod will fail:\n\n.. code-block:: shell-session\n\n    $ kubectl exec xwing -- curl -s -XPOST deathstar.default.svc.cluster.local/v1/request-landing\n\nThis request will hang, so press Control-C to kill the curl request, or wait for it to time out.\n\nInspecting the Policy\n=====================\n\nIf we run ``cilium-dbg endpoint list`` again we will see that the pods with the label ``org=empire`` and ``class=deathstar`` now have ingress policy enforcement enabled as per the policy above.\n\n.. code-block:: shell-session\n\n    $ kubectl -n kube-system exec cilium-1c2cz -- cilium-dbg endpoint list\n    ENDPOINT   POLICY (ingress)   POLICY (egress)   IDENTITY   LABELS (source:key[=value])                       IPv6   IPv4         STATUS\n               ENFORCEMENT        ENFORCEMENT\n    232        Enabled            Disabled          16530      k8s:class=deathstar                                      10.0.0.147   ready\n                                                               k8s:io.cilium.k8s.policy.cluster=default\n                                                               k8s:io.cilium.k8s.policy.serviceaccount=default\n                                                               k8s:io.kubernetes.pod.namespace=default\n                                                               k8s:org=empire\n    726        Disabled           Disabled          1          reserved:host                                                         ready\n    883        Disabled           Disabled          4          reserved:health                                          10.0.0.244   ready\n    1634       Disabled           Disabled          51373      k8s:io.cilium.k8s.policy.cluster=default                 10.0.0.118   ready\n                                                               k8s:io.cilium.k8s.policy.serviceaccount=coredns\n                                                               k8s:io.kubernetes.pod.namespace=kube-system\n                                                               k8s:k8s-app=kube-dns\n    1673       Disabled           Disabled          31028      k8s:class=tiefighter                                     10.0.0.112   ready\n                                                               k8s:io.cilium.k8s.policy.cluster=default\n                                                               k8s:io.cilium.k8s.policy.serviceaccount=default\n                                                               k8s:io.kubernetes.pod.namespace=default\n                                                               k8s:org=empire\n    2811       Disabled           Disabled          51373      k8s:io.cilium.k8s.policy.cluster=default                 10.0.0.47    ready\n                                                               k8s:io.cilium.k8s.policy.serviceaccount=coredns\n                                                               k8s:io.kubernetes.pod.namespace=kube-system\n                                                               k8s:k8s-app=kube-dns\n    2843       Enabled            Disabled          16530      k8s:class=deathstar                                      10.0.0.89    ready\n                                                               k8s:io.cilium.k8s.policy.cluster=default\n                                                               k8s:io.cilium.k8s.policy.serviceaccount=default\n                                                               k8s:io.kubernetes.pod.namespace=default\n                                                               k8s:org=empire\n    3184       Disabled           Disabled          22654      k8s:class=xwing                                          10.0.0.30    ready\n                                                               k8s:io.cilium.k8s.policy.cluster=default\n                                                               k8s:io.cilium.k8s.policy.serviceaccount=default\n                                                               k8s:io.kubernetes.pod.namespace=default\n                                                               k8s:org=alliance\n\n\nYou can also inspect the policy details via ``kubectl``\n\n.. code-block:: shell-session\n\n    $ kubectl get cnp\n    NAME    AGE\n    rule1   2m\n\n    $ kubectl describe cnp rule1\n    Name:         rule1\n    Namespace:    default\n    Labels:       <none>\n    Annotations:  <none>\n    API Version:  cilium.io/v2\n    Description:  L3-L4 policy to restrict deathstar access to empire ships only\n    Kind:         CiliumNetworkPolicy\n    Metadata:\n      Creation Timestamp:  2020-06-15T14:06:48Z\n      Generation:          1\n      Managed Fields:\n        API Version:  cilium.io/v2\n        Fields Type:  FieldsV1\n        fieldsV1:\n          f:description:\n          f:spec:\n            .:\n            f:endpointSelector:\n              .:\n              f:matchLabels:\n                .:\n                f:class:\n                f:org:\n            f:ingress:\n        Manager:         kubectl\n        Operation:       Update\n        Time:            2020-06-15T14:06:48Z\n      Resource Version:  2914\n      Self Link:         /apis/cilium.io/v2/namespaces/default/ciliumnetworkpolicies/rule1\n      UID:               eb3a688b-b3aa-495c-b20a-d4f79e7c088d\n    Spec:\n      Endpoint Selector:\n        Match Labels:\n          Class:  deathstar\n          Org:    empire\n      Ingress:\n        From Endpoints:\n          Match Labels:\n            Org:  empire\n        To Ports:\n          Ports:\n            Port:      80\n            Protocol:  TCP\n    Events:            <none>\n\n\nApply and Test HTTP-aware L7 Policy\n===================================\n\nIn the simple scenario above, it was sufficient to either give *tiefighter* /\n*xwing* full access to *deathstar's* API or no access at all. But to\nprovide the strongest security (i.e., enforce least-privilege isolation)\nbetween microservices, each service that calls *deathstar's* API should be\nlimited to making only the set of HTTP requests it requires for legitimate\noperation.\n\nFor example, consider that the *deathstar* service exposes some maintenance APIs which should not be called by random empire ships. To see this run:\n\n.. code-block:: shell-session\n\n    $ kubectl exec tiefighter -- curl -s -XPUT deathstar.default.svc.cluster.local/v1/exhaust-port\n    Panic: deathstar exploded\n\n    goroutine 1 [running]:\n    main.HandleGarbage(0x2080c3f50, 0x2, 0x4, 0x425c0, 0x5, 0xa)\n            /code/src/github.com/empire/deathstar/\n            temp/main.go:9 +0x64\n    main.main()\n            /code/src/github.com/empire/deathstar/\n            temp/main.go:5 +0x85\n\n\nWhile this is an illustrative example, unauthorized access such as above can have adverse security repercussions.\n\n**L7 Policy with Cilium and Kubernetes**\n\n.. image:: images/cilium_http_l3_l4_l7_gsg.png\n   :scale: 30 %\n\nCilium is capable of enforcing HTTP-layer (i.e., L7) policies to limit what\nURLs the *tiefighter* is allowed to reach.  Here is an example policy file that\nextends our original policy by limiting *tiefighter* to making only a POST /v1/request-landing\nAPI call, but disallowing all other calls (including PUT /v1/exhaust-port).\n\n.. literalinclude:: ../../examples/minikube/sw_l3_l4_l7_policy.yaml\n   :language: yaml\n\nUpdate the existing rule to apply L7-aware policy to protect *deathstar* using:\n\n.. parsed-literal::\n\n    $ kubectl apply -f \\ |SCM_WEB|\\/examples/minikube/sw_l3_l4_l7_policy.yaml\n    ciliumnetworkpolicy.cilium.io/rule1 configured\n\n\nWe can now re-run the same test as above, but we will see a different outcome:\n\n.. code-block:: shell-session\n\n    $ kubectl exec tiefighter -- curl -s -XPOST deathstar.default.svc.cluster.local/v1/request-landing\n    Ship landed\n\n\nand\n\n.. code-block:: shell-session\n\n    $ kubectl exec tiefighter -- curl -s -XPUT deathstar.default.svc.cluster.local/v1/exhaust-port\n    Access denied\n\nAs this rule builds on the identity-aware rule, traffic from pods without the label\n``org=empire`` will continue to be dropped causing the connection to time out:\n\n.. code-block:: shell-session\n\n    $ kubectl exec xwing -- curl -s -XPOST deathstar.default.svc.cluster.local/v1/request-landing\n\n\nAs you can see, with Cilium L7 security policies, we are able to permit\n*tiefighter* to access only the required API resources on *deathstar*, thereby\nimplementing a \"least privilege\" security approach for communication between\nmicroservices. Note that ``path`` matches the exact url, if for example you want\nto allow anything under /v1/, you need to use a regular expression:\n\n.. code-block:: yaml\n\n    path: \"/v1/.*\"\n\nYou can observe the L7 policy via ``kubectl``:\n\n.. code-block:: shell-session\n\n    $ kubectl describe ciliumnetworkpolicies\n    Name:         rule1\n    Namespace:    default\n    Labels:       <none>\n    Annotations:  API Version:  cilium.io/v2\n    Description:  L7 policy to restrict access to specific HTTP call\n    Kind:         CiliumNetworkPolicy\n    Metadata:\n      Creation Timestamp:  2020-06-15T14:06:48Z\n      Generation:          2\n      Managed Fields:\n        API Version:  cilium.io/v2\n        Fields Type:  FieldsV1\n        fieldsV1:\n          f:description:\n          f:metadata:\n            f:annotations:\n              .:\n              f:kubectl.kubernetes.io/last-applied-configuration:\n          f:spec:\n            .:\n            f:endpointSelector:\n              .:\n              f:matchLabels:\n                .:\n                f:class:\n                f:org:\n            f:ingress:\n        Manager:         kubectl\n        Operation:       Update\n        Time:            2020-06-15T14:10:46Z\n      Resource Version:  3445\n      Self Link:         /apis/cilium.io/v2/namespaces/default/ciliumnetworkpolicies/rule1\n      UID:               eb3a688b-b3aa-495c-b20a-d4f79e7c088d\n    Spec:\n      Endpoint Selector:\n        Match Labels:\n          Class:  deathstar\n          Org:    empire\n      Ingress:\n        From Endpoints:\n          Match Labels:\n            Org:  empire\n        To Ports:\n          Ports:\n            Port:      80\n            Protocol:  TCP\n          Rules:\n            Http:\n              Method:  POST\n              Path:    /v1/request-landing\n    Events:            <none>\n\nand ``cilium-dbg`` CLI:\n\n.. code-block:: shell-session\n\n    $ kubectl -n kube-system exec cilium-qh5l2 -- cilium-dbg policy get\n    [\n      {\n        \"endpointSelector\": {\n          \"matchLabels\": {\n            \"any:class\": \"deathstar\",\n            \"any:org\": \"empire\",\n            \"k8s:io.kubernetes.pod.namespace\": \"default\"\n          }\n        },\n        \"ingress\": [\n          {\n            \"fromEndpoints\": [\n              {\n                \"matchLabels\": {\n                  \"any:org\": \"empire\",\n                  \"k8s:io.kubernetes.pod.namespace\": \"default\"\n                }\n              }\n            ],\n            \"toPorts\": [\n              {\n                \"ports\": [\n                  {\n                    \"port\": \"80\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"rules\": {\n                  \"http\": [\n                    {\n                      \"path\": \"/v1/request-landing\",\n                      \"method\": \"POST\"\n                    }\n                  ]\n                }\n              }\n            ]\n          }\n        ],\n        \"labels\": [\n          {\n            \"key\": \"io.cilium.k8s.policy.derived-from\",\n            \"value\": \"CiliumNetworkPolicy\",\n            \"source\": \"k8s\"\n          },\n          {\n            \"key\": \"io.cilium.k8s.policy.name\",\n            \"value\": \"rule1\",\n            \"source\": \"k8s\"\n          },\n          {\n            \"key\": \"io.cilium.k8s.policy.namespace\",\n            \"value\": \"default\",\n            \"source\": \"k8s\"\n          },\n          {\n            \"key\": \"io.cilium.k8s.policy.uid\",\n            \"value\": \"eb3a688b-b3aa-495c-b20a-d4f79e7c088d\",\n            \"source\": \"k8s\"\n          }\n        ]\n      }\n    ]\n    Revision: 11\n\nIt is also possible to monitor the HTTP requests live by using ``cilium-dbg monitor``:\n\n.. code-block:: shell-session\n\n    $ kubectl exec -it -n kube-system cilium-kzgdx -- cilium-dbg monitor -v --type l7\n    <- Response http to 0 ([k8s:class=tiefighter k8s:io.cilium.k8s.policy.cluster=default k8s:io.cilium.k8s.policy.serviceaccount=default k8s:io.kubernetes.pod.namespace=default k8s:org=empire]) from 2756 ([k8s:io.cilium.k8s.policy.cluster=default k8s:class=deathstar k8s:org=empire k8s:io.kubernetes.pod.namespace=default k8s:io.cilium.k8s.policy.serviceaccount=default]), identity 8876->43854, verdict Forwarded POST http://deathstar.default.svc.cluster.local/v1/request-landing => 200\n    <- Request http from 0 ([k8s:class=tiefighter k8s:io.cilium.k8s.policy.cluster=default k8s:io.cilium.k8s.policy.serviceaccount=default k8s:io.kubernetes.pod.namespace=default k8s:org=empire]) to 2756 ([k8s:io.cilium.k8s.policy.cluster=default k8s:class=deathstar k8s:org=empire k8s:io.kubernetes.pod.namespace=default k8s:io.cilium.k8s.policy.serviceaccount=default]), identity 8876->43854, verdict Denied PUT http://deathstar.default.svc.cluster.local/v1/request-landing => 403\n\nThe above output demonstrates a successful response to a POST request followed by a PUT request that is denied by the L7 policy.\n\nWe hope you enjoyed the tutorial.  Feel free to play more with the setup, read\nthe rest of the documentation, and reach out to us on the `Cilium Slack`_ with\nany questions!\n\nClean-up\n========\n\n.. parsed-literal::\n\n   $ kubectl delete -f \\ |SCM_WEB|\\/examples/minikube/http-sw-app.yaml\n   $ kubectl delete cnp rule1\n\n\n.. include:: ../installation/next-steps.rst\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/gettingstarted/demo.rst",
  "extracted_at": "2025-09-03T01:13:29.365684Z"
}
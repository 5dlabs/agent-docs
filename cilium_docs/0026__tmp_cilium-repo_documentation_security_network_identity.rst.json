{
  "url": "file:///tmp/cilium-repo/Documentation/security/network/identity.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _arch_id_security:\n\n**************\nIdentity-Based\n**************\n\nContainer management systems such as Kubernetes deploy a networking model which\nassigns an individual IP address to each pod (group of containers). This\nensures simplicity in architecture, avoids unnecessary network address\ntranslation (NAT) and provides each individual container with a full range of\nport numbers to use. The logical consequence of this model is that depending on\nthe size of the cluster and total number of pods, the networking layer has to\nmanage a large number of IP addresses.\n\nTraditionally security enforcement architectures have been based on IP address\nfilters.  Let's walk through a simple example: If all pods with the label\n``role=frontend`` should be allowed to initiate connections to all pods with\nthe label ``role=backend`` then each cluster node which runs at least one pod\nwith the label ``role=backend`` must have a corresponding filter installed\nwhich allows all IP addresses of all ``role=frontend`` pods to initiate a\nconnection to the IP addresses of all local ``role=backend`` pods. All other\nconnection requests should be denied. This could look like this: If the\ndestination address is *10.1.1.2* then allow the connection only if the source\naddress is one of the following *[10.1.2.2,10.1.2.3,20.4.9.1]*.\n\nEvery time a new pod with the label ``role=frontend`` or ``role=backend`` is\neither started or stopped, the rules on every cluster node which run any such\npods must be updated by either adding or removing the corresponding IP address\nfrom the list of allowed IP addresses. In large distributed applications, this\ncould imply updating thousands of cluster nodes multiple times per second\ndepending on the churn rate of deployed pods. Worse, the starting of new\n``role=frontend`` pods must be delayed until all servers running\n``role=backend`` pods have been updated with the new security rules as\notherwise connection attempts from the new pod could be mistakenly dropped.\nThis makes it difficult to scale efficiently.\n\nIn order to avoid these complications which can limit scalability and\nflexibility, Cilium entirely separates security from network addressing.\nInstead, security is based on the identity of a pod, which is derived through\nlabels.  This identity can be shared between pods. This means that when the\nfirst ``role=frontend`` pod is started, Cilium assigns an identity to that pod\nwhich is then allowed to initiate connections to the identity of the\n``role=backend`` pod. The subsequent start of additional ``role=frontend`` pods\nonly requires to resolve this identity via a key-value store, no action has to\nbe performed on any of the cluster nodes hosting ``role=backend`` pods. The\nstarting of a new pod must only be delayed until the identity of the pod has\nbeen resolved which is a much simpler operation than updating the security\nrules on all other cluster nodes.\n\n.. image:: _static/identity.png\n    :align: center\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/security/network/identity.rst",
  "extracted_at": "2025-09-03T01:13:28.736035Z"
}
{
  "url": "file:///tmp/cilium-repo/Documentation/installation/kind.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _gs_kind:\n\n***********************\nInstallation Using Kind\n***********************\n\nThis guide uses `kind <https://kind.sigs.k8s.io/>`_ to demonstrate deployment\nand operation of Cilium in a multi-node Kubernetes cluster running locally on\nDocker.\n\nInstall Dependencies\n====================\n\n.. include:: kind-install-deps.rst\n\nConfigure kind\n==============\n\n.. include:: kind-configure.rst\n\nCreate a cluster\n================\n\n.. include:: kind-create-cluster.rst\n\n.. _kind_install_cilium:\n\nInstall Cilium\n==============\n\n.. include:: k8s-install-download-release.rst\n.. include:: kind-preload.rst\n\nThen, install Cilium release via Helm:\n\n.. parsed-literal::\n\n   helm install cilium |CHART_RELEASE| \\\\\n      --namespace kube-system \\\\\n      --set image.pullPolicy=IfNotPresent \\\\\n      --set ipam.mode=kubernetes\n\n.. note::\n\n   To enable Cilium's Socket LB (:ref:`kubeproxy-free`), cgroup v2 needs to be\n   enabled, and Kind nodes need to run in separate `cgroup namespaces\n   <https://man7.org/linux/man-pages/man7/cgroup_namespaces.7.html>`__,\n   and these namespaces need to be different from the cgroup namespace\n   of the underlying host so that Cilium can attach BPF programs at the right\n   cgroup hierarchy. To verify this, run the following commands, and ensure\n   that the cgroup values are different:\n\n   .. code-block:: shell-session\n\n      $ docker exec kind-control-plane ls -al /proc/self/ns/cgroup\n      lrwxrwxrwx 1 root root 0 Jul 20 19:20 /proc/self/ns/cgroup -> 'cgroup:[4026532461]'\n\n      $ docker exec kind-worker ls -al /proc/self/ns/cgroup\n      lrwxrwxrwx 1 root root 0 Jul 20 19:20 /proc/self/ns/cgroup -> 'cgroup:[4026532543]'\n\n      $ ls -al /proc/self/ns/cgroup\n      lrwxrwxrwx 1 root root 0 Jul 19 09:38 /proc/self/ns/cgroup -> 'cgroup:[4026531835]'\n\n\n   One way to enable cgroup v2 is to set the kernel parameter\n   ``systemd.unified_cgroup_hierarchy=1``. To enable cgroup namespaces, a container\n   runtime needs to configured accordingly. For example in Docker,\n   dockerd's ``--default-cgroupns-mode`` has to be set to ``private``.\n\n   Another requirement for the Socket LB on Kind to properly function is that either cgroup v1\n   controllers ``net_cls`` and ``net_prio`` are disabled (or cgroup v1 altogether is disabled\n   e.g., by setting the kernel parameter ``cgroup_no_v1=\"all\"``), or the host kernel\n   should be 5.14 or more recent to include this `fix\n   <https://github.com/torvalds/linux/commit/8520e224f547cd070c7c8f97b1fc6d58cff7ccaa>`__.\n\n   See the `Pull Request <https://github.com/cilium/cilium/pull/16259>`__ for more details.\n\n.. include:: k8s-install-validate.rst\n\n.. include:: next-steps.rst\n\nAttaching a Debugger\n====================\n\nCilium's Kind configuration enables access to Delve debug server instances running\nin the agent and operator Pods by default. See :ref:`gs_debugging` to learn how\nto use it.\n\nTroubleshooting\n===============\n\nUnable to contact k8s api-server\n--------------------------------\n\nIn the :ref:`Cilium agent logs <ts_agent_logs>` you will see::\n\n    level=info msg=\"Establishing connection to apiserver\" host=\"https://10.96.0.1:443\" subsys=k8s\n    level=error msg=\"Unable to contact k8s api-server\" error=\"Get https://10.96.0.1:443/api/v1/namespaces/kube-system: dial tcp 10.96.0.1:443: connect: no route to host\" ipAddr=\"https://10.96.0.1:443\" subsys=k8s\n    level=fatal msg=\"Unable to initialize Kubernetes subsystem\" error=\"unable to create k8s client: unable to create k8s client: Get https://10.96.0.1:443/api/v1/namespaces/kube-system: dial tcp 10.96.0.1:443: connect: no route to host\" subsys=daemon\n\nAs Kind is running nodes as containers in Docker, they're sharing your host machines' kernel.\nIf the socket LB wasn't disabled, the eBPF programs attached by Cilium may be out of date\nand no longer routing api-server requests to the current ``kind-control-plane`` container.\n\nRecreating the kind cluster and using the helm command :ref:`kind_install_cilium` will detach the\ninaccurate eBPF programs.\n\nCrashing Cilium agent pods\n--------------------------\n\nCheck if Cilium agent pods are crashing with following logs. This may indicate\nthat you are deploying a kind cluster in an environment where Cilium is already\nrunning (for example, in the Cilium development VM). This can also happen if you\nhave other overlapping BPF ``cgroup`` type programs attached to the parent ``cgroup``\nhierarchy of the kind container nodes. In such cases, either tear down Cilium, or manually\ndetach the overlapping BPF ``cgroup`` programs running in the parent ``cgroup`` hierarchy\nby following the `bpftool documentation <https://manpages.ubuntu.com/manpages/focal/man8/bpftool-cgroup.8.html>`_.\nFor more information, see the `Pull Request <https://github.com/cilium/cilium/pull/16259>`__.\n\n::\n\n    level=warning msg=\"+ bpftool cgroup attach /var/run/cilium/cgroupv2 connect6 pinned /sys/fs/bpf/tc/globals/cilium_cgroups_connect6\" subsys=datapath-loader\n    level=warning msg=\"Error: failed to attach program\" subsys=datapath-loader\n    level=warning msg=\"+ RETCODE=255\" subsys=datapath-loader\n\n.. _gs_kind_cluster_mesh:\n\nCluster Mesh\n============\n\nWith Kind we can simulate Cluster Mesh in a sandbox too.\n\nKind Configuration\n------------------\n\nThis time we need to create (2) ``config.yaml``, one for each kubernetes cluster.\nWe will explicitly configure their ``pod-network-cidr`` and ``service-cidr`` to not overlap.\n\nExample ``kind-cluster1.yaml``:\n\n.. code-block:: yaml\n\n    kind: Cluster\n    apiVersion: kind.x-k8s.io/v1alpha4\n    nodes:\n    - role: control-plane\n    - role: worker\n    - role: worker\n    - role: worker\n    networking:\n      disableDefaultCNI: true\n      podSubnet: \"10.0.0.0/16\"\n      serviceSubnet: \"10.1.0.0/16\"\n\nExample ``kind-cluster2.yaml``:\n\n.. code-block:: yaml\n\n    kind: Cluster\n    apiVersion: kind.x-k8s.io/v1alpha4\n    nodes:\n    - role: control-plane\n    - role: worker\n    - role: worker\n    - role: worker\n    networking:\n      disableDefaultCNI: true\n      podSubnet: \"10.2.0.0/16\"\n      serviceSubnet: \"10.3.0.0/16\"\n\nCreate Kind Clusters\n--------------------\n\nWe can now create the respective clusters:\n\n.. code-block:: shell-session\n\n    kind create cluster --name=cluster1 --config=kind-cluster1.yaml\n    kind create cluster --name=cluster2 --config=kind-cluster2.yaml\n\nSetting up Cluster Mesh\n------------------------\n\nWe can deploy Cilium, and complete setup by following the Cluster Mesh guide\nwith :ref:`gs_clustermesh`. For Kind, we'll want to deploy the ``NodePort`` service into the ``kube-system`` namespace.\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/installation/kind.rst",
  "extracted_at": "2025-09-03T01:13:29.303581Z"
}
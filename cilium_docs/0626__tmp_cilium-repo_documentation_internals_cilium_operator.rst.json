{
  "url": "file:///tmp/cilium-repo/Documentation/internals/cilium_operator.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _cilium_operator_internals:\n\nCilium Operator\n===============\n\nThis document provides a technical overview of the Cilium Operator and describes\nthe cluster-wide operations it is responsible for.\n\nHighly Available Cilium Operator\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe Cilium Operator uses Kubernetes leader election library in conjunction with\nlease locks to provide HA functionality. The capability is supported on Kubernetes\nversions 1.14 and above. It is Cilium's default behavior since the 1.9 release.\n\nThe number of replicas for the HA deployment can be configured using\nHelm option ``operator.replicas``.\n\n.. parsed-literal::\n\n    helm install cilium |CHART_RELEASE| \\\\\n      --namespace kube-system \\\\\n      --set operator.replicas=3\n\n.. code-block:: shell-session\n\n    $ kubectl get deployment cilium-operator -n kube-system\n    NAME              READY   UP-TO-DATE   AVAILABLE   AGE\n    cilium-operator   3/3     3            3           46s\n\nThe operator is an integral part of Cilium installations in Kubernetes\nenvironments and is tasked to perform the following operations:\n\nCRD Registration\n~~~~~~~~~~~~~~~~\n\nThe default behavior of the Cilium Operator is to register the CRDs used by\nCilium. The following custom resources are registered by the Cilium Operator:\n\n.. include:: ../crdlist.rst\n\nIPAM\n~~~~\n\nCilium Operator is responsible for IP address management when running in\nthe following modes:\n\n-  :ref:`ipam_azure`\n-  :ref:`ipam_eni`\n-  :ref:`ipam_crd_cluster_pool`\n\nWhen running in IPAM mode :ref:`k8s_hostscope`, the allocation CIDRs used by\n``cilium-agent`` is derived from the fields ``podCIDR`` and ``podCIDRs``\npopulated by Kubernetes in the Kubernetes ``Node`` resource.\n\nFor :ref:`concepts_ipam_crd` IPAM allocation mode, it is the job of Cloud-specific\noperator to populate the required information about CIDRs in the\n``CiliumNode`` resource.\n\nCilium currently has native support for the following Cloud providers in CRD IPAM\nmode:\n\n- Azure - ``cilium-operator-azure``\n- AWS - ``cilium-operator-aws``\n\nFor more information on IPAM visit :ref:`address_management`.\n\nLoad Balancer IP Address Management\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen :ref:`lb_ipam` is used, Cilium Operator manages IP address\nfor ``type: LoadBalancer`` services.\n\nKVStore operations\n~~~~~~~~~~~~~~~~~~\n\nThese operations are performed only when KVStore is enabled for the\nCilium Operator. In addition, KVStore operations are only required when\n``cilium-operator`` is running with any of the below options:\n\n-  ``--synchronize-k8s-services``\n-  ``--synchronize-k8s-nodes``\n-  ``--identity-allocation-mode=kvstore``\n\nK8s Services synchronization\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCilium Operator performs the job of synchronizing Kubernetes services to\nexternal KVStore configured for the Cilium Operator if running with\n``--synchronize-k8s-services`` flag.\n\nThe Cilium Operator performs this operation only for shared services (services\nthat have ``service.cilium.io/shared`` annotation set to true). This is\nmeaningful when running Cilium to setup a ClusterMesh.\n\nK8s Nodes synchronization\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSimilar to K8s services, Cilium Operator also synchronizes Kubernetes nodes\ninformation to the shared KVStore.\n\nWhen a ``Node`` object is deleted it is not possible to reliably cleanup\nthe corresponding ``CiliumNode`` object from the Agent itself. The Cilium Operator\nholds the responsibility to garbage collect orphaned ``CiliumNodes``.\n\nHeartbeat update\n^^^^^^^^^^^^^^^^\n\nThe Cilium Operator periodically updates the Cilium's heartbeat path key\nwith the current time. The default key for this heartbeat is\n``cilium/.heartbeat`` in the KVStore. It is used by Cilium Agents to validate\nthat KVStore updates can be received.\n\nIdentity garbage collection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nEach workload in Kubernetes is assigned a security identity that is used\nfor policy decision making. This identity is based on common workload\nmarkers like labels. Cilium supports two identity allocation mechanisms:\n\n-  CRD Identity allocation\n-  KVStore Identity allocation\n\nBoth the mechanisms of identity allocation require the Cilium\nOperator to perform the garbage collection of stale\nidentities. This garbage collection is necessary because a 16-bit\nunsigned integer represents the security identity, and thus we can only\nhave a maximum of 65536 identities in the cluster.\n\nCRD Identity garbage collection\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCRD identity allocation uses Kubernetes custom resource\n``CiliumIdentity`` to represent a security identity. This is the default\nbehavior of Cilium and works out of the box in any K8s environment\nwithout any external dependency.\n\nThe Cilium Operator maintains a local cache for CiliumIdentities with\nthe last time they were seen active. A controller runs in the background\nperiodically which scans this local cache and deletes identities that\nhave not had their heartbeat life sign updated since\n``identity-heartbeat-timeout``.\n\nOne thing to note here is that an Identity is always assumed to be live\nif it has an endpoint associated with it.\n\nKVStore Identity garbage collection\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWhile the CRD allocation mode for identities is more common, it is\nlimited in terms of scale. When running in a very large environment, a\nsaner choice is to use the KVStore allocation mode. This mode stores\nthe identities in an external store like etcd.\n\nFor more information on Cilium's scalability visit :ref:`scalability_guide`.\n\nThe garbage collection mechanism involves scanning the KVStore of all\nthe identities. For each identity, the Cilium Operator search in the KVStore\nif there are any active users of that identity. The entry is deleted from the\nKVStore if there are no active users.\n\nCiliumEndpoint garbage collection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCiliumEndpoint object is created by the ``cilium-agent`` for each ``Pod``\nin the cluster. The Cilium Operator manages a controller to handle the\ngarbage collection of orphaned ``CiliumEndpoint`` objects. An orphaned\n``CiliumEndpoint`` object means that the owner of the endpoint object is\nnot active anymore in the cluster. CiliumEndpoints are also considered\norphaned if the owner is an existing Pod in ``PodFailed`` or ``PodSucceeded``\nstate.\nThis controller is run periodically if the ``endpoint-gc-interval`` option\nis specified and only once during startup if the option is unspecified.\n\nDerivative network policy creation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen using Cloud-provider-specific constructs like ``toGroups`` in the\nnetwork policy spec, the Cilium Operator performs the job of converting these\nconstructs to derivative CNP/CCNP objects without these fields.\n\nFor more information, see how Cilium network policies incorporate the\nuse of ``toGroups`` to :ref:`lock down external access using AWS security groups<aws_metadata_with_policy>`.\n\nIngress and Gateway API Support\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen Ingress or Gateway API support is enabled, the Cilium Operator performs the\ntask of parsing Ingress or Gateway API objects and converting them into\n``CiliumEnvoyConfig`` objects used for configuring the per-node Envoy proxy.\n\nAdditionally, Secrets used by Ingress or Gateway API objects will be synced to\na Cilium-managed namespace that the Cilium Agent is then granted access to. This\nreduces the permissions required of the Cilium Agent.\n\nMutual Authentication Support\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen Cilium's Mutual Authentication Support is enabled, the Cilium Operator is\nresponsible for ensuring that each Cilium Identity has an associated identity\nin the certificate management system. It will create and delete identity\nregistrations in the configured certificate management section as required.\nThe Cilium Operator does not, however have any to the key material in the\nidentities.\n\nThat information is only shared with the Cilium Agent via other channels.\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/internals/cilium_operator.rst",
  "extracted_at": "2025-09-03T01:13:29.361671Z"
}
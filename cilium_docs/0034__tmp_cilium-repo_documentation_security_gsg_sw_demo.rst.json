{
  "url": "file:///tmp/cilium-repo/Documentation/security/gsg_sw_demo.rst",
  "content": "Deploy the Demo Application\n===========================\n\nWhen we have Cilium deployed and ``kube-dns`` operating correctly we can deploy our demo application.\n\nIn our Star Wars-inspired example, there are three microservices applications: *deathstar*, *tiefighter*, and *xwing*. The *deathstar* runs an HTTP webservice on port 80, which is exposed as a `Kubernetes Service <https://kubernetes.io/docs/concepts/services-networking/service/>`_ to load-balance requests to *deathstar* across two pod replicas. The *deathstar* service provides landing services to the empire's spaceships so that they can request a landing port. The *tiefighter* pod represents a landing-request client service on a typical empire ship and *xwing* represents a similar service on an alliance ship. They exist so that we can test different security policies for access control to *deathstar* landing services.\n\n**Application Topology for Cilium and Kubernetes**\n\n.. image:: /gettingstarted/images/cilium_http_gsg.png\n   :scale: 30 %\n\nThe file ``http-sw-app.yaml`` contains a `Kubernetes Deployment <https://kubernetes.io/docs/concepts/workloads/controllers/deployment/>`_ for each of the three services.\nEach deployment is identified using the Kubernetes labels (``org=empire, class=deathstar``), (``org=empire, class=tiefighter``),\nand (``org=alliance, class=xwing``).\nIt also includes a deathstar-service, which load-balances traffic to all pods with label (``org=empire, class=deathstar``).\n\n.. parsed-literal::\n\n    $ kubectl create -f \\ |SCM_WEB|\\/examples/minikube/http-sw-app.yaml\n    service/deathstar created\n    deployment.apps/deathstar created\n    pod/tiefighter created\n    pod/xwing created\n\n\nKubernetes will deploy the pods and service in the background.  Running\n``kubectl get pods,svc`` will inform you about the progress of the operation.\nEach pod will go through several states until it reaches ``Running`` at which\npoint the pod is ready.\n\n.. code-block:: shell-session\n\n    $ kubectl get pods,svc\n    NAME                             READY   STATUS    RESTARTS   AGE\n    pod/deathstar-6fb5694d48-5hmds   1/1     Running   0          107s\n    pod/deathstar-6fb5694d48-fhf65   1/1     Running   0          107s\n    pod/tiefighter                   1/1     Running   0          107s\n    pod/xwing                        1/1     Running   0          107s\n\n    NAME                 TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE\n    service/deathstar    ClusterIP   10.96.110.8   <none>        80/TCP    107s\n    service/kubernetes   ClusterIP   10.96.0.1     <none>        443/TCP   3m53s\n\nEach pod will be represented in Cilium as an :ref:`endpoint` in the local cilium agent.\nWe can invoke the ``cilium-dbg`` tool inside the Cilium pod to list them (in a single-node installation\n``kubectl -n kube-system exec ds/cilium -- cilium-dbg endpoint list`` lists them all, but in a\nmulti-node installation, only the ones running on the same node will be listed):\n\n.. code-block:: shell-session\n\n    $ kubectl -n kube-system get pods -l k8s-app=cilium\n    NAME           READY   STATUS    RESTARTS   AGE\n    cilium-5ngzd   1/1     Running   0          3m19s\n\n    $ kubectl -n kube-system exec cilium-5ngzd -- cilium-dbg endpoint list\n    ENDPOINT   POLICY (ingress)   POLICY (egress)   IDENTITY   LABELS (source:key[=value])                       IPv6   IPv4         STATUS\n               ENFORCEMENT        ENFORCEMENT\n    232        Disabled           Disabled          16530      k8s:class=deathstar                                      10.0.0.147   ready\n                                                               k8s:io.cilium.k8s.policy.cluster=default\n                                                               k8s:io.cilium.k8s.policy.serviceaccount=default\n                                                               k8s:io.kubernetes.pod.namespace=default\n                                                               k8s:org=empire\n    726        Disabled           Disabled          1          reserved:host                                                         ready\n    883        Disabled           Disabled          4          reserved:health                                          10.0.0.244   ready\n    1634       Disabled           Disabled          51373      k8s:io.cilium.k8s.policy.cluster=default                 10.0.0.118   ready\n                                                               k8s:io.cilium.k8s.policy.serviceaccount=coredns\n                                                               k8s:io.kubernetes.pod.namespace=kube-system\n                                                               k8s:k8s-app=kube-dns\n    1673       Disabled           Disabled          31028      k8s:class=tiefighter                                     10.0.0.112   ready\n                                                               k8s:io.cilium.k8s.policy.cluster=default\n                                                               k8s:io.cilium.k8s.policy.serviceaccount=default\n                                                               k8s:io.kubernetes.pod.namespace=default\n                                                               k8s:org=empire\n    2811       Disabled           Disabled          51373      k8s:io.cilium.k8s.policy.cluster=default                 10.0.0.47    ready\n                                                               k8s:io.cilium.k8s.policy.serviceaccount=coredns\n                                                               k8s:io.kubernetes.pod.namespace=kube-system\n                                                               k8s:k8s-app=kube-dns\n    2843       Disabled           Disabled          16530      k8s:class=deathstar                                      10.0.0.89    ready\n                                                               k8s:io.cilium.k8s.policy.cluster=default\n                                                               k8s:io.cilium.k8s.policy.serviceaccount=default\n                                                               k8s:io.kubernetes.pod.namespace=default\n                                                               k8s:org=empire\n    3184       Disabled           Disabled          22654      k8s:class=xwing                                          10.0.0.30    ready\n                                                               k8s:io.cilium.k8s.policy.cluster=default\n                                                               k8s:io.cilium.k8s.policy.serviceaccount=default\n                                                               k8s:io.kubernetes.pod.namespace=default\n                                                               k8s:org=alliance\n\n\nBoth ingress and egress policy enforcement is still disabled on all of these pods because no network\npolicy has been imported yet which select any of the pods.\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/security/gsg_sw_demo.rst",
  "extracted_at": "2025-09-03T00:53:44.707616Z"
}
{
  "url": "file:///tmp/cilium-repo/Documentation/network/bird.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n \n Using BIRD to run BGP (deprecated) \n \n BIRD is an open-source implementation for routing Internet Protocol packets on Unix-like operating systems <https://en.wikipedia.org/wiki/Bird_Internet_routing_daemon> .\nIf you are not familiar with it, you had best have a glance at the  User's Guide  first. \n .. _ User's Guide : https://bird.network.cz/?get_doc&f=bird.html&v=20 \n BIRD provides a way to advertise routes using traditional networking protocols\nto allow Cilium-managed endpoints to be accessible outside the cluster. This\nguide assumes that Cilium is already deployed in the cluster, and that the\nremaining piece is how to ensure that the pod CIDR ranges are externally\nroutable. \n BIRD <https://bird.network.cz> _ maintains two release families at present:\n 1.x  and  2.x , and the configuration format varies a lot between them.\nUnless you have already deployed the  1.x , we suggest using  2.x \ndirectly, as the  2.x  will live longer. The following examples will denote\n bird  as the  bird2  software and use configuration in the format that\n bird2  understands. \n This guide shows how to install and configure bird on CentOS 7.x to make it\ncollaborate with Cilium. Installation and configuration on other platforms\nshould be very similar. \n Install bird\n################## \n .. code-block:: shell-session \n $ yum install -y bird2\n\n$ systemctl enable bird\n$ systemctl restart bird\n \n Test the installation: \n .. code-block:: shell-session \n $ birdc show route\nBIRD 2.0.6 ready.\n\n$ birdc              # interactive shell\nBIRD 2.0.6 ready.\nbird> show bfd sessions\nThere is no BFD protocol running\nbird>\nbird> show protocols all\nName       Proto      Table      State  Since         Info\ndevice1    Device     ---        up     10:53:40.147\n\ndirect1    Direct     ---        down   10:53:40.147\n  Channel ipv4\n    State:          DOWN\n    Input filter:   ACCEPT\n    Output filter:  REJECT\n...\n \n Basic configuration\n##################### \n It's hard to discuss bird configurations without considering specific BGP\nschemes. However, BGP scheme design is beyond the scope of this guide.\nIf you are interested in this topic, refer to  BGP in the Data Center <https://www.oreilly.com/library/view/bgp-in-the/9781491983416/> _ (O'Reilly,\n2017) for a quick start. \n In the following, we will restrict our BGP scenario as follows: \n .. image:: images/bird_sample_topo.png\n:scale: 70% \n \n physical network: simple 3-tier hierarchical architecture \n nodes connect to physical network via layer 2 switches \n announcing each node's PodCIDR to physical network via  bird \n for each node, do not import route announcements from physical network \n \n In this design, the BGP connections look like this: \n .. image:: images/bird_sample_bgp.png\n:scale: 70% \n This scheme is simple in that: \n \n core routers learn PodCIDRs from  bird , which makes the Pod IP addresses\nroutable within the entire network. \n bird  doesn't learn routes from core routers and other nodes, which keeps the\nkernel routing table of each node clean and small, and suffering no\nperformance issues. \n \n In this scheme, each node just sends pod egress traffic to node's default\ngateway (the core routers), and lets the latter do the routing. \n Below is the a reference configuration for fulfilling the above purposes: \n :: \n $ cat /etc/bird.conf\nlog syslog all;\n\nrouter id {{ NODE_IP }};\n\nprotocol device {\n        scan time 10;           # Scan interfaces every 10 seconds\n}\n\n# Disable automatically generating direct routes to all network interfaces.\nprotocol direct {\n        disabled;               # Disable by default\n}\n\n# Forbid synchronizing BIRD routing tables with the OS kernel.\nprotocol kernel {\n        ipv4 {                    # Connect protocol to IPv4 table by channel\n                import none;      # Import to table, default is import all\n                export none;      # Export to protocol. default is export none\n        };\n}\n\n# Static IPv4 routes.\nprotocol static {\n      ipv4;\n      route {{ POD_CIDR }} via \"cilium_host\";\n}\n\n# BGP peers\nprotocol bgp uplink0 {\n      description \"BGP uplink 0\";\n      local {{ NODE_IP }} as {{ NODE_ASN }};\n      neighbor {{ NEIGHBOR_0_IP }} as {{ NEIGHBOR_0_ASN }};\n      password {{ NEIGHBOR_PWD }};\n\n      ipv4 {\n              import filter {reject;};\n              export filter {accept;};\n      };\n}\n\nprotocol bgp uplink1 {\n      description \"BGP uplink 1\";\n      local {{ NODE_IP }} as {{ NODE_ASN }};\n      neighbor {{ NEIGHBOR_1_IP }} as {{ NEIGHBOR_1_ASN }};\n      password {{ NEIGHBOR_PWD }};\n\n      ipv4 {\n              import filter {reject;};\n              export filter {accept;};\n      };\n}\n \n Save the above file as  /etc/bird.conf , and replace the placeholders with\nyour own: \n .. code-block:: shell-session \n sed -i 's/{{ NODE_IP }}/<your node ip>/g'                /etc/bird.conf\nsed -i 's/{{ POD_CIDR }}/<your pod cidr>/g'              /etc/bird.conf\nsed -i 's/{{ NODE_ASN }}/<your node asn>/g'              /etc/bird.conf\nsed -i 's/{{ NEIGHBOR_0_IP }}/<your neighbor 0 ip>/g'    /etc/bird.conf\nsed -i 's/{{ NEIGHBOR_1_IP }}/<your neighbor 1 ip>/g'    /etc/bird.conf\nsed -i 's/{{ NEIGHBOR_0_ASN }}/<your neighbor 0 asn>/g'  /etc/bird.conf\nsed -i 's/{{ NEIGHBOR_1_ASN }}/<your neighbor 1 asn>/g'  /etc/bird.conf\nsed -i 's/{{ NEIGHBOR_PWD }}/<your neighbor password>/g' /etc/bird.conf\n \n Restart  bird  and check the logs: \n .. code-block:: shell-session \n $ systemctl restart bird\n\n# check logs\n$ journalctl -u bird\n-- Logs begin at Sat 2020-02-22 16:11:44 CST, end at Mon 2020-02-24 18:58:35 CST. --\nFeb 24 18:58:24 node systemd[1]: Started BIRD Internet Routing Daemon.\nFeb 24 18:58:24 node systemd[1]: Starting BIRD Internet Routing Daemon...\nFeb 24 18:58:24 node bird[137410]: Started\n \n Verify the changes, you should get something like this: \n .. code-block:: shell-session \n $ birdc show route\nBIRD 2.0.6 ready.\nTable master4:\n10.5.48.0/24         unicast [static1 20:14:51.478] * (200)\n        dev cilium_host\n \n This indicates that the PodCIDR  10.5.48.0/24  on this node has been\nsuccessfully imported into BIRD. \n .. code-block:: shell-session \n $ birdc show protocols all uplink0 | grep -A 3 -e \"Description\" -e \"stats\"\nDescription:    BGP uplink 0\nBGP state:          Established\nNeighbor address: 10.4.1.7\nNeighbor AS:      65418 \n    Route change stats:     received   rejected   filtered    ignored   accepted\n     Import updates:              0          0          0          0          0\n     Import withdraws:           10          0        ---         10          0\n     Export updates:              1          0          0        ---          1\n \n Here we see that the uplink0 BGP session is established and our PodCIDR from\nabove has been exported and accepted by the BGP peer. \n Monitoring\n############## \n bird_exporter <https://github.com/czerwonk/bird_exporter> _ could collect bird\ndaemon states, and export Prometheus-style metrics. \n It also provides a simple Grafana dashboard, but you could also create your\nown, e.g.  Trip.com's <https://ctripcloud.github.io/cilium/network/2020/01/19/trip-first-step-towards-cloud-native-networking.html> _ looks like this: \n .. image:: images/bird_dashboard.png \n Advanced Configurations\n####################### \n You may need some advanced configurations to make your BGP scheme production-ready.\nThis section lists some of these parameters, but we will not dive into details,\nthat's BIRD  User's Guide _'s responsibility. \n BFD \n Bidirectional Forwarding Detection (BFD) <https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/iproute_bgp/configuration/xe-16/irg-xe-16-book/bgp-support-for-bfd.html> _\nis a detection protocol designed to accelerate path failure detection. \n This feature also relies on peer side's configuration. \n :: \n protocol bfd {\n      interface \"{{ grains['node_mgnt_device'] }}\" {\n              min rx interval 100 ms;\n              min tx interval 100 ms;\n              idle tx interval 300 ms;\n              multiplier 10;\n              password {{ NEIGHBOR_PWD }};\n      };\n\n      neighbor {{ NEIGHBOR_0_IP] }};\n      neighbor {{ NEIGHBOR_1_IP] }};\n}\n\nprotocol bgp uplink0 {\n\t\t...\n\n        bfd on;\n}\n \n Verify, you should see something like this: \n .. code-block:: shell-session \n $ birdc show bfd sessions\nBIRD 2.0.6 ready.\nbfd1:\nIP address                Interface  State      Since         Interval  Timeout\n10.5.40.2                 bond0      Up         20:14:51.479    0.300    0.000\n10.5.40.3                 bond0      Up         20:14:51.479    0.300    0.000\n \n ECMP \n For some special purposes (e.g. L4LB), you may configure a same CIDR on multiple\nnodes. In this case, you need to configure  Equal-Cost Multi-Path (ECMP) routing <https://en.wikipedia.org/wiki/Equal-cost_multi-path_routing> _. \n This feature also relies on peer side's configuration. \n :: \n protocol kernel {\n        ipv4 {                    # Connect protocol to IPv4 table by channel\n                import none;      # Import to table, default is import all\n                export none;      # Export to protocol. default is export none\n        };\n\n        # Configure ECMP\n        merge paths yes limit {{ N }} ;\n}\n \n See the user manual for more detailed information. \n You need to check the ECMP correctness on physical network (Core router in the\nabove scenario): \n .. code-block:: shell-session \n CORE01# show ip route 10.5.2.0\nIP Route Table for VRF \"default\"\n'*' denotes best ucast next-hop\n'**' denotes best mcast next-hop\n'[x/y]' denotes [preference/metric]\n'%<string>' in via output denotes VRF <string>\n\n10.5.2.0/24, ubest/mbest: 2/0\n    *via 10.4.1.7, [200/0], 13w6d, bgp-65418, internal, tag 65418\n    *via 10.4.1.8, [200/0], 12w4d, bgp-65418, internal, tag 65418\n \n Graceful restart \n This feature also relies on peer side's configuration. \n Add  graceful restart  to each  bgp  section: \n :: \n protocol bgp uplink0 {\n\t\t...\n\n        graceful restart;\n}",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/bird.rst",
  "extracted_at": "2025-09-03T01:13:29.205255Z"
}
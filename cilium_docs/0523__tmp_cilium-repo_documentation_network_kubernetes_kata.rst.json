{
  "url": "file:///tmp/cilium-repo/Documentation/network/kubernetes/kata.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _kata:\n\n***************************\nKata Containers with Cilium\n***************************\n\n`Kata Containers <https://katacontainers.io/>`_ is an open source project that\nprovides a secure container runtime with lightweight virtual machines that feel\nand perform like containers, but provide stronger workload isolation using\nhardware virtualization technology as a second layer of defense.  Kata\nContainers implements OCI runtime spec, just like ``runc`` that is used by\nDocker. Cilium can be used along with Kata Containers, using both enables\nhigher degree of security. Kata Containers enhances security in the compute\nlayer, while Cilium provides policy and observability in the networking layer.\n\n.. warning::\n   Due to the different Kata Containers Networking model, there are limitations\n   that can cause connectivity disruptions in Cilium. Please refer to the below\n   `Limitations`_ section.\n\nThis guide shows how to install Cilium along with Kata Containers. It assumes\nthat you have already followed the official\n`Kata Containers installation user guide <https://github.com/kata-containers/documentation/tree/master/install>`_\nto get the Kata Containers runtime up and running on your platform of choice\nbut that you haven't yet setup Kubernetes.\n\n.. note::\n   This guide has been validated by following the Kata Containers guide for\n   Google Compute Engine (GCE) and using Ubuntu 18.04 LTS with the packaged\n   version of Kata Containers, CRI-containerd and Kubernetes 1.18.3.\n\nSetup Kubernetes with CRI\n=========================\n\nKata Containers runtime is an OCI compatible runtime and cannot directly\ninteract with the CRI API level. For this reason, it relies on a CRI\nimplementation to translate CRI into OCI. At the time of writing this guide,\nthere are two supported ways called CRI-O and CRI-containerd. It is up to you\nto choose the one that you want, but you have to pick one.\n\nRefer to the section :ref:`k8s_requirements` for detailed instruction on how to\nprepare your Kubernetes environment and make sure to use Kubernetes >= 1.12.\nThen, follow the\n`official guide to run Kata Containers with Kubernetes <https://github.com/kata-containers/documentation/blob/master/how-to/run-kata-with-k8s.md>`_.\n\n.. note::\n   Minimum version of kubernetes 1.12 is required to use the RuntimeClass Feature\n   for Kata Container runtime described below.\n\nWith your Kubernetes cluster ready, you can now proceed to deploy Cilium.\n\nDeploy Cilium\n=============\n\n.. include:: ../../installation/k8s-install-download-release.rst\n\nDeploy Cilium release via Helm:\n\n  .. tabs::\n\n     .. group-tab:: Using CRI-O\n\n        .. parsed-literal::\n\n           helm install cilium |CHART_RELEASE| \\\\\n             --namespace kube-system \\\\\n             --set bpf.autoMount.enabled=false\n\n     .. group-tab:: Using CRI-containerd\n\n        .. parsed-literal::\n\n           helm install cilium |CHART_RELEASE| \\\\\n             --namespace kube-system\n\n.. warning::\n\n   When using :ref:`kube-proxy-replacement <kubeproxy-free>` or its socket-level\n   loadbalancer with Kata containers, the socket-level loadbalancer should be\n   disabled for pods by setting ``socketLB.hostNamespaceOnly=true``. See\n   :ref:`socketlb-host-netns-only` for more details.\n\n.. include:: ../../installation/k8s-install-validate.rst\n\nRun Kata Containers with Cilium CNI\n===================================\n\nNow that your Kubernetes cluster is configured with the Kata Containers runtime\nand Cilium as the CNI, you can run a sample workload by following\n`these instructions <https://github.com/kata-containers/packaging/tree/master/kata-deploy#run-a-sample-workload>`_.\n\nLimitations\n===========\n\nDue to its different `Networking Design Architecture <https://github.com/kata-containers/documentation/blob/master/design/architecture.md#networking>`_,\nthe Kata runtime adds an additional layer of abstraction inside the Container\nNetworking Namespace created by Cilium (referred to as \"outer\"). In that\nnamespace, Kata creates an isolated VM with an additional Container Networking\nNamespace (referred to as \"inside\") to host the requested Pod, as depicted below.\n\n.. image:: https://raw.githubusercontent.com/kata-containers/documentation/refs/heads/master/design/arch-images/network.png\n   :alt: Kata Container Networking Architecture\n\n\nUpon the outer Container Networking Namespace creation, the Cilium CNI\nperforms the following two actions:\n\n1. creates the ``eth0`` interface with the same ``device MTU`` of either the detected\n   underlying network, or the MTU specified in the Cilium ConfigMap;\n2. adjusts the ``default route MTU`` (computed as ``device MTU - overhead``) to account\n   for the additional networking overhead given by the Cilium configuration\n   (ex. +50B for VXLAN, +80B for WireGuard, etc.).\n\nHowever, during the inner Container Networking Namespace creation (i.e., the pod\ninside the VM), only the outer ``eth0 device MTU`` (1) is copied over by Kata to\nthe inner ``eth0``, while the ``default route MTU`` (2) is ignored. For this reason,\ndepending on the types of connections, users might experience performance degradation\nor even packet drops between traditional pods and KataPod connections due to\nmultiple (unexpected) fragmentation.\n\nThere are currently two possible workarounds, with (b) being preferred:\n\na. set a lower MTU value in the Cilium ConfigMap to account for the overhead.\n   This would allow the KataPod to have a lower device MTU and prevent unwanted\n   fragmentation. However, this is not recommended as it would have a relevant\n   impact on all the other types of communications (ex. traditional pod-to-pod,\n   pod-to-node, etc.) due to the lower device MTU value being set on all the\n   Cilium-managed interfaces.\n\nb. modify the KataPod deployment by adding an ``initContainer`` (with NET_ADMIN)\n   to adjust the route MTU inside the inner pod. This would not only align the\n   KataPod configuration to all the other pods, but also it would not harm\n   all the other types of connections, given that it is a self-contained\n   solution in the KataPod itself. The correct ``route MTU`` value to set can be\n   either manually computed or retrieved by issuing ``ip route`` on a Cilium Pod\n   (or inside a traditional pod). Here follows an example of a KataPod deployment\n   (``runtimeClassName: kata-clh``) on a cluster with only Cilium VXLAN enabled\n   (``route MTU = 1500B - 50B = 1450``):\n\n   .. code-block:: yaml\n\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: nginx-pod\n        labels:\n          app: nginx\n      spec:\n        runtimeClassName: kata-clh\n        containers:\n          - name: nginx\n            image: nginx:latest\n            ports:\n              - containerPort: 80\n        initContainers:\n          - name: set-mtu\n            image: busybox:latest\n            command:\n              - sh\n              - -c\n              - |\n                DEFAULT=\"$(ip route show default)\"\n                ip route replace \"$DEFAULT\" mtu 1450\n            securityContext:\n              capabilities:\n                add:\n                  - NET_ADMIN\n\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/kubernetes/kata.rst",
  "extracted_at": "2025-09-03T01:13:29.236186Z"
}
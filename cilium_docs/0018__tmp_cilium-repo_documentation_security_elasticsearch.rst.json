{
  "url": "file:///tmp/cilium-repo/Documentation/security/elasticsearch.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n**********************\nSecuring Elasticsearch\n**********************\n\nThis document serves as an introduction for using Cilium to enforce Elasticsearch-aware\nsecurity policies.  It is a detailed walk-through of getting a single-node\nCilium environment running on your machine. It is designed to take 15-30\nminutes.\n\n.. include:: gsg_requirements.rst\n\nDeploy the Demo Application\n===========================\n\nFollowing the Cilium tradition, we will use a Star Wars-inspired example. The Empire has a large scale Elasticsearch cluster which is used for storing a variety of data including: \n\n* ``index: troop_logs``: Stormtroopers performance logs collected from every outpost which are used to identify and eliminate weak performers!\n* ``index: spaceship_diagnostics``: Spaceships diagnostics data collected from every spaceship which is used for R&D and improvement of the spaceships.\n\nEvery outpost has an Elasticsearch client service to upload the Stormtroopers logs. And every spaceship has a service to upload diagnostics. Similarly, the Empire headquarters has a service to search and analyze the troop logs and spaceship diagnostics data. Before we look into the security concerns, let's first create this application scenario in minikube.\n\nDeploy the app using command below, which will create\n\n* An ``elasticsearch`` service with the selector label ``component:elasticsearch`` and a pod running Elasticsearch.\n* Three Elasticsearch clients one each for ``empire-hq``, ``outpost`` and ``spaceship``. \n\n.. parsed-literal::\n\n    $ kubectl create -f \\ |SCM_WEB|\\/examples/kubernetes-es/es-sw-app.yaml\n    serviceaccount \"elasticsearch\" created\n    service \"elasticsearch\" created\n    replicationcontroller \"es\" created\n    role \"elasticsearch\" created\n    rolebinding \"elasticsearch\" created\n    pod \"outpost\" created\n    pod \"empire-hq\" created\n    pod \"spaceship\" created\n\n.. code-block:: shell-session\n\n    $ kubectl get svc,pods\n    NAME                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                           AGE\n    svc/elasticsearch   NodePort    10.111.238.254   <none>        9200:30130/TCP,9300:31721/TCP     2d\n    svc/etcd-cilium     NodePort    10.98.67.60      <none>        32379:31079/TCP,32380:31080/TCP   9d\n    svc/kubernetes      ClusterIP   10.96.0.1        <none>        443/TCP                           9d\n\n    NAME               READY     STATUS    RESTARTS   AGE\n    po/empire-hq       1/1       Running   0          2d\n    po/es-g9qk2        1/1       Running   0          2d\n    po/etcd-cilium-0   1/1       Running   0          9d\n    po/outpost         1/1       Running   0          2d\n    po/spaceship       1/1       Running   0          2d\n\n\nSecurity Risks for Elasticsearch Access\n=======================================\n\nFor Elasticsearch clusters the **least privilege security** challenge is to give clients access only to particular indices, and to limit the operations each client is allowed to perform on each index. In this example, the ``outpost`` Elasticsearch clients only need access to upload troop logs; and the ``empire-hq`` client only needs search access to both the indices.  From the security perspective, the outposts are weak spots and susceptible to be captured by the rebels. Once compromised, the clients can be used to search and manipulate the critical data in Elasticsearch. We can simulate this attack, but first let's run the commands for legitimate behavior for all the client services. \n\n``outpost`` client uploading troop logs \n\n.. code-block:: shell-session\n\n    $ kubectl exec outpost -- python upload_logs.py \n    Uploading Stormtroopers Performance Logs\n    created :  {'_index': 'troop_logs', '_type': 'log', '_id': '1', '_version': 1, 'result': 'created', '_shards': {'total': 2, 'successful': 1, 'failed': 0}, 'created': True}\n\n``spaceship`` uploading diagnostics\n\n.. code-block:: shell-session\n\n    $ kubectl exec spaceship -- python upload_diagnostics.py \n    Uploading Spaceship Diagnostics\n    created :  {'_index': 'spaceship_diagnostics', '_type': 'stats', '_id': '1', '_version': 1, 'result': 'created', '_shards': {'total': 2, 'successful': 1, 'failed': 0}, 'created': True}\n\n``empire-hq`` running search queries for logs and diagnostics\n\n.. code-block:: shell-session\n\n    $ kubectl exec empire-hq -- python search.py \n    Searching for Spaceship Diagnostics\n    Got 1 Hits:\n    {'_index': 'spaceship_diagnostics', '_type': 'stats', '_id': '1', '_score': 1.0, \\\n     '_source': {'spaceshipid': '3459B78XNZTF', 'type': 'tiefighter', 'title': 'Engine Diagnostics', \\\n                 'stats': '[CRITICAL] [ENGINE BURN @SPEED 5000 km/s] [CHANCE 80%]'}}\n    Searching for Stormtroopers Performance Logs\n    Got 1 Hits:\n    {'_index': 'troop_logs', '_type': 'log', '_id': '1', '_score': 1.0, \\\n     '_source': {'outpost': 'Endor', 'datetime': '33 ABY 4AM DST', 'title': 'Endor Corps 1: Morning Drill', \\\n                 'notes': '5100 PRESENT; 15 ABSENT; 130 CODE-RED BELOW PAR PERFORMANCE'}}\n\n\nNow imagine an outpost captured by the rebels. In the commands below, the rebels first search all the indices and then manipulate the diagnostics data from a compromised outpost. \n\n.. code-block:: shell-session\n\n    $ kubectl exec outpost -- python search.py \n    Searching for Spaceship Diagnostics\n    Got 1 Hits:\n    {'_index': 'spaceship_diagnostics', '_type': 'stats', '_id': '1', '_score': 1.0, \\\n     '_source': {'spaceshipid': '3459B78XNZTF', 'type': 'tiefighter', 'title': 'Engine Diagnostics', \\\n                 'stats': '[CRITICAL] [ENGINE BURN @SPEED 5000 km/s] [CHANCE 80%]'}}\n    Searching for Stormtroopers Performance Logs\n    Got 1 Hits:\n    {'_index': 'troop_logs', '_type': 'log', '_id': '1', '_score': 1.0, \\\n     '_source': {'outpost': 'Endor', 'datetime': '33 ABY 4AM DST', 'title': 'Endor Corps 1: Morning Drill', \\\n                 'notes': '5100 PRESENT; 15 ABSENT; 130 CODE-RED BELOW PAR PERFORMANCE'}}\n\nRebels manipulate spaceship diagnostics data so that the spaceship defects are not known to the empire-hq! (Hint: Rebels have changed the ``stats`` for the tiefighter spaceship, a change hard to detect but with adverse impact!)\n\n\n.. code-block:: shell-session\n\n    $ kubectl exec outpost -- python update.py \n    Uploading Spaceship Diagnostics\n    {'_index': 'spaceship_diagnostics', '_type': 'stats', '_id': '1', '_score': 1.0, \\\n     '_source': {'spaceshipid': '3459B78XNZTF', 'type': 'tiefighter', 'title': 'Engine Diagnostics', \\\n                 'stats': '[OK] [ENGINE OK @SPEED 5000 km/s]'}}\n\n\nSecuring Elasticsearch Using Cilium\n====================================\n\n\n.. image:: images/cilium_es_gsg_topology.png\n   :scale: 40 %\n\nFollowing the least privilege security principle, we want to the allow the following legitimate actions and nothing more:\n\n* ``outpost`` service only has upload access to ``index: troop_logs``\n* ``spaceship`` service only has upload access to ``index: spaceship_diagnostics``\n* ``empire-hq`` service only has search access for both the indices \n\nFortunately, the Empire DevOps team is using Cilium for their Kubernetes cluster. Cilium provides L7 visibility and security policies to control Elasticsearch API access. Cilium follows the **white-list, least privilege model** for security. That is to say, a *CiliumNetworkPolicy* contains a list of rules that define **allowed requests** and any request that does not match the rules is denied. \n\nIn this example, the policy rules are defined for inbound traffic (i.e., \"ingress\") connections to the *elasticsearch* service. Note that endpoints selected as backend pods for the service are defined by the *selector* labels. *Selector* labels use the same concept as Kubernetes to define a service. In this example, label ``component: elasticsearch`` defines the pods that are part of the *elasticsearch* service in Kubernetes.\n\nIn the policy file below, you will see the following rules for controlling the indices access and actions performed:\n\n* ``fromEndpoints`` with labels ``app:spaceship`` only ``HTTP`` ``PUT`` is allowed on paths matching regex ``^/spaceship_diagnostics/stats/.*$``\n* ``fromEndpoints`` with labels ``app:outpost`` only ``HTTP`` ``PUT`` is allowed on paths matching regex ``^/troop_logs/log/.*$``\n* ``fromEndpoints`` with labels ``app:empire`` only ``HTTP`` ``GET`` is allowed on paths matching regex ``^/spaceship_diagnostics/_search/??.*$`` and ``^/troop_logs/search/??.*$``\n\n.. literalinclude:: ../../examples/kubernetes-es/es-sw-policy.yaml\n     :language: yaml\n\nApply this Elasticsearch-aware network security policy using ``kubectl``:\n\n.. parsed-literal::\n\n    $ kubectl create -f \\ |SCM_WEB|\\/examples/kubernetes-es/es-sw-policy.yaml\n    ciliumnetworkpolicy \"secure-empire-elasticsearch\" created\n\nLet's test the security policies. Firstly, the search access is blocked for both outpost and spaceship. So from a compromised outpost, rebels will not be able to search and obtain knowledge about troops and spaceship diagnostics. Secondly, the outpost clients don't have access to create or update the ``index: spaceship_diagnostics``. \n\n.. code-block:: shell-session\n\n    $ kubectl exec outpost -- python search.py \n    GET http://elasticsearch:9200/spaceship_diagnostics/_search [status:403 request:0.008s]\n    ...\n    ...\n    elasticsearch.exceptions.AuthorizationException: TransportError(403, 'Access denied\\r\\n')\n    command terminated with exit code 1\n\n.. code-block:: shell-session\n\n    $ kubectl exec outpost -- python update.py \n    PUT http://elasticsearch:9200/spaceship_diagnostics/stats/1 [status:403 request:0.006s]\n    ...\n    ...\n    elasticsearch.exceptions.AuthorizationException: TransportError(403, 'Access denied\\r\\n')\n    command terminated with exit code 1\n\nWe can re-run any of the below commands to show that the security policy still allows all legitimate requests (i.e., no 403 errors are returned).\n\n.. code-block:: shell-session\n\n    $ kubectl exec outpost -- python upload_logs.py \n    ...\n    $ kubectl exec spaceship -- python upload_diagnostics.py \n    ...\n    $ kubectl exec empire-hq -- python search.py \n    ...\n\n\nClean Up\n========\n\nYou have now installed Cilium, deployed a demo app, and finally deployed & tested Elasticsearch-aware network security policies. To clean up, run:\n\n.. parsed-literal::\n\n   $ kubectl delete -f \\ |SCM_WEB|\\/examples/kubernetes-es/es-sw-app.yaml\n   $ kubectl delete cnp secure-empire-elasticsearch\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/security/elasticsearch.rst",
  "extracted_at": "2025-09-03T00:53:44.693338Z"
}
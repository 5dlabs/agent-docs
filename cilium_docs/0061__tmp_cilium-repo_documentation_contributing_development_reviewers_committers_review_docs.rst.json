{
  "url": "file:///tmp/cilium-repo/Documentation/contributing/development/reviewers_committers/review_docs.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _review_docs:\n\n************************************\nReviewing for @cilium/docs-structure\n************************************\n\nWhat is @cilium/docs-structure?\n===============================\n\nTeam `@cilium/docs-structure <docs-structure_team_>`_ is a GitHub team of\nCilium contributors who are responsible for maintaining the good state of the\nproject's documentation, by reviewing Pull Requests (PRs) that update the\ndocumentation. Each time a non-draft PR touching files owned by the team opens,\nGitHub automatically assigns one member of the team for review.\n\nOpen Cilium Pull Requests awaiting for reviews from @cilium/docs-structure are\n`listed here <docs-structure_to_review_>`_.\n\nTo join the team, you must be a Cilium Reviewer. See `Cilium's Contributor\nLadder`_ for details on the requirements and the\napplication process.\n\n.. _docs-structure_team: https://github.com/orgs/cilium/teams/docs-structure\n.. _docs-structure_to_review: https://github.com/cilium/cilium/pulls?q=is%3Apr+is%3Aopen+draft%3Afalse+team-review-requested%3Acilium%2Fdocs-structure\n.. _Cilium's Contributor Ladder: https://github.com/cilium/community/blob/main/CONTRIBUTOR-LADDER.md\n\nReviewing Pull Requests\n=======================\n\nThis section describes some of the process and expectations for reviewing PRs\non behalf of cilium/docs-structure. Note that :ref:`the generic PR review\nprocess for Committers <review_process>` applies, even though it is not\nspecific to documentation.\n\nTechnical contents\n------------------\n\nYou are not expected to review the technical aspects of the documentation\nchanges in a PR. However, if you do have knowledge of the topic and if you find\nsome elements that are incorrect or missing, do flag them.\n\nDocumentation structure\n-----------------------\n\nOne essential part of a review is to ensure that the contribution maintains a\ncoherent structure for the documentation. Ask yourself if the changes are\nlocated on the right page, at the right place. This is especially important if\npages are added, removed, or shuffled around. If the addition is large,\nconsider whether the page needs to split. Consider also whether new text comes\nwith a satisfactory structure. For example, does it fit well with the\nsurrounding context, or did the author simply use a \"note\" box instead of\ntrying to integrate the new information to the relevant paragraph?\n\nSee also :ref:`the recommendations on documentation structure for contributors\n<docs_structure_recommendations>`.\n\nSpecific items to look out for\n------------------------------\n\nBackport labels\n~~~~~~~~~~~~~~~\n\nSee :ref:`the backport criteria for documentation changes\n<backport_criteria_docs>`. Mark the PR for backports by setting the labels for\nall supported branches to which the changes apply, that is to say, all\nsupported branches containing the parent features to which the modified\nsections relate.\n\nCODEOWNERS updates\n~~~~~~~~~~~~~~~~~~\n\nAll documentation sources are assigned to cilium/docs-structure for review by\ndefault. However, when a contributor creates a new page, consider whether it\nshould be covered by another team as well so that this other team can review\nthe technical aspects. If this is the case, ask the author to update the\nCODEOWNERS file.\n\nBeta disclaimer\n~~~~~~~~~~~~~~~\n\nWhen a feature is advertised as Beta in the PR, make sure that the author\nclearly indicates the Beta status in the documentation, both by mentioning\n\"(Beta)\" in the heading of the section for the feature and by including the\ndedicated banner, as follows:\n\n.. code-block:: rst\n\n   .. include:: /Documentation/beta.rst\n\nUpgrade notes\n~~~~~~~~~~~~~\n\nWhen the PR introduces new user-facing options, metrics, or behavior that\naffects upgrades or downgrades, ensure that the author summarizes the changes\nwith a note in ``Documentation/operations/upgrade.rst``.\n\nCompleteness\n~~~~~~~~~~~~\n\nMake sure that new or updated content is complete, with no TODOs.\n\nAuto-generated reference documents\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen certain parts of the Cilium repository change, contributors may have to\nupdate some auto-generated reference documents that are part of Cilium's\ndocumentation, such as the command reference or the Helm reference. The CI\nvalidates that these updates are present in the PR. If they are missing, you\nmay have to help contributors figure out what commands they need to run to\nperform the updates. These commands are usually provided in the logs of the\nGitHub workflows that failed to pass.\n\nSpell checker exceptions\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe Documentation checks include running a spell checker. This spell checker\nuses a file, ``Documentation/spelling_wordlist.txt``, containing a list of\nspelling exceptions to ignore. Team cilium/docs-structure is the owner for this\nfile. Usually, there is not much feedback to provide on updates to the list of\nexceptions. However, it's useful for reviewers to know that:\n\n  - Entries are sorted alphabetically, with all words starting with uppercase\n    letters coming before words starting with lowercase letters.\n  - Entries in the list of exceptions must be spelled correctly.\n  - Lowercase entries are case-insensitive for the spell checker, so reviewers\n    should reject new entries with capital letters if the lowercase versions\n    are already in the list.\n\nNetlify preview\n~~~~~~~~~~~~~~~\n\n`Netlify`_ builds a new preview for each PR touching the documentation. You are\nnot expected to check the preview for each PR. However, if the PR contains\ndetailed formatting changes, such as nested blocks or directives, or changes to\ntables or tabs, then it's good to validate that changes render as expected.\nAlso check the preview if you have a doubt as to the validity of the\nreStructuredText (RST) mark-up that the author uses.\n\nThe list of checks on the PR page contains a link to the Netlify preview. If\nthe preview build failed, the link leads to the build logs.\n\n.. _Netlify: https://www.netlify.com/?attr=homepage-modal\n\nFormatting\n----------\n\nRead :ref:`Cilium's documentation style guide <docs_style_guide>`.\n\nFlag poor formatting or obvious mistakes. The syntax for RST is not always\ntrivial and some contributors make mistakes, or they simply forget to use RST\nand they employ Markdown mark-up instead. Make sure authors fix such issues.\n\nKeep an eye on :ref:`code-blocks <docs_style_code_blocks>`: do they include RST\nsubstitutions, and if so, do they use the right directive? If not, do they use\nthe right language?\n\nBeyond that, the amount of time you spend on suggestions for improving\nformatting is up to you.\n\nGrammar and style\n-----------------\n\nRead :ref:`Cilium's documentation style guide <docs_style_guide>`.\n\nFlag obvious grammar mistakes. Try to read the updated text as a user would.\nAsk the contributors to revise any sentence that is too difficult to read or to\nunderstand.\n\n@cilium/docs-structure aims to keep the documentation clean, consistent, and in\na clear and comprehensible state. User experience must always be as good as\npossible. To achieve this objective, Documentation updates must follow best\npractices, such as the ones from the style guide. Reviewing PRs at sufficient\ndepth to flag all potential style improvements can be time consuming, so the\namount of effort that you put into style guidance is up to you.\n\nThere is no tooling in place to enforce particular style recommendations.\n\nDocumentation build\n===================\n\nThe build framework\n-------------------\n\nHere are the main resources involved or related to Cilium's documentation build\nframework:\n\n  - :ref:`Instructions for building the documentation locally\n    <testing-documentation>`\n  - ``Documentation/Makefile``, ``Documentation/Dockerfile``,\n    ``Documentation/check-build.sh``\n  - Dependencies are in ``Documentation/requirements.txt``, which is generated\n    from ``Documentation/requirements_min/requirements.txt``\n  - The Sphinx theme we use is `our own fork <cilium_rtd_theme_>`_ of Read the\n    Docs's theme\n\n.. _cilium_rtd_theme: https://github.com/cilium/sphinx_rtd_theme\n\nRelevant CI workflows\n---------------------\n\nNetlify preview\n~~~~~~~~~~~~~~~\n\nDocumentation changes trigger the build of a new Netlify preview. If the build\nfails, the PR authors or reviewers must investigate it. Ideally the author\nshould take care of this investigation, but in practice, contributors are not\nalways familiar with RST or with our build framework, so consider giving a\nhand.\n\nDocumentation build\n~~~~~~~~~~~~~~~~~~~\n\nSame as the Netlify preview, the Documentation workflow runs on doc changes and\ncan raise missing updates on various generated pieces of documentation.\n\nCheckpatch\n~~~~~~~~~~\n\nThe Checkpatch workflow is part of the BPF tests and is not directly relevant\nto documentation, but may raise some patch formatting issues, for example when\nthe commit title is too long. So it should run on doc-only PRs, like for any\nother PR.\n\nIntegration tests\n~~~~~~~~~~~~~~~~~\n\nIntegration tests, be it on Travis or on GitHub Actions, are the only workflows\nthat rebuild the ``docs-builder`` image. Building this image is necessary to\nvalidate changes to the ``Documentation/Dockerfile`` or to the list of Python\ndependencies located in ``Documentation/requirements.txt``. The GitHub workflow\nuses a pre-built image instead, and won't incorporate changes to these files.\n\nIntegration tests also run a full build in the Cilium repository, including the\npost-build checks, in particular ``Documentation/Makefile``'s ``check`` target.\nTherefore, integration tests are able to raise inconsistencies in\nauto-generated files in the documentation.\n\nReady to merge\n--------------\n\nFor PRs that only update documentation contents, the CI framework skips tests\nthat are not relevant to the changes. Therefore, authors or reviewers should\ntrigger the CI suite by commenting with ``/test``, just like for any other PR.\nOnce all code owners for the PR have approved, and all tests have passed, the\nPR should automatically receive the ``ready-to-merge`` label.\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/contributing/development/reviewers_committers/review_docs.rst",
  "extracted_at": "2025-09-03T00:53:44.754160Z"
}
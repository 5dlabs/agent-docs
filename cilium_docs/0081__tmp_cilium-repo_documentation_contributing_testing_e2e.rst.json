{
  "url": "file:///tmp/cilium-repo/Documentation/contributing/testing/e2e.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n .. _testsuite: \n End-To-End Connectivity Testing \n Introduction \n \nCilium uses `cilium-cli connectivity tests\n<https://github.com/cilium/cilium-cli/#connectivity-check>`_\nfor implementing and running end-to-end tests which test Cilium all the way\nfrom the API level (for example, importing policies, CLI) to the datapath (in order words, whether\npolicy that is imported is enforced accordingly in the datapath).\n\nRunning End-To-End Connectivity Tests\n \n The connectivity tests are implemented in such a way that they can be run against\nany K8s cluster running Cilium. The built-in feature detection allows the testing\nframework to automatically skip tests when a required test condition cannot be met\n(for example, skip the Egress Gateway tests if the Egress Gateway feature is disabled). \n Running tests locally\n^^^^^^^^^^^^^^^^^^^^^ \n .. include:: /installation/cli-download.rst \n Alternatively,  Cilium CLI  can be manually built and installed by fetching\n https://github.com/cilium/cilium-cli , and then running  make install . \n Next, you need a Kubernetes cluster to run Cilium. The easiest way to create one\nis to use  kind <https://github.com/kubernetes-sigs/kind> _. Cilium provides\na wrapper script which simplifies creating K8s cluster with  kind . For example,\nto create a cluster consisting of 1 control-plane node, 3 worker nodes, without\nkube-proxy, and with  DualStack  enabled: \n .. code-block:: shell-session \n $ cd cilium/\n$ ./contrib/scripts/kind.sh \"\" 3 \"\" \"\" \"none\" \"dual\"\n...\nKind is up! Time to install cilium:\nmake kind-image\nmake kind-install-cilium\n \n Afterwards, you need to install Cilium. The preferred way is to use\n cilium-cli install <https://github.com/cilium/cilium-cli/#install-cilium> _,\nas it is able to automate some steps (e.g., detecting  kube-apiserver  endpoint\naddress which otherwise needs to be specified when running w/o  kube-proxy , or\nset an annotation to a K8s worker node to prevent Cilium from being scheduled on it). \n Assuming that Cilium was built with: \n .. code-block:: shell-session \n $ cd cilium/\n$ make kind-image\n...\n^^^ Images pushed, multi-arch manifest should be above. ^^^\n \n You can install Cilium with the following command: \n .. code-block:: shell-session \n $ cilium install --wait \\\n    --chart-directory=$GOPATH/src/github.com/cilium/cilium/install/kubernetes/cilium \\\n    --set image.override=localhost:5000/cilium/cilium-dev:local \\\n    --set image.pullPolicy=Never \\\n    --set operator.image.override=localhost:5000/cilium/operator-generic:local \\\n    --set operator.image.pullPolicy=Never \\\n    --set routingMode=tunnel \\\n    --set tunnelProtocol=vxlan \\\n    --nodes-without-cilium\n...\n⌛ Waiting for Cilium to be installed and ready...\n✅ Cilium was successfully installed! Run 'cilium status' to view installation health\n \n Finally, to run tests: \n .. code-block:: shell-session \n $ cilium connectivity test\n...\n✅ All 32 tests (263 actions) successful, 2 tests skipped, 1 scenarios skipped.\n \n Alternatively, you can select which tests to run: \n .. code-block:: shell-session \n $ cilium connectivity test --test north-south-loadbalancing\n...\n[=] Test [north-south-loadbalancing]\n \n Or, you can exclude specific test cases to run: \n .. code-block:: shell-session \n $ cilium connectivity test --test '!pod-to-world'\n...\n \n Running tests in VM\n^^^^^^^^^^^^^^^^^^^ \n To run Cilium and the connectivity tests in a virtual machine, one can use\n little-vm-helper (LVH) <https://github.com/cilium/little-vm-helper> _. The\nproject provides a runner of qemu-based VMs, a builder of VM images,\nand a registry containing pre-built VM images. \n First, install the LVH cli tool: \n .. code-block:: shell-session \n  $ go install github.com/cilium/little-vm-helper/cmd/lvh@latest\n $ lvh --help\n ...\n Use \"lvh [command] --help\" for more information about a command.\n \n Second, fetch a VM image: \n .. code-block:: shell-session \n $ lvh images pull quay.io/lvh-images/kind:6.1-main --dir .\n \n See  <https://quay.io/repository/lvh-images/kind?tab=tags> _ for all available\nimages. To build a new VM image (or to update any existing) please refer to\n little-vm-helper-images <https://github.com/cilium/little-vm-helper-images> _. \n Next, start a VM: \n .. code-block:: shell-session \n $ lvh run --image ./images/kind_6.1.qcow2 --host-mount $GOPATH/src/github.com/cilium/ --daemonize -p 2222:22 --cpu=3 --mem=6G\n \n .. _test_cilium_on_lvh: \n Finally, you can SSH into the VM to start a K8s cluster, install Cilium, and finally run the connectivity tests: \n .. code-block:: shell-session \n $ ssh -p 2222 -o \"StrictHostKeyChecking=no\" root@localhost\n# cd /host/cilium\n# git config --global --add safe.directory /host/cilium\n# ./contrib/scripts/kind.sh \"\" 3 \"\" \"\" \"none\" \"dual\"\n# cd /host/cilium-cli\n# ./cilium install --wait \\\n    --chart-directory=../cilium/install/kubernetes/cilium \\\n    --version=v1.13.2 \\\n    --set routingMode=tunnel \\\n    --set tunnelProtocol=vxlan \\\n    --nodes-without-cilium\n# ./cilium connectivity test\n...\n✅ All 32 tests (263 actions) successful, 2 tests skipped, 1 scenarios skipped.\n \n To stop the VM, run from the host: \n .. code-block:: shell-session \n $ pkill qemu-system-x86\n \n Running tests in a VM with a custom kernel\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \n It is possible to test Cilium on an LVH VM with a custom built Linux kernel (for example,\nfor fast testing iterations when doing kernel development work for Cilium features). \n First, to configure and to build the kernel: \n .. code-block:: shell-session \n $ git clone --depth=1 https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next.git\n$ cd bpf-next/ \n configure kernel, so that it can be run in LVH VM: \n $ git clone https://github.com/cilium/little-vm-helper-images\n$ cat ../little-vm-helper-images/_data/kernels.json |  \njq -r '.common_opts.[] | (.[0])+\" \"+(.[1])' |  \nxargs ./scripts/config \n $ make -j$(nproc) \n Second, start the LVH VM with the custom kernel: \n .. code-block:: shell-session \n $ lvh run --image ./images/kind_bpf-next.qcow2  \n--host-mount $(pwd)  \n--kernel ./bpf-next/arch/x86_64/boot/bzImage  \n--daemonize -p 2222:22 --cpu=3 --mem=6G \\ \n Third, SSH into the VM, and install the custom kernel modules (this step is no longer\nrequired once  little-vm-helper#117 <https://github.com/cilium/little-vm-helper/issues/117> _\nhas been resolved): \n .. code-block:: shell-session \n $ ssh -p 2222 -o \"StrictHostKeyChecking=no\" root@localhost\n# cd /host/bpf-next\n# make modules_install\n \n Finally, you can use the instructions from :ref: the previous chapter<test_cilium_on_lvh>  to run and to test Cilium. \n Network performance test\n^^^^^^^^^^^^^^^^^^^^^^^^ \n Cilium also provides  cilium-cli connectivity perf <https://github.com/cilium/cilium-cli/blob/756ae5072a7281e2b6b33b10da3ab890cb2fa240/README.md#network-performance-test> __ to test the network performance of pod-to-pod communication in the same node and different nodes. \n To run performance test: \n .. code-block:: shell-session \n $ cilium connectivity perf\n...\n[=] Test [network-perf] [1/1]\n...\n \n If you want to test the network performance between specific nodes, you can label the nodes to run test: \n .. code-block:: shell-session \n $ kubectl label nodes worker1 perf-test=server\nnode/worker1 labeled\n$ kubectl label nodes worker2 perf-test=client\nnode/worker2 labeled\n$ cilium connectivity perf --node-selector-client perf-test=client --node-selector-server perf-test=server\n...\n[=] Test [network-perf] [1/1]\n...\n \n Cleaning up tests\n^^^^^^^^^^^^^^^^^ \n If the connectivity tests are interrupted or timeout, that will leave the test pods deployed.\nTo clean this up, simply delete the connectivity tests namespace: \n .. code-block:: shell-session \n $ kubectl delete ns cilium-test\n \n If you specified the test namespace with  --test-namespace , make sure to replace  cilium-test  (default).",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/contributing/testing/e2e.rst",
  "extracted_at": "2025-09-03T00:53:44.789332Z"
}
{
  "url": "file:///tmp/cilium-repo/Documentation/security/dns.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _gs_dns:\n\n****************************************************\nLocking Down External Access with DNS-Based Policies\n****************************************************\n\nThis document serves as an introduction for using Cilium to enforce DNS-based\nsecurity policies for Kubernetes pods.\n\n.. include:: gsg_requirements.rst\n\nDeploy the Demo Application\n===========================\n\nDNS-based policies are very useful for controlling access to services running outside the Kubernetes cluster. DNS acts as a persistent service identifier for both external services provided by AWS, Google, Twilio, Stripe, etc., and internal services such as database clusters running in private subnets outside Kubernetes. CIDR or IP-based policies are cumbersome and hard to maintain as the IPs associated with external services can change frequently. The Cilium DNS-based policies provide an easy mechanism to specify access control while Cilium manages the harder aspects of tracking DNS to IP mapping.\n\nIn this guide we will learn about:\n\n- Controlling egress access to services outside the cluster using DNS-based policies\n- Using patterns (or wildcards) to whitelist a subset of DNS domains\n- Combining DNS, port and L7 rules for restricting access to external service\n\nIn line with our Star Wars theme examples, we will use a simple scenario where\nthe Empire's ``mediabot`` pods need access to GitHub for managing the Empire's\ngit repositories. The pods shouldn't have access to any other external service.\n\n.. parsed-literal::\n\n   $ kubectl create -f \\ |SCM_WEB|\\/examples/kubernetes-dns/dns-sw-app.yaml\n   $ kubectl wait pod/mediabot --for=condition=Ready\n   $ kubectl get pods\n   NAME                             READY   STATUS    RESTARTS   AGE\n   pod/mediabot                     1/1     Running   0          14s\n\n\nApply DNS Egress Policy\n=======================\n\nThe following Cilium network policy allows ``mediabot`` pods to only access ``api.github.com``.\n\n.. tabs::\n\n   .. group-tab:: Generic\n\n      .. literalinclude:: ../../examples/kubernetes-dns/dns-matchname.yaml\n          :language: yaml\n\n   .. group-tab:: OpenShift\n\n      .. literalinclude:: ../../examples/kubernetes-dns/dns-matchname-openshift.yaml\n          :language: yaml\n\n.. note::\n\n   OpenShift users will need to modify the policies to match the namespace\n   ``openshift-dns`` (instead of ``kube-system``), remove the match on the\n   ``k8s:k8s-app=kube-dns`` label, and change the port to 5353.\n\nLet's take a closer look at the policy:\n\n* The first egress section uses ``toFQDNs: matchName`` specification to allow\n  egress to ``api.github.com``. The destination DNS should match exactly the\n  name specified in the rule. The ``endpointSelector`` allows only pods with\n  labels ``class: mediabot, org:empire`` to have the egress access.\n* The second egress section (``toEndpoints``) allows ``mediabot`` pods to access\n  ``kube-dns`` service. Note that ``rules: dns`` instructs Cilium to inspect and\n  allow DNS lookups matching specified patterns. In this case, inspect and allow\n  all DNS queries.\n\nNote that with this policy the ``mediabot`` doesn't have access to any internal\ncluster service other than ``kube-dns``. Refer to :ref:`Network Policy` to learn\nmore about policies for controlling access to internal cluster services.\n\nLet's apply the policy:\n\n.. parsed-literal::\n\n  kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes-dns/dns-matchname.yaml\n\nTesting the policy, we see that ``mediabot`` has access to ``api.github.com``\nbut doesn't have access to any other external service, e.g.,\n``support.github.com``.\n\n.. code-block:: shell-session\n\n   $ kubectl exec mediabot -- curl -I -s https://api.github.com | head -1\n   HTTP/2 200\n\n   $ kubectl exec mediabot -- curl -I -s --max-time 5 https://support.github.com | head -1\n   curl: (28) Connection timed out after 5000 milliseconds\n   command terminated with exit code 28\n\nDNS Policies Using Patterns\n===========================\n\nThe above policy controlled DNS access based on exact match of the DNS domain\nname. Often, it is required to allow access to a subset of domains. Let's say,\nin the above example, ``mediabot`` pods need access to any GitHub sub-domain,\ne.g., the pattern ``*.github.com``. We can achieve this easily by changing the\n``toFQDN`` rule to use ``matchPattern`` instead of ``matchName``.\n\n.. literalinclude:: ../../examples/kubernetes-dns/dns-pattern.yaml\n    :language: yaml\n\n.. parsed-literal::\n\n   kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes-dns/dns-pattern.yaml\n\nTest that ``mediabot`` has access to multiple GitHub services for which the DNS\nmatches the pattern ``*.github.com``. It is important to note and test that this\ndoesn't allow access to ``github.com`` because the ``*.`` in the pattern\nrequires one subdomain to be present in the DNS name. You can simply add more\n``matchName`` and ``matchPattern`` clauses to extend the access. (See :ref:`DNS based`\npolicies to learn more about specifying DNS rules using patterns and names.)\n\n.. code-block:: shell-session\n\n   $ kubectl exec mediabot -- curl -I -s https://support.github.com | head -1\n   HTTP/1.1 200 OK\n\n   $ kubectl exec mediabot -- curl -I -s https://gist.github.com | head -1\n   HTTP/1.1 302 Found\n\n   $ kubectl exec mediabot -- curl -I -s --max-time 5 https://github.com | head -1\n   curl: (28) Connection timed out after 5000 milliseconds\n   command terminated with exit code 28\n\nCombining DNS, Port and L7 Rules\n================================\n\nThe DNS-based policies can be combined with port (L4) and API (L7) rules to\nfurther restrict the access. In our example, we will restrict ``mediabot`` pods\nto access GitHub services only on ports ``443``. The ``toPorts`` section in the\npolicy below achieves the port-based restrictions along with the DNS-based\npolicies.\n\n.. literalinclude:: ../../examples/kubernetes-dns/dns-port.yaml\n    :language: yaml\n\n.. parsed-literal::\n\n  kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes-dns/dns-port.yaml\n\nTesting, the access to ``https://support.github.com`` on port ``443`` will\nsucceed but the access to ``http://support.github.com`` on port ``80`` will be\ndenied.\n\n.. code-block:: shell-session\n\n   $ kubectl exec mediabot -- curl -I -s https://support.github.com | head -1\n   HTTP/1.1 200 OK\n\n   $ kubectl exec mediabot -- curl -I -s --max-time 5 http://support.github.com | head -1\n   curl: (28) Connection timed out after 5001 milliseconds\n   command terminated with exit code 28\n\nRefer to :ref:`l4_policy` and :ref:`l7_policy` to learn more about Cilium L4 and\nL7 network policies.\n\nClean-up\n========\n\n.. parsed-literal::\n\n   kubectl delete -f \\ |SCM_WEB|\\/examples/kubernetes-dns/dns-sw-app.yaml\n   kubectl delete cnp fqdn\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/security/dns.rst",
  "extracted_at": "2025-09-03T00:53:44.691978Z"
}
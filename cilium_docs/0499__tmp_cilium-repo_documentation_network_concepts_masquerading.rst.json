{
  "url": "file:///tmp/cilium-repo/Documentation/network/concepts/masquerading.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n .. _concepts_masquerading: \n Masquerading \n IPv4 addresses used for pods are typically allocated from RFC1918 private\naddress blocks and thus, not publicly routable. Cilium will automatically\nmasquerade the source IP address of all traffic that is leaving the cluster to\nthe IPv4 address of the node as the node's IP address is already routable on\nthe network. \n .. image:: masquerade.png\n:align: center \n This behavior can be disabled with the option  enable-ipv4-masquerade: false \nfor IPv4 and  enable-ipv6-masquerade: false  for IPv6 traffic leaving the host. \n Configuration \n Setting the routable CIDR\nThe default behavior is to exclude any destination within the IP allocation\nCIDR of the local node. If the pod IPs are routable across a wider network,\nthat network can be specified with the option:  ipv4-native-routing-cidr:   10.0.0.0/8  (or  ipv6-native-routing-cidr: fd00::/100  for IPv6 addresses)\nin which case all destinations within that CIDR will  not  be masqueraded. \n In the public cloud environment, if you don't configure\n ipv4-native-routing-cidr , Cilium will automatically detect the VPC CIDR\nrange as the native routing range. Cilium does not masquerade the source\naddress for traffic that is natively routable in the network, because it is\npossible for the endpoints to communicate directly without NAT. As a result,\nif masquerading is enabled, traffic from pods to other non-cluster resources\nwithin the same VPC (e.g., virtual machines) will be routed directly without\nmasquerading the source IP address. \n Setting the masquerading interface\nSee :ref: masq_modes  for configuring the masquerading interfaces. \n Masquerade traffic to Remote Nodes \n \n To masquerade traffic to remote nodes in BPF masquerading mode, use the option\n enable-remote-node-masquerade: \"true\" . This option requires\n enable-bpf-masquerade: \"true\"  and also either  enable-ipv4-masquerade: \"true\"  or  enable-ipv6-masquerade: \"true\"  to SNAT traffic for IPv4 and\nIPv6, respectively. This option only affects traffic from an Endpoint directed\ntowards the address of a remote node, and not traffic between Endpoints on\ndifferent nodes. \n This flag currently masquerades traffic to node  InternalIP  addresses. This\nmay change in future. See :gh-issue: 35823  and :gh-issue: 17177  for further\ndiscussion on this topic. \n This option can limit Cilium's ability to enforce ingress host firewall\npolicies for traffic from Pods towards Nodes. If you use this option, consider\nestablishing default deny policies to prevent Endpoints from communicating with\nNodes, and minimize use of policy statements that allow traffic from remote\nnodes (such as the  remote-node  Entity). If in doubt, disable this option. \n .. _masq_modes: \n Implementation Modes \n eBPF-based \n \n .. note:: \n IPv6  BPF masquerading is a beta feature. Please provide feedback and\nfile a GitHub issue if you experience any problems. IPv4 BPF masquerading is\nproduction-ready. \n The eBPF-based implementation is the most efficient implementation. It can be\nenabled with the  bpf.masquerade=true  helm option. \n By default, BPF masquerading also enables the BPF Host-Routing mode.\nSee :ref: eBPF_Host_Routing  for benefits and limitations of this mode. \n The current implementation depends on :ref: the BPF NodePort feature <kubeproxy-free> .\nThe dependency will be removed in the future (:gh-issue: 13732 ). \n Masquerading can take place only on those devices which run the eBPF\nmasquerading program. This means that a packet sent from a pod to an outside\naddress will be masqueraded (to an output device IPv4 address), if the output\ndevice runs the program. If not specified, the program will be automatically\nattached to the devices selected by :ref: the BPF NodePort device detection mechanism <Nodeport Devices> . To manually change this, use the  devices \nhelm option. Use  cilium status  to determine which devices the program is\nrunning on: \n .. code-block:: shell-session \n $ kubectl -n kube-system exec ds/cilium -- cilium-dbg status | grep Masquerading\nMasquerading:   BPF (ip-masq-agent)   [eth0, eth1]  10.0.0.0/16\n \n From the output above, the program is running on the  eth0  and  eth1  devices. \n The eBPF-based masquerading can masquerade packets of the following L4 protocols: \n \n TCP \n UDP \n ICMP \n \n .. note:: \n For ICMP, support is limited to Echo request, Echo reply, and the\nerror message \"Destination unreachable, fragmentation required,\nand DF flag set\".\n \n By default, all packets from a pod destined to an IP address outside of the\n ipv4-native-routing-cidr  range are masqueraded, except for packets destined\nto other cluster nodes (as with  ipv6-native-routing-cidr  for IPv6). The\npreceding output shows the exclusion CIDR of  cilium status \n( 10.0.0.0/16 ). \n .. note:: \n When eBPF-masquerading is enabled, traffic from pods to the External IP of\ncluster nodes will also not be masqueraded. The eBPF implementation differs\nfrom the iptables-based masquerading on that aspect. This limitation is\ntracked at :gh-issue:`17177`.\n \n To allow more fine-grained control, Cilium implements  ip-masq-agent <https://github.com/kubernetes-sigs/ip-masq-agent> _ in eBPF which can be\nenabled with the  ipMasqAgent.enabled=true  helm option. \n The eBPF-based ip-masq-agent supports the  nonMasqueradeCIDRs ,\n masqLinkLocal , and  masqLinkLocalIPv6  options set in a configuration\nfile. A packet sent from a pod to a destination which belongs to any CIDR from\nthe  nonMasqueradeCIDRs  is not going to be masqueraded. If the configuration\nfile is empty, the agent will provision the following non-masquerade CIDRs: \n \n 10.0.0.0/8 \n 172.16.0.0/12 \n 192.168.0.0/16 \n 100.64.0.0/10 \n 192.0.0.0/24 \n 192.0.2.0/24 \n 192.88.99.0/24 \n 198.18.0.0/15 \n 198.51.100.0/24 \n 203.0.113.0/24 \n 240.0.0.0/4 \n \n In addition, if the  masqLinkLocal  is not set or set to false, then\n 169.254.0.0/16  is appended to the non-masquerade CIDRs list. For IPv6, if\n masqLinkLocalIPv6  is not set or set to false,  fe80::/10  is appended. \n The agent uses Fsnotify to track updates to the configuration file, so the\noriginal  resyncInterval  option is unnecessary. \n The example below shows how to configure the agent via :term: ConfigMap  and to\nverify it: \n .. literalinclude:: ../../../examples/kubernetes-ip-masq-agent/rfc1918.yaml\n:language: yaml \n .. parsed-literal:: \n $ kubectl create -n kube-system -f \\ |SCM_WEB|\\/examples/kubernetes-ip-masq-agent/rfc1918.yaml\n\n$ # Wait ~60s until the ConfigMap is propagated into the configuration file\n\n$ kubectl -n kube-system exec ds/cilium -- cilium-dbg bpf ipmasq list\nIP PREFIX/ADDRESS\n10.0.0.0/8\n172.16.0.0/12\n192.168.0.0/16\n \n Alternatively, you can pass  --set ipMasqAgent.config.nonMasqueradeCIDRs='{10.0.0.0/8,172.16.0.0/12,192.168.0.0/16}' \nand  --set ipMasqAgent.config.masqLinkLocal=false  (or with the corresponding\noption, for IPv6) when installing Cilium via Helm to\nconfigure the  ip-masq-agent  as above. \n iptables-based \n \n This is the legacy implementation that will work on all kernel versions. \n The default behavior will masquerade all traffic leaving on a non-Cilium\nnetwork device. This typically leads to the correct behavior. In order to\nlimit the network interface on which masquerading should be performed, the\noption  egress-masquerade-interfaces: eth0  can be used. \n .. note:: \n It is possible to specify an interface prefix as well, by specifying\n eth+ , all interfaces matching the prefix  eth  will be used for\nmasquerading. \n For the advanced case where the routing layer would select different source\naddresses depending on the destination CIDR, the option\n enable-masquerade-to-route-source: \"true\"  can be used in order to\nmasquerade to the source addresses rather than to the primary interface\naddress. The latter is then only considered as a catch-all fallback, and for\nthe default routes. For these advanced cases the user needs to ensure that\nthere are no overlapping destination CIDRs as routes on the relevant\nmasquerading interfaces. \n With the  enable-masquerade-to-route-source: \"true\"  option, Cilium will, by\ndefault, use interfaces listed in the  devices  field as the egress\nmasquerade interfaces when  egress-masquerade-interfaces  is empty. When\n egress-masquerade-interfaces  is set, it takes precedence over  devices \nto choose which network interface should perform masquerading. You can set\n egress-masquerade-interfaces  to match multiple interfaces like this:\n eth+ ens+ .",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/concepts/masquerading.rst",
  "extracted_at": "2025-09-03T01:13:29.209133Z"
}
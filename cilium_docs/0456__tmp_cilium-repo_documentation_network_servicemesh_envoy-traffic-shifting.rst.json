{
  "url": "file:///tmp/cilium-repo/Documentation/network/servicemesh/envoy-traffic-shifting.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _gs_envoy_traffic_shifting:\n\n*******************\nL7 Traffic Shifting\n*******************\n\nCilium Service Mesh defines a ``CiliumEnvoyConfig`` CRD which allows users\nto set the configuration of the Envoy component built into Cilium agents.\n\nThis example sets up an Envoy listener which load balances requests\nto the helloworld Service by sending 90% of incoming requests to the\nbackend ``helloworld-v1`` and 10% of incoming requests to the backend\n``helloworld-v2``.\n\nDeploy Test Applications\n========================\n\n.. parsed-literal::\n\n    $ kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes/servicemesh/envoy/client-helloworld.yaml\n\nThe test workloads consist of:\n\n- One client Deployment, ``client``\n- Two server Deployments, ``helloworld-v1`` and ``helloworld-v2``\n\nView information about these Pods and the helloworld Service:\n\n.. code-block:: shell-session\n\n    $ kubectl get pods --show-labels -o wide\n    NAME                             READY   STATUS    RESTARTS   AGE     IP           NODE                   NOMINATED NODE   READINESS GATES   LABELS\n    client-64848f85dd-sjfmb          1/1     Running   0          2m23s   10.0.0.206   cilium-control-plane   <none>           <none>            kind=client,name=client,pod-template-hash=64848f85dd\n    helloworld-v1-5845f97d6b-gkdtk   1/1     Running   0          2m23s   10.0.0.241   cilium-control-plane   <none>           <none>            app=helloworld,pod-template-hash=5845f97d6b,version=v1\n    helloworld-v2-7d55d87964-ns9kh   1/1     Running   0          2m23s   10.0.0.251   cilium-control-plane   <none>           <none>            app=helloworld,pod-template-hash=7d55d87964,version=v2\n\n    $ kubectl get svc --show-labels\n    NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE   LABELS\n    helloworld   ClusterIP   10.96.194.77   <none>        5000/TCP   8m27s app=helloworld,service=helloworld\n\nApply weight-based routing\n==========================\n\nMake an environment variable with the Pod name for client:\n\n.. code-block:: shell-session\n\n    $ export CLIENT=$(kubectl get pods -l name=client -o jsonpath='{.items[0].metadata.name}')\n\nTry making several requests to the helloworld Service.\n\n.. code-block:: shell-session\n\n    $ for i in {1..10}; do  kubectl exec -it $CLIENT -- curl  helloworld:5000/hello; done\n\nThe test results are as follows::\n\n    Hello version: v2, instance: helloworld-v2-7d55d87964-ns9kh\n    Hello version: v2, instance: helloworld-v2-7d55d87964-ns9kh\n    Hello version: v2, instance: helloworld-v2-7d55d87964-ns9kh\n    Hello version: v1, instance: helloworld-v1-5845f97d6b-gkdtk\n    Hello version: v1, instance: helloworld-v1-5845f97d6b-gkdtk\n    Hello version: v1, instance: helloworld-v1-5845f97d6b-gkdtk\n    Hello version: v2, instance: helloworld-v2-7d55d87964-ns9kh\n    Hello version: v1, instance: helloworld-v1-5845f97d6b-gkdtk\n    Hello version: v2, instance: helloworld-v2-7d55d87964-ns9kh\n    Hello version: v1, instance: helloworld-v1-5845f97d6b-gkdtk\n\nThe test results were as expected. Of the requests sent to the helloworld service,\n50% of them were sent to the backend ``helloworld-v1`` and 50% of them were sent to\nthe backend ``helloworld-v2``.\n\n``CiliumEnvoyConfig`` can be used to load balance traffic destined to one Service to a\ngroup of backend Services. To load balance traffic to the helloworld Service, first create\nindividual Services for each backend Deployment.\n\n.. parsed-literal::\n    $ kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes/servicemesh/envoy/helloworld-service-v1-v2.yaml\n\nApply the ``envoy-helloworld-v1-90-v2-10.yaml`` file, which defines a ``CiliumEnvoyConfig``\nto send 90% of traffic to the helloworld-v1 Service backend and 10% of traffic to the helloworld-v2 Service backend:\n\n.. parsed-literal::\n    $ kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes/servicemesh/envoy/envoy-helloworld-v1-90-v2-10.yaml\n\nView information about these Pods and Services:\n\n.. code-block:: shell-session\n\n    $ kubectl get pods --show-labels -o wide\n    NAME                             READY   STATUS    RESTARTS   AGE     IP           NODE                   NOMINATED NODE   READINESS GATES   LABELS\n    client-64848f85dd-sjfmb          1/1     Running   0          2m23s   10.0.0.206   cilium-control-plane   <none>           <none>            kind=client,name=client,pod-template-hash=64848f85dd\n    helloworld-v1-5845f97d6b-gkdtk   1/1     Running   0          2m23s   10.0.0.241   cilium-control-plane   <none>           <none>            app=helloworld,pod-template-hash=5845f97d6b,version=v1\n    helloworld-v2-7d55d87964-ns9kh   1/1     Running   0          2m23s   10.0.0.251   cilium-control-plane   <none>           <none>            app=helloworld,pod-template-hash=7d55d87964,version=v2\n\n    $ kubectl get svc --show-labels\n    NAME            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE   LABELS\n    helloworld      ClusterIP   10.96.194.77   <none>        5000/TCP   16m   app=helloworld,service=helloworld\n    helloworld-v1   ClusterIP   10.96.0.240    <none>        5000/TCP   4s    app=helloworld,service=helloworld,version=v1\n    helloworld-v2   ClusterIP   10.96.41.142   <none>        5000/TCP   4s    app=helloworld,service=helloworld,version=v2\n\n.. include:: warning.rst\n\nTry making several requests to the helloworld Service again.\n\n.. code-block:: shell-session\n\n    $ for i in {1..10}; do  kubectl exec -it $CLIENT -- curl  helloworld:5000/hello; done\n\nThe test results are as follows::\n\n    Hello version: v1, instance: helloworld-v1-5845f97d6b-gkdtk\n    Hello version: v1, instance: helloworld-v1-5845f97d6b-gkdtk\n    Hello version: v1, instance: helloworld-v1-5845f97d6b-gkdtk\n    Hello version: v2, instance: helloworld-v2-7d55d87964-ns9kh\n    Hello version: v1, instance: helloworld-v1-5845f97d6b-gkdtk\n    Hello version: v1, instance: helloworld-v1-5845f97d6b-gkdtk\n    Hello version: v1, instance: helloworld-v1-5845f97d6b-gkdtk\n    Hello version: v1, instance: helloworld-v1-5845f97d6b-gkdtk\n    Hello version: v1, instance: helloworld-v1-5845f97d6b-gkdtk\n    Hello version: v1, instance: helloworld-v1-5845f97d6b-gkdtk\n\nThe test results were as expected. Of the requests sent to the helloworld service,\n90% of them were sent to the backend ``helloworld-v1`` and 10% of them were sent to\nthe backend ``helloworld-v2``.\n\nCleaning up\n===========\n\nRemove the rules.\n\n.. parsed-literal::\n\n    $ kubectl delete -f \\ |SCM_WEB|\\/examples/kubernetes/servicemesh/envoy/envoy-helloworld-v1-90-v2-10.yaml\n\nRemove the test application.\n\n.. parsed-literal::\n\n    $ kubectl delete -f \\ |SCM_WEB|\\/examples/kubernetes/servicemesh/envoy/client-helloworld.yaml\n    $ kubectl delete -f \\ |SCM_WEB|\\/examples/kubernetes/servicemesh/envoy/helloworld-service-v1-v2.yaml\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/servicemesh/envoy-traffic-shifting.rst",
  "extracted_at": "2025-09-03T01:13:29.149895Z"
}
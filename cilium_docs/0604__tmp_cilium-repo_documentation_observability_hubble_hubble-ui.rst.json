{
  "url": "file:///tmp/cilium-repo/Documentation/observability/hubble/hubble-ui.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n .. _hubble_gsg:\n.. _hubble_ui: \n \n Service Map & Hubble UI \n \n This tutorial guides you through enabling the Hubble UI to access the graphical\nservice map. \n .. image:: images/hubble_sw_service_map.png \n .. note:: \n This guide assumes that Cilium and Hubble have been correctly installed in your\nKubernetes cluster. Please see :ref: k8s_quick_install  and :ref: hubble_setup \nfor more information. If unsure, run  cilium status  and validate that Cilium\nand Hubble are installed. \n Enable the Hubble UI \n Enable the Hubble UI by running the following command: \n .. tabs:: \n .. group-tab:: Cilium CLI \n\n    If Hubble is already enabled with ``cilium hubble enable``, you must first temporarily disable Hubble with ``cilium hubble disable``.\n    This is because the Hubble UI cannot be added at runtime.\n\n    .. code-block:: shell-session\n\n        cilium hubble enable --ui\n        üîë Found existing CA in secret cilium-ca\n        ‚ú® Patching ConfigMap cilium-config to enable Hubble...\n        ‚ôªÔ∏è Restarted Cilium pods\n        ‚úÖ Relay is already deployed\n        ‚úÖ Hubble UI is already deployed\n\n.. group-tab:: Helm\n\n    .. parsed-literal::\n\n       helm upgrade cilium |CHART_RELEASE| \\\\\n          --namespace $CILIUM_NAMESPACE \\\\\n          --reuse-values \\\\\n          --set hubble.relay.enabled=true \\\\\n          --set hubble.ui.enabled=true\n\n.. group-tab:: Helm (Standalone install)\n\n    Clusters sometimes come with Cilium, Hubble, and Hubble relay already installed.\n    When this is the case you can still use Helm to install only Hubble UI on top of the pre-installed components.\n\n    You will need to set ``hubble.ui.standalone.enabled`` to ``true`` and optionally provide a volume to mount\n    Hubble UI client certificates if TLS is enabled on Hubble Relay server side.\n\n    Below is an example deploying Hubble UI as standalone, with client certificates mounted from a ``my-hubble-ui-client-certs`` secret:\n\n    .. parsed-literal::\n\n        helm upgrade --install --namespace kube-system cilium |CHART_RELEASE| --values - <<EOF\n        agent: false\n        operator:\n          enabled: false\n        cni:\n          install: false\n        hubble:\n          enabled: false\n          relay:\n            # set this to false as Hubble relay is already installed\n            enabled: false\n            tls:\n              server:\n                # set this to true if tls is enabled on Hubble relay server side\n                enabled: true\n          ui:\n            # enable Hubble UI\n            enabled: true\n            standalone:\n              # enable Hubble UI standalone deployment\n              enabled: true\n              # provide a volume containing Hubble relay client certificates to mount in Hubble UI pod\n              tls:\n                certsVolume:\n                  projected:\n                    defaultMode: 0400\n                    sources:\n                      - secret:\n                          name: my-hubble-ui-client-certs\n                          items:\n                            - key: tls.crt\n                              path: client.crt\n                            - key: tls.key\n                              path: client.key\n                            - key: ca.crt\n                              path: hubble-relay-ca.crt\n        EOF\n\n    Please note that Hubble UI expects the certificate files to be available under the following paths:\n\n    .. code-block:: shell-session\n\n        - name: TLS_RELAY_CA_CERT_FILES\n          value: /var/lib/hubble-ui/certs/hubble-relay-ca.crt\n        - name: TLS_RELAY_CLIENT_CERT_FILE\n          value: /var/lib/hubble-ui/certs/client.crt\n        - name: TLS_RELAY_CLIENT_KEY_FILE\n          value: /var/lib/hubble-ui/certs/client.key\n\n    Keep this in mind when providing the volume containing the certificate.\n \n Open the Hubble UI \n Open the Hubble UI in your browser by running  cilium hubble ui . It will\nautomatically set up a port forward to the hubble-ui service in your Kubernetes\ncluster and make it available on a local port on your machine. \n .. code-block:: shell-session \n cilium hubble ui\nForwarding from 0.0.0.0:12000 -> 8081\nForwarding from [::]:12000 -> 8081\n \n .. tip:: \n The above command will block and continue running while the port forward is\nactive. You can interrupt the command to abort the port forward and re-run\nthe command to make the UI accessible again. \n If your browser has not automatically opened the UI, open the page\nhttp://localhost:12000 in your browser. You should see a screen with an\ninvitation to select a namespace, use the namespace selector dropdown on the\nleft top corner to select a namespace: \n .. image:: images/hubble_service_map_namespace_selector.png \n In this example, we are deploying the Star Wars demo from the :ref: gs_http \nguide. However you can apply the same techniques to observe application\nconnectivity dependencies in your own namespace, and clusters for\napplication of any type. \n Once the deployment is ready, issue a request from both spaceships to emulate\nsome traffic. \n .. code-block:: shell-session \n $ kubectl exec xwing -- curl -s -XPOST deathstar.default.svc.cluster.local/v1/request-landing\nShip landed\n$ kubectl exec tiefighter -- curl -s -XPOST deathstar.default.svc.cluster.local/v1/request-landing\nShip landed\n \n These requests will then be displayed in the UI as service dependencies between\nthe different pods: \n .. image:: images/hubble_sw_service_map.png \n In the bottom of the interface, you may also inspect each recent Hubble flow\nevent in your current namespace individually. \n Inspecting a wide variety of network traffic \n In order to generate some network traffic, run the connectivity test in a loop: \n .. code-block:: shell-session \n while true; do cilium connectivity test; done \n To see the traffic in Hubble, open http://localhost:12000/cilium-test in your\nbrowser.",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/observability/hubble/hubble-ui.rst",
  "extracted_at": "2025-09-03T01:13:29.327835Z"
}
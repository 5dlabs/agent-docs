{
  "url": "file:///tmp/cilium-repo/Documentation/security/policy/kubernetes.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\nUsing Kubernetes Constructs In Policy\n=====================================\n\nThis section covers Kubernetes specific network policy aspects.\n\n.. _k8s_namespaces:\n\nNamespaces\n----------\n\n`Namespaces <https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/>`_\nare used to create virtual clusters within a Kubernetes cluster. All Kubernetes objects\nincluding `NetworkPolicy` and `CiliumNetworkPolicy` belong to a particular\nnamespace.\n\nKnown Pitfalls\n--------------\n\nThis section covers known pitfalls when using Kubernetes constructs in policy.\n\nConsiderations Of Namespace Boundaries\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDepending on how a policy is defined and created, Kubernetes namespaces are automatically taken into account.\n\nNetwork policies imported directly with the :ref:`api_ref` apply to all\nnamespaces unless a namespace selector is specified as described in\n:ref:`example_cnp_ns_boundaries`.\n\n.. _example_cnp_ns_boundaries:\n\nExample\n^^^^^^^\n\nThis example demonstrates how to enforce Kubernetes namespace-based boundaries\nfor the namespaces ``ns1`` and ``ns2`` by enabling default-deny on all pods of\neither namespace and then allowing communication from all pods within the same\nnamespace.\n\n.. note:: The example locks down ingress of the pods in ``ns1`` and ``ns2``.\n\t  This means that the pods can still communicate egress to anywhere\n\t  unless the destination is in either ``ns1`` or ``ns2`` in which case\n\t  both source and destination have to be in the same namespace. In\n\t  order to enforce namespace boundaries at egress, the same example can\n\t  be used by specifying the rules at egress in addition to ingress.\n\n.. literalinclude:: ../../../examples/policies/kubernetes/namespace/isolate-namespaces.yaml\n  :language: yaml\n\nPolicies Only Apply Within The Namespace\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNetwork policies created and imported as `CiliumNetworkPolicy` CRD and\n`NetworkPolicy` apply within the namespace. In other words, the policy **only** applies\nto pods within that namespace. It's possible, however, to grant access to and\nfrom pods in other namespaces as described in :ref:`example_cnp_across_ns`.\n\n.. _example_cnp_across_ns:\n\nExample\n^^^^^^^\n\nThe following example exposes all pods with the label ``name=leia`` in the\nnamespace ``ns1`` to all pods with the label ``name=luke`` in the namespace\n``ns2``.\n\nRefer to the :git-tree:`example YAML files <examples/policies/kubernetes/namespace/demo-pods.yaml>`\nfor a fully functional example including pods deployed to different namespaces.\n\n.. literalinclude:: ../../../examples/policies/kubernetes/namespace/namespace-policy.yaml\n  :language: yaml\n\nSpecifying Namespace In EndpointSelector, FromEndpoints, ToEndpoints\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSpecifying the namespace by way of the label\n``k8s:io.kubernetes.pod.namespace`` in the ``fromEndpoints`` and\n``toEndpoints`` fields is supported as described in \n:ref:`example_cnp_egress_to_kube_system`.\nHowever, Kubernetes prohibits specifying the namespace in the ``endpointSelector``,\nas it would violate the namespace isolation principle of Kubernetes. The\n``endpointSelector`` always applies to pods in the namespace \nassociated with the `CiliumNetworkPolicy` resource itself.\n\n.. _example_cnp_egress_to_kube_system:\n\nExample\n^^^^^^^\n\nThe following example allows all pods in the ``public`` namespace in which the\npolicy is created to communicate with kube-dns on port 53/UDP in the ``kube-system``\nnamespace.\n\n.. literalinclude:: ../../../examples/policies/kubernetes/namespace/kubedns-policy.yaml\n  :language: yaml\n\nNamespace Specific Information\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUsing namespace-specific information like\n``io.cilium.k8s.namespace.labels`` within a ``fromEndpoints`` or\n``toEndpoints`` is supported only for a :ref:`CiliumClusterwideNetworkPolicy`\nand not a :ref:`CiliumNetworkPolicy`. Hence, ``io.cilium.k8s.namespace.labels``\nwill be ignored in :ref:`CiliumNetworkPolicy` resources.\n\nMatch Expressions\n~~~~~~~~~~~~~~~~~\n\nWhen using ``matchExpressions`` in a :ref:`CiliumNetworkPolicy` or a\n:ref:`CiliumClusterwideNetworkPolicy`, the list values are\ntreated as a logical AND. If you want to match multiple keys\nwith a logical OR, you must use multiple ``matchExpressions``.\n\n.. _example_multiple_match_expressions:\n\nExample\n^^^^^^^\n\nThis example demonstrates how to enforce a policy with multiple ``matchExpressions``\nthat achieves a logical OR between the keys and its values.\n\n.. literalinclude:: ../../../examples/policies/l3/match-expressions/or-statement.yaml\n  :language: yaml\n\nThe following example shows a logical AND using a single ``matchExpression``.\n\n.. literalinclude:: ../../../examples/policies/l3/match-expressions/and-statement.yaml\n  :language: yaml\n\nServiceAccounts\n~~~~~~~~~~~~~~~\n\nKubernetes `Service Accounts\n<https://kubernetes.io/docs/concepts/security/service-accounts/>`_ are used\nto associate an identity to a pod or process managed by Kubernetes and grant\nidentities access to Kubernetes resources and secrets. Cilium supports the\nspecification of network security policies based on the service account\nidentity of a pod.\n\nThe service account of a pod is either defined via the `service account\nadmission controller\n<https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#serviceaccount>`_\nor can be directly specified in the Pod, Deployment, ReplicationController\nresource like this:\n\n.. code-block:: yaml\n\n        apiVersion: v1\n        kind: Pod\n        metadata:\n          name: my-pod\n        spec:\n          serviceAccountName: leia\n          ...\n\nExample\n^^^^^^^\n\nThe following example grants any pod running under the service account of\n\"luke\" to issue a ``HTTP GET /public`` request on TCP port 80 to all pods\nrunning associated to the service account of \"leia\".\n\nRefer to the :git-tree:`example YAML files <examples/policies/kubernetes/serviceaccount/demo-pods.yaml>`\nfor a fully functional example including deployment and service account\nresources.\n\n\n.. literalinclude:: ../../../examples/policies/kubernetes/serviceaccount/serviceaccount-policy.yaml\n  :language: yaml\n\nMulti-Cluster\n~~~~~~~~~~~~~\n\nWhen operating multiple cluster with cluster mesh, the cluster name is exposed\nvia the label ``io.cilium.k8s.policy.cluster`` and can be used to restrict\npolicies to a particular cluster.\n\n.. literalinclude:: ../../../examples/policies/kubernetes/clustermesh/cross-cluster-policy.yaml\n  :language: yaml\n\nNote the ``io.kubernetes.pod.namespace: default`` in the policy\nrule. It makes sure the policy applies to ``rebel-base`` in the\n``default`` namespace of ``cluster2`` regardless of the namespace in\n``cluster1`` where ``x-wing`` is deployed in.\n\nIf the namespace label of policy rules is omitted it defaults to the same namespace\nwhere the policy itself is applied in, which may be not what is wanted when deploying\ncross-cluster policies. To allow access from/to any namespace, use ``matchExpressions``\ncombined with an ``Exists`` operator.\n\n.. literalinclude:: ../../../examples/policies/kubernetes/clustermesh/cross-cluster-any-namespace-policy.yaml\n  :language: yaml\n\nClusterwide Policies\n~~~~~~~~~~~~~~~~~~~~\n\n`CiliumNetworkPolicy` only allows to bind a policy restricted to a particular namespace. There can be situations\nwhere one wants to have a cluster-scoped effect of the policy, which can be done using Cilium's\n`CiliumClusterwideNetworkPolicy` Kubernetes custom resource. The specification of the policy is same as that\nof `CiliumNetworkPolicy` except that it is not namespaced.\n\nIn the cluster, this policy will allow ingress traffic from pods matching the label ``name=luke`` from any\nnamespace to pods matching the labels ``name=leia`` in any namespace.\n\n.. literalinclude:: ../../../examples/policies/kubernetes/clusterwide/clusterscope-policy.yaml\n  :language: yaml\n\nAllow All Cilium Managed Endpoints To Communicate With Kube-dns\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example allows all Cilium managed endpoints in the cluster to communicate\nwith kube-dns on port 53/UDP in the ``kube-system`` namespace.\n\n.. literalinclude:: ../../../examples/policies/kubernetes/clusterwide/wildcard-from-endpoints.yaml\n  :language: yaml\n\n.. _health_endpoint: \n\nExample: Add Health Endpoint\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example adds the health entity to all Cilium managed endpoints in order to check\ncluster connectivity health.\n\n.. literalinclude:: ../../../examples/policies/kubernetes/clusterwide/health.yaml\n  :language: yaml\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/security/policy/kubernetes.rst",
  "extracted_at": "2025-09-03T00:53:44.708870Z"
}
{
  "url": "file:///tmp/cilium-repo/Documentation/contributing/testing/unit.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _integration_testing:\n\nIntegration Testing\n===================\n\nCilium uses the standard `go test <https://golang.org/pkg/testing/>`__ framework.\nAll new tests must use `the standard test framework`_.\n\n.. _the standard test framework: https://github.com/cilium/cilium/issues/16860\n\n.. _integration_testing_prerequisites:\n\nPrerequisites\n^^^^^^^^^^^^^\n\nSome tests interact with the kvstore and depend on a local kvstore instances of\netcd. To start the local instances, run:\n\n.. code-block:: shell-session\n\n     $ make start-kvstores\n\nRunning all tests\n^^^^^^^^^^^^^^^^^\n\nTo run integration tests over the entire repository, run the following command\nin the project root directory:\n\n.. code-block:: shell-session\n\n    $ make integration-tests\n\nTo run just unit tests, run:\n\n.. code-block:: shell-session\n\n    $ go test ./...\n\nTesting individual packages\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIt is possible to test individual packages by invoking ``go test`` directly.\nYou can then ``cd`` into the package subject to testing and invoke go test:\n\n.. code-block:: shell-session\n\n    $ cd pkg/kvstore\n    $ go test\n\nIntegration tests have some prerequisites like\n:ref:`integration_testing_prerequisites`, you can use the following command to\nautomatically set up the prerequisites, run the unit tests and tear down the\nprerequisites:\n\n.. code-block:: shell-session\n\n    $ make integration-tests TESTPKGS=./pkg/kvstore\n\nSome tests are marked as 'privileged' if they require the test suite to be run\nas a privileged user or with a given set of capabilities. They are skipped by\ndefault when running ``go test``.\n\nThere are a few ways to run privileged tests.\n\n1. Run the whole test suite with sudo.\n\n    .. code-block:: shell-session\n\n        $ sudo make tests-privileged\n\n2. To narrow down the packages under test, specify ``TESTPKGS``. Note that this\n   takes the Go package pattern syntax, including ``...`` wildcard specifier.\n\n    .. code-block:: shell-session\n\n        $ sudo make tests-privileged TESTPKGS=\"./pkg/datapath/linux ./pkg/maps/...\"\n\n3. Set the ``PRIVILEGED_TESTS`` environment variable and run ``go test``\n   directly. This only escalates privileges when executing the test binaries,\n   the ``go build`` process is run unprivileged.\n\n    .. code-block:: shell-session\n\n        $ PRIVILEGED_TESTS=true go test -exec \"sudo -E\" ./pkg/ipam\n\nAutomatically run unit tests on code changes\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe script ``contrib/shell/test.sh`` contains some helpful bash functions to\nimprove the feedback cycle between writing tests and seeing their results. If\nyou're writing unit tests in a particular package, the ``watchtest`` function\nwill watch for changes in a directory and run the unit tests for that package\nany time the files change. For example, if writing unit tests in ``pkg/policy``,\nrun this in a terminal next to your editor:\n\n.. code-block:: shell-session\n\n    $ . contrib/shell/test.sh\n    $ watchtest pkg/policy\n\nThis shell script depends on the ``inotify-tools`` package on Linux.\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/contributing/testing/unit.rst",
  "extracted_at": "2025-09-03T00:53:44.790284Z"
}
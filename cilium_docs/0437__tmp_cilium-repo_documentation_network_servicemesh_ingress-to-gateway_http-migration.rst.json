{
  "url": "file:///tmp/cilium-repo/Documentation/network/servicemesh/ingress-to-gateway/http-migration.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _gs_gateway_http_migration:\n\n**********************\nHTTP Migration Example\n**********************\n\nThis example shows you how to migrate an existing Ingress configuration to the equivalent Gateway API resource.\n\nThe Cilium :ref:`gs_ingress_http` serves as the starting Ingress configuration. \nThe same approach applies to other controllers, though each Ingress controller configuration varies.\n\nThe example Ingress configuration routes traffic to backend services from the\n``bookinfo`` demo microservices app from the Istio project.\n\nReview Ingress Configuration\n============================\n\nYou can find the example Ingress definition in ``basic-ingress.yaml``.\n\n.. literalinclude:: ../../../../examples/kubernetes/servicemesh/basic-ingress.yaml\n   :language: yaml\n\nThis example listens for traffic on port 80, routes requests for the path ``/details`` to the ``details`` service,\nand ``/`` to the ``productpage`` service.\n\n\nCreate Equivalent Gateway Configuration\n=======================================\n\nTo create the equivalent Gateway configuration, consider the following:\n\n- Entry Point\n\nThe entry point is a combination of an IP address and port through which external clients access the data plane.\n\n.. tabs::\n\n    .. group-tab:: Ingress\n        \n        Every Ingress resource has two implicit entry points -- one for HTTP and the other for HTTPS traffic. \n        An Ingress controller provides the entry points. Typically, entry points are either shared by all Ingress resources, or every Ingress resource has dedicated entry points.\n\n        .. code-block:: shell-session\n\n            apiVersion: networking.k8s.io/v1\n            kind: Ingress\n            spec:\n              ingressClassName: cilium\n\n    .. group-tab:: Gateway API\n\n        In the Gateway API, entry points must be explicitly defined in a Gateway resource. \n        For example, for the data plane to handle HTTP traffic on port 80, you must define a listener for that traffic. \n        Typically, a Gateway implementation provides a dedicated data plane for each Gateway resource.\n\n        .. code-block:: shell-session\n\n            apiVersion: gateway.networking.k8s.io/v1beta1\n            kind: Gateway\n            metadata:\n              name: cilium-gateway\n            spec:\n              gatewayClassName: cilium\n              listeners:\n              - name: http\n                port: 80\n                protocol: HTTP\n\n- Routing Rules\n\nWhen using Ingress or Gateway API, routing rules must be defined to attach applications to those entry points.\n\n.. tabs::\n\n    .. group-tab:: Ingress\n        \n        The path-based routing rules are configured in the Ingress resource.\n\n        In the Ingress resource, each hostname has separate routing rules:\n\n        .. code-block:: shell-session\n\n            apiVersion: networking.k8s.io/v1\n            kind: Ingress\n            [...]\n            rules:\n            - http:\n                paths:\n                - backend:\n                    service:\n                      name: details\n                      port:\n                        number: 9080\n                  path: /details\n                  pathType: Prefix\n                - backend:\n                    service:\n                      name: productpage\n                      port:\n                        number: 9080\n                  path: /\n                  pathType: Prefix\n\n    .. group-tab:: Gateway API\n\n        The routing rules are configured in the HTTPRoute.\n\n        .. code-block:: shell-session\n\n            ---\n            apiVersion: gateway.networking.k8s.io/v1beta1\n            kind: HTTPRoute\n            spec:\n              parentRefs:\n              - name: cilium-gateway\n            rules:\n            - matches:\n              - path:\n                  type: PathPrefix\n                  value: /\n              backendRefs:\n              - name: productpage\n                port: 9080\n            - matches:\n              - path:\n                  type: PathPrefix\n                  value: /details\n              backendRefs:\n              - name: details\n                port: 9080\n              \n\n- Selecting Data Plane to Attach to:\n\nBoth Ingress and Gateway API resources must be explicitly attached to a Dataplane.  \n\n.. tabs::\n\n    .. group-tab:: Ingress\n\n        An Ingress resource must specify a class that selects which Ingress controller to use. \n\n        .. code-block:: shell-session\n\n            apiVersion: networking.k8s.io/v1\n            kind: Ingress\n            spec:\n              ingressClassName: cilium\n\n    .. group-tab:: Gateway API\n\n        A Gateway resource must also specify a class: in this example, it is always the ``cilium`` class. \n        An HTTPRoute must specify which Gateway (or Gateways) to attach to via a ``parentRef``.\n\n        .. code-block:: shell-session\n\n            apiVersion: gateway.networking.k8s.io/v1beta1\n            kind: Gateway\n            metadata:\n              name: cilium-gateway\n              namespace: default\n            spec:\n              gatewayClassName: cilium\n            [...]\n            ---\n            apiVersion: gateway.networking.k8s.io/v1beta1\n            kind: HTTPRoute\n            spec:\n              parentRefs:\n              - name: cilium-gateway\n\n\nReview Equivalent Gateway Configuration\n=======================================\n\nYou can find the equivalent final Gateway and HTTPRoute definition in ``http-migration.yaml``.\n\n.. literalinclude:: ../../../../examples/kubernetes/gateway/http-migration.yaml\n   :language: yaml\n\nThe preceding example creates a Gateway named ``cilium-gateway`` that listens on port 80 for HTTP traffic.\nTwo routes are defined, one for ``/details`` to the ``details`` service, and\none for ``/`` to the ``productpage`` service.\n\nDeploy the resources and verify that the HTTP requests are routed successfully to the services.\nFor more information, consult the Gateway API :ref:`gs_gateway_http`.\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/servicemesh/ingress-to-gateway/http-migration.rst",
  "extracted_at": "2025-09-03T01:13:29.139715Z"
}
{
  "url": "file:///tmp/cilium-repo/Documentation/contributing/release/organization.rst",
  "content": ".. only:: not (epub or latex or html)\n  \n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\nOrganization\n============\n\nRelease Cadence\n---------------\n\nNew feature releases of Cilium are released on a cadence of around six months.\nMinor releases are typically designated by incrementing the ``Y`` in the\nversion format ``X.Y.Z``.\n\nThree stable branches are maintained at a time: One for the most recent minor\nrelease, and two for the prior two minor releases. For each minor release that\nis currently maintained, the stable branch ``vX.Y`` on github contains the code\nfor the next stable release. New patch releases for an existing stable version\n``X.Y.Z`` are published incrementing the ``Z`` in the version format.\n\nNew patch releases for stable branches are made periodically to provide\nsecurity and bug fixes, based upon community demand and bugfix severity.\nPotential fixes for an upcoming release are first merged into the ``main``\nbranch, then backported to the relevant stable branches according to the\n:ref:`backport_criteria`.\n\nThe following sections describe in more detail the general guidelines that the\nrelease management team follows for Cilium. The team may diverge from this\nprocess at their discretion.\n\nFeature Releases\n~~~~~~~~~~~~~~~~\n\nThere are several key dates during the feature development cycle of Cilium\nwhich are important for developers:\n\n* Pre-release days: The Cilium release management team aims to publish a\n  snapshot of the latest changes in the ``main`` branch on the first weekday of\n  each month. This provides developers a target delivery date to incrementally\n  ship functionality, and allows community members to get early access to\n  upcoming features to test and provide feedback. Pre-releases may not be\n  published when a release candidate or final stable release is being\n  published.\n\n* Feature freeze: Around six weeks prior to a target feature release, the\n  ``main`` branch is frozen for new feature contributions. The goal of the\n  freeze is to focus community attention on stabilizing and hardening the\n  upcoming release by prioritizing bugfixes, documentation improvements, and\n  tests. In general, all new functionality that the community intends to\n  distribute as part of the upcoming release must land into the ``main`` branch\n  prior to this date. Any bugfixes, docs changes, or testing improvements can\n  continue to be merged as usual following this date.\n\n* Release candidates: Following the feature freeze, the release management team\n  publishes a series of release candidates. These candidates should represent\n  the functionality and behaviour of the final release. The release management\n  team encourages community participation in testing and providing feedback on\n  the release candidates, as this feedback is crucial to identifying any issues\n  that may not have been discovered during development. Problems identified\n  during this period may be reported as known issues in the final release or\n  fixed, subject to severity and community contributions towards solutions.\n  Release candidates are typically published every two weeks until the final\n  release is published.\n\n* Branching and feature thaw: Within two weeks of the feature freeze, the\n  release management team aims to create a new branch to manage updates for the\n  new stable feature release series. After this, all Pull Requests for the\n  upcoming feature release must be labeled with a ``needs-backport/X.Y`` label\n  with ``X.Y`` matching the target minor release version to trigger the\n  backporting process and ensure the changes are ported to the release branch.\n  The ``main`` branch is then unfrozen for feature changes and refactoring.\n  Until the final release date, it is better to avoid invasive refactoring or\n  significant new feature additions just to minimize the impact on backporting\n  for the upcoming release during that period.\n\n* Stable release: The new feature release ``X.Y.0`` version is published. All\n  restrictions on submissions are lifted, and the cycle begins again.\n\nStable Releases\n~~~~~~~~~~~~~~~\n\nThe Cilium release management team typically aims to publish fresh releases for\nall maintained stable branches around the middle of each month. All changes\nthat are merged into the target branch by the first week of the month should\ntypically be published in that month's patch release. Changes which do not land\ninto the target branch by that time may be deferred to the following month's\npatch release. For more information about how patches are merged into the\n``main`` branch and subsequently backported to stable branches, see the\n:ref:`backport_process`.\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/contributing/release/organization.rst",
  "extracted_at": "2025-09-03T01:13:28.822084Z"
}
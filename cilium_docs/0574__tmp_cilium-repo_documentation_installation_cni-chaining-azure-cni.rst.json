{
  "url": "file:///tmp/cilium-repo/Documentation/installation/cni-chaining-azure-cni.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _chaining_azure:\n\n******************\nAzure CNI (Legacy)\n******************\n\n.. note::\n\n   For most users, the best way to run Cilium on AKS is either\n   AKS BYO CNI as described in :ref:`k8s_install_quick`\n   or `Azure CNI Powered by Cilium <https://aka.ms/aks/cilium-dataplane>`__.\n   This guide provides alternative instructions to run Cilium with Azure CNI\n   in a chaining configuration. This is the legacy way of running Azure CNI with\n   cilium as Azure IPAM is legacy, for more information see :ref:`ipam_azure`.\n\n.. include:: cni-chaining-limitations.rst\n\n.. admonition:: Video\n :class: attention\n\n  If you'd like a video explanation of the Azure CNI Powered by Cilium, check out `eCHO episode 70: Azure CNI Powered by Cilium <https://www.youtube.com/watch?v=8it8Hm2F_GM>`__.\n\nThis guide explains how to set up Cilium in combination with Azure CNI in a\nchaining configuration. In this hybrid mode, the Azure CNI plugin is\nresponsible for setting up the virtual network devices as well as address\nallocation (IPAM). After the initial networking is setup, the Cilium CNI plugin\nis called to attach eBPF programs to the network devices set up by Azure CNI to\nenforce network policies, perform load-balancing, and encryption.\n\n\nCreate an AKS + Cilium CNI configuration\n========================================\n\nCreate a ``chaining.yaml`` file based on the following template to specify the\ndesired CNI chaining configuration. This :term:`ConfigMap` will be installed as the CNI\nconfiguration file on all nodes and defines the chaining configuration. In the\nexample below, the Azure CNI, portmap, and Cilium are chained together.\n\n.. code-block:: yaml\n\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: cni-configuration\n      namespace: kube-system\n    data:\n      cni-config: |-\n        {\n          \"cniVersion\": \"0.3.0\",\n          \"name\": \"azure\",\n          \"plugins\": [\n            {\n              \"type\": \"azure-vnet\",\n              \"mode\": \"transparent\",\n              \"ipam\": {\n                 \"type\": \"azure-vnet-ipam\"\n               }\n            },\n            {\n              \"type\": \"portmap\",\n              \"capabilities\": {\"portMappings\": true},\n              \"snat\": true\n            },\n            {\n               \"name\": \"cilium\",\n               \"type\": \"cilium-cni\"\n            }\n          ]\n        }\n\nDeploy the :term:`ConfigMap`:\n\n.. code-block:: shell-session\n\n   kubectl apply -f chaining.yaml\n\n\nDeploy Cilium\n=============\n\n.. include:: k8s-install-download-release.rst\n\nDeploy Cilium release via Helm:\n\n.. parsed-literal::\n\n   helm install cilium |CHART_RELEASE| \\\\\n     --namespace kube-system \\\\\n     --set cni.chainingMode=generic-veth \\\\\n     --set cni.customConf=true \\\\\n     --set cni.exclusive=false \\\\\n     --set nodeinit.enabled=true \\\\\n     --set cni.configMap=cni-configuration \\\\\n     --set routingMode=native \\\\\n     --set enableIPv4Masquerade=false \\\\\n     --set endpointRoutes.enabled=true\n\nThis will create both the main cilium daemonset, as well as the cilium-node-init daemonset, which handles tasks like mounting the eBPF filesystem and updating the\nexisting Azure CNI plugin to run in 'transparent' mode.\n\n.. include:: k8s-install-restart-pods.rst\n\n.. include:: k8s-install-validate.rst\n\n.. include:: next-steps.rst\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/installation/cni-chaining-azure-cni.rst",
  "extracted_at": "2025-09-03T01:13:29.307857Z"
}
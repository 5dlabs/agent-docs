{
  "url": "file:///tmp/cilium-repo/Documentation/overview/intro.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _intro:\n\n###############################\nIntroduction to Cilium & Hubble\n###############################\n\nWhat is Cilium?\n===============\n\nCilium is open source software for transparently securing the network\nconnectivity between application services deployed using Linux container\nmanagement platforms like Docker and Kubernetes.\n\nAt the foundation of Cilium is a new Linux kernel technology called eBPF, which\nenables the dynamic insertion of powerful security visibility and control logic\nwithin Linux itself.  Because eBPF runs inside the Linux kernel, Cilium\nsecurity policies can be applied and updated without any changes to the\napplication code or container configuration.\n\n.. admonition:: Video\n  :class: attention\n\n  If you'd like a video introduction to Cilium, check out this `explanation by Thomas Graf, Co-founder of Cilium <https://www.youtube.com/watch?v=80OYrzS1dCA&t=405s>`__.\n\nWhat is Hubble?\n===============\n\n:ref:`Hubble<hubble_intro>` is a fully distributed networking and security observability platform.\nIt is built on top of Cilium and eBPF to enable deep visibility into the\ncommunication and behavior of services as well as the networking infrastructure\nin a completely transparent manner.\n\nBy building on top of Cilium, Hubble can leverage eBPF for visibility. By\nrelying on eBPF, all visibility is programmable and allows for a dynamic\napproach that minimizes overhead while providing deep and detailed visibility\nas required by users. Hubble has been created and specifically designed to make\nbest use of these new eBPF powers.\n\nHubble can answer questions such as:\n\nService dependencies & communication map\n----------------------------------------\n\n* What services are communicating with each other? How frequently? What does\n  the service dependency graph look like?\n* What HTTP calls are being made? What Kafka topics does a service consume from\n  or produce to?\n\nNetwork monitoring & alerting\n-----------------------------\n\n* Is any network communication failing? Why is communication failing? Is it\n  DNS? Is it an application or network problem? Is the communication broken on\n  layer 4 (TCP) or layer 7 (HTTP)?\n* Which services have experienced a DNS resolution problem in the last 5\n  minutes? Which services have experienced an interrupted TCP connection\n  recently or have seen connections timing out? What is the rate of unanswered\n  TCP SYN requests?\n\nApplication monitoring\n----------------------\n\n* What is the rate of 5xx or 4xx HTTP response codes for a particular service\n  or across all clusters?\n* What is the 95th and 99th percentile latency between HTTP requests and\n  responses in my cluster? Which services are performing the worst? What is the\n  latency between two services?\n\nSecurity observability\n----------------------\n\n* Which services had connections blocked due to network policy? What services\n  have been accessed from outside the cluster? Which services have resolved a\n  particular DNS name?\n\n.. admonition:: Video\n  :class: attention\n\n  If you'd like a video introduction to Hubble, check out `eCHO episode 2: Introduction to Hubble <https://www.youtube.com/watch?v=hD2iJUyIXQw&t=187s>`__.\n\nWhy Cilium & Hubble?\n====================\n\neBPF is enabling visibility into and control over systems and applications at a\ngranularity and efficiency that was not possible before. It does so in a\ncompletely transparent way, without requiring the application to change in any\nway. eBPF is equally well-equipped to handle modern containerized workloads as\nwell as more traditional workloads such as virtual machines and standard Linux\nprocesses.\n\nThe development of modern datacenter applications has shifted to a\nservice-oriented architecture often referred to as *microservices*, wherein a\nlarge application is split into small independent services that communicate\nwith each other via APIs using lightweight protocols like HTTP.  Microservices\napplications tend to be highly dynamic, with individual containers getting\nstarted or destroyed as the application scales out / in to adapt to load changes\nand during rolling updates that are deployed as part of continuous delivery.\n\nThis shift toward highly dynamic microservices presents both a challenge and an\nopportunity in terms of securing connectivity between microservices.\nTraditional Linux network security approaches (e.g., iptables) filter on IP\naddress and TCP/UDP ports, but IP addresses frequently churn in dynamic\nmicroservices environments. The highly volatile life cycle of containers causes\nthese approaches to struggle to scale side by side with the application as load\nbalancing tables and access control lists carrying hundreds of thousands of\nrules that need to be updated with a continuously growing frequency. Protocol\nports (e.g. TCP port 80 for HTTP traffic) can no longer be used to\ndifferentiate between application traffic for security purposes as the port is\nutilized for a wide range of messages across services.\n\nAn additional challenge is the ability to provide accurate visibility as\ntraditional systems are using IP addresses as primary identification vehicle\nwhich may have a drastically reduced lifetime of just a few seconds in\nmicroservices architectures.\n\nBy leveraging Linux eBPF, Cilium retains the ability to transparently insert\nsecurity visibility + enforcement, but does so in a way that is based on\nservice / pod / container identity (in contrast to IP address identification in\ntraditional systems) and can filter on application-layer (e.g. HTTP).  As a\nresult, Cilium not only makes it simple to apply security policies in a highly\ndynamic environment by decoupling security from addressing, but can also\nprovide stronger security isolation by operating at the HTTP-layer in addition\nto providing traditional Layer 3 and Layer 4 segmentation.\n\nThe use of eBPF enables Cilium to achieve all of this in a way that is highly\nscalable even for large-scale environments.\n\nFunctionality Overview\n======================\n\n.. include:: ../../README.rst\n     :start-after: begin-functionality-overview\n     :end-before: end-functionality-overview\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/overview/intro.rst",
  "extracted_at": "2025-09-03T01:13:29.368607Z"
}
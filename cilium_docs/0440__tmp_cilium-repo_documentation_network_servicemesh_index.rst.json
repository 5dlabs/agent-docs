{
  "url": "file:///tmp/cilium-repo/Documentation/network/servicemesh/index.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _servicemesh_root:\n\n************\nService Mesh\n************\n\nWhat is Service Mesh?\n#####################\n\nWith the introduction of distributed applications, additional visibility,\nconnectivity, and security requirements have surfaced. Application components\ncommunicate over untrusted networks across cloud and premises boundaries,\nload-balancing is required to understand application protocols, resiliency is\nbecoming crucial, and security must evolve to a model where sender and receiver\ncan authenticate each other’s identity. In the early days of distributed\napplications, these requirements were resolved by directly embedding the\nrequired logic into the applications. A service mesh extracts these features out\nof the application and offers them as part of the infrastructure for all\napplications to use and thus no longer requires to change each application.\n\nLooking at the feature set of a service mesh today, it can be summarized as follows:\n\n- **Resilient Connectivity**: Service to service communication must be possible across\n  boundaries such as clouds, clusters, and premises. Communication must be\n  resilient and fault tolerant.\n- **L7 Traffic Management**: Load balancing, rate limiting, and resiliency must be\n  L7-aware (HTTP, REST, gRPC, WebSocket, …).\n- **Identity-based Security**: Relying on network identifiers to achieve security is\n  no longer sufficient, both the sending and receiving services must be able to\n  authenticate each other based on identities instead of a network identifier.\n- **Observability & Tracing**: Observability in the form of tracing and metrics is\n  critical to understanding, monitoring, and troubleshooting application stability,\n  performance, and availability.\n- **Transparency**: The functionality must be available to applications in a\n  transparent manner, i.e. without requiring to change application code.\n\n.. admonition:: Video\n  :class: attention\n\n  If you'd like a video explanation of Cilium's Service Mesh implementation, check out `eCHO episode 27: eBPF-enabled Service Mesh <https://www.youtube.com/watch?v=nJT0ASbGLvs>`__ and `eCHO episode 100: Next-gen mutual authentication in Cilium <https://www.youtube.com/watch?v=BWjDlynXhzg>`__.\n\nWhy Cilium Service Mesh?\n########################\n\nSince its early days, Cilium has been well aligned with the service mesh concept\nby operating at both the networking and the application protocol layer to provide\nconnectivity, load-balancing, security, and observability. For all network\nprocessing including protocols such as IP, TCP, and UDP, Cilium uses eBPF as the\nhighly efficient in-kernel datapath. Protocols at the application layer such as\nHTTP, Kafka, gRPC, and DNS are parsed using a proxy such as Envoy. \n\n.. toctree::\n   :maxdepth: 3\n   :glob:\n\n   ingress\n   gateway-api/gateway-api\n   gateway-api/gamma\n   ingress-to-gateway/ingress-to-gateway\n   istio\n   mutual-authentication/mutual-authentication\n   l7-traffic-management\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/servicemesh/index.rst",
  "extracted_at": "2025-09-03T01:13:29.140670Z"
}
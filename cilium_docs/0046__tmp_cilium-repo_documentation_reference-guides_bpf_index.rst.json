{
  "url": "file:///tmp/cilium-repo/Documentation/reference-guides/bpf/index.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _bpf_guide:\n\n***************************\nBPF and XDP Reference Guide\n***************************\n\n.. note:: This documentation section is targeted at developers and users who\n          want to understand BPF and XDP in great technical depth. While\n          reading this reference guide may help broaden your understanding of\n          Cilium, it is not a requirement to use Cilium. Please refer to the\n          :ref:`getting_started` guide and :ref:`ebpf_datapath` for a higher\n          level introduction.\n\nBPF is a highly flexible and efficient virtual machine-like construct in the\nLinux kernel allowing to execute bytecode at various hook points in a safe\nmanner. It is used in a number of Linux kernel subsystems, most prominently\nnetworking, tracing and security (e.g. sandboxing).\n\nAlthough BPF exists since 1992, this document covers the extended Berkeley\nPacket Filter (eBPF) version which has first appeared in Kernel 3.18 and\nrenders the original version which is being referred to as \"classic\" BPF\n(cBPF) these days mostly obsolete. cBPF is known to many as being the packet\nfilter language used by tcpdump. Nowadays, the Linux kernel runs eBPF only and\nloaded cBPF bytecode is transparently translated into an eBPF representation\nin the kernel before program execution. This documentation will generally refer\nto the term BPF unless explicit differences between eBPF and cBPF are being\npointed out.\n\nEven though the name Berkeley Packet Filter hints at a packet filtering specific\npurpose, the instruction set is generic and flexible enough these days that\nthere are many use cases for BPF apart from networking. See :ref:`bpf_users`\nfor a list of projects which use BPF.\n\nCilium uses BPF heavily in its data path, see :ref:`ebpf_datapath` for further\ninformation. The goal of this chapter is to provide a BPF reference guide in\norder to gain understanding of BPF, its networking specific use including loading\nBPF programs with tc (traffic control) and XDP (eXpress Data Path), and to aid\nwith developing Cilium's BPF templates.\n\n.. toctree::\n   :maxdepth: 2\n\n   architecture\n   toolchain\n   debug_and_test\n   progtypes\n   resources\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/reference-guides/bpf/index.rst",
  "extracted_at": "2025-09-03T00:53:44.719162Z"
}
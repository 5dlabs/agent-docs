{
  "url": "file:///tmp/cilium-repo/Documentation/configuration/sbom.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _sbom:\n\n**************************\nSoftware Bill of Materials\n**************************\n\nA Software Bill of Materials (SBOM) is a complete, formally structured list of\ncomponents that are required to build a given piece of software. SBOM provides\ninsight into the software supply chain and any potential concerns related to\nlicense compliance and security that might exist.\n\nThe Cilium SBOM is generated using the `syft`_ tool. To learn more about SBOM, see\n`what an SBOM can do for you`_.\n\n.. _`syft`: https://github.com/anchore/syft\n.. _`what an SBOM can do for you`: https://www.chainguard.dev/unchained/what-an-sbom-can-do-for-you\n\nPrerequisites\n=============\n\n- `Install cosign`_\n\n.. _`Install cosign`: https://docs.sigstore.dev/cosign/system_config/installation/\n\nDownload SBOM\n=============\n\nYou can download the SBOM in-toto attestation from the supplied Cilium image using the following command:\n\n.. code-block:: shell-session\n\n    $ cosign download attestation --predicate-type spdxjson <IMAGE URI> | jq -r .payload | base64 -d | jq .predicate > ciliumSBOM.spdx.json\n\nVerify SBOM attestation\n=======================\n\nTo verify the SBOM in-toto attestation on the supplied Cilium image, run the following command:\n\n.. parsed-literal::\n    \n    $ TAG=|IMAGE_TAG|\n    $ cosign verify-attestation --certificate-github-workflow-repository cilium/cilium \\\n    --certificate-oidc-issuer https://token.actions.githubusercontent.com \\\n    --certificate-identity-regexp https://github.com/cilium/cilium/.github/workflows \\\n    --type spdxjson <IMAGE URI> 2>&1 | head -n 13\n\nFor example:\n\n.. code-block:: shell-session\n\n    $ cosign verify-attestation --certificate-github-workflow-repository cilium/cilium \\\n    --certificate-oidc-issuer https://token.actions.githubusercontent.com \\\n    --certificate-identity-regexp https://github.com/cilium/cilium/.github/workflows \\\n    --type spdxjson quay.io/cilium/cilium-ci:d2d270a42b674ca1e7c536186691d8ac8317fd64 2>&1 | head -n 13\n\n    Verification for quay.io/cilium/cilium-ci:d2d270a42b674ca1e7c536186691d8ac8317fd64 --\n    The following checks were performed on each of these signatures:\n    - The cosign claims were validated\n    - Existence of the claims in the transparency log was verified offline\n    - The code-signing certificate was verified using trusted certificate authority certificates\n    Certificate subject: https://github.com/cilium/cilium/.github/workflows/build-images-ci.yaml@refs/pull/34011/merge\n    Certificate issuer URL: https://token.actions.githubusercontent.com\n    GitHub Workflow Trigger: pull_request\n    GitHub Workflow SHA: 7d967b8355489cef6a787558ac70c9c619463284\n    GitHub Workflow Name: Image CI Build\n    GitHub Workflow Repository: cilium/cilium\n    GitHub Workflow Ref: refs/pull/34011/merge\n    \nIt can be validated that the image was signed using GitHub Actions in the Cilium repository from the ``Certificate subject`` and ``Certificate issuer URL`` fields of the output.\n\n.. note::\n    The `in-toto`_ Attestation Framework provides a specification for generating\n    verifiable claims about any aspect of how a piece of software is produced.\n    Consumers or users of software can then validate the origins of the software,\n    and establish trust in its supply chain, using in-toto attestations.\n\n.. _`in-toto`: https://in-toto.io/\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/configuration/sbom.rst",
  "extracted_at": "2025-09-03T00:53:44.689113Z"
}
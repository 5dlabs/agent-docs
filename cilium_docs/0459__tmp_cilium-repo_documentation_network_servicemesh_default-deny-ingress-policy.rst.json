{
  "url": "file:///tmp/cilium-repo/Documentation/network/servicemesh/default-deny-ingress-policy.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n \n Default Deny Ingress Policy \n \n Let's apply a  CiliumClusterwideNetworkPolicy  to deny all traffic by default: \n .. literalinclude:: ../../../examples/kubernetes/servicemesh/policy/default-deny.yaml\n:language: yaml \n .. parsed-literal:: \n $ kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes/servicemesh/policy/default-deny.yaml\n \n With this policy applied, the request to the  /details  endpoint will be denied for external and in-cluster traffic. \n .. code-block:: shell-session \n $ curl --fail -v http://\"$HTTP_INGRESS\"/details/1\n*   Trying 172.19.255.194:80...\n* Connected to 172.19.255.194 (172.19.255.194) port 80\n> GET /details/1 HTTP/1.1\n> Host: 172.19.255.194\n> User-Agent: curl/8.6.0\n> Accept: */*\n>\n< HTTP/1.1 403 Forbidden\n< content-length: 15\n< content-type: text/plain\n< date: Sun, 17 Mar 2024 13:52:38 GMT\n< server: envoy\n* The requested URL returned error: 403\n* Closing connection\ncurl: (22) The requested URL returned error: 403\n\n# Capture hubble flows in another terminal\n$ kubectl --namespace=kube-system exec -i -t cilium-xjl4x -- hubble observe -f --identity ingress\nDefaulted container \"cilium-agent\" out of: cilium-agent, config (init), mount-cgroup (init), apply-sysctl-overwrites (init), mount-bpf-fs (init), wait-for-node-init (init), clean-cilium-state (init), install-cni-binaries (init)\nMar 17 13:56:00.709: 172.19.0.1:34104 (ingress) -> default/cilium-ingress-basic-ingress:80 (world) http-request DROPPED (HTTP/1.1 GET http://172.19.255.194/details/1)\nMar 17 13:56:00.709: 172.19.0.1:34104 (ingress) <- default/cilium-ingress-basic-ingress:80 (world) http-response FORWARDED (HTTP/1.1 403 0ms (GET http://172.19.255.194/details/1))\n \n Now let's check if in-cluster traffic to the same endpoint is denied: \n .. parsed-literal:: \n # The test-application.yaml contains a client pod with curl available\n$ kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes/servicemesh/envoy/test-application.yaml\n$ kubectl exec -it deployment/client -- curl -s http://$HTTP_INGRESS/details/1\nAccess denied\n \n The next step is to allow ingress traffic to the  /details  endpoint: \n .. literalinclude:: ../../../examples/kubernetes/servicemesh/policy/allow-ingress-cluster.yaml\n:language: yaml \n .. parsed-literal:: \n $ kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes/servicemesh/policy/allow-ingress-cluster.yaml\n \n .. code-block:: shell-session \n $ curl -s --fail http://\"$HTTP_INGRESS\"/details/1\n{\"id\":1,\"author\":\"William Shakespeare\",\"year\":1595,\"type\":\"paperback\",\"pages\":200,\"publisher\":\"PublisherA\",\"language\":\"English\",\"ISBN-10\":\"1234567890\",\"ISBN-13\":\"123-1234567890\"}\n$ kubectl exec -it deployment/client -- curl -s http://$HTTP_INGRESS/details/1\n{\"id\":1,\"author\":\"William Shakespeare\",\"year\":1595,\"type\":\"paperback\",\"pages\":200,\"publisher\":\"PublisherA\",\"language\":\"English\",\"ISBN-10\":\"1234567890\",\"ISBN-13\":\"123-1234567890\"}\n \n NetworkPolicy that selects  reserved:ingress  and allows egress\nto specific identities could also be used. But in general, it's probably more\nreliable to allow all traffic from the  reserved:ingress  identity to all\n cluster  identities, given that Cilium Ingress is part of the networking\ninfrastructure.",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/servicemesh/default-deny-ingress-policy.rst",
  "extracted_at": "2025-09-03T01:13:29.151549Z"
}
{
  "url": "file:///tmp/cilium-repo/Documentation/security/threat-model.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\nThreat Model\n============\n\nThis section presents a threat model for Cilium. This threat model\nallows interested parties to understand:\n\n-  security-specific implications of Cilium's architecture\n-  controls that are in place to secure data flowing through Cilium's various components\n-  recommended controls for running Cilium in a production environment\n\nScope and Prerequisites\n-----------------------\n\nThis threat model considers the possible attacks that could affect an\nup-to-date version of Cilium running in a production environment; it\nwill be refreshed when there are significant changes to Cilium's\narchitecture or security posture.\n\nThis model does not consider supply-chain attacks, such as attacks where\na malicious contributor is able to intentionally inject vulnerable code\ninto Cilium. For users who are concerned about supply-chain attacks,\nCilium's `security audit`_ assessed Cilium's supply chain controls\nagainst `the SLSA framework`_.\n\nIn order to understand the following threat model, readers will need\nfamiliarity with basic Kubernetes concepts, as well as a high-level\nunderstanding of Cilium's :ref:`architecture and components<component_overview>`.\n\n.. _security audit: https://github.com/cilium/cilium.io/blob/main/Security-Reports/CiliumSecurityAudit2022.pdf\n.. _the SLSA framework:  https://slsa.dev/\n\nMethodology\n-----------\n\nThis threat model considers eight different types of threat\nactors, placed at different parts of a typical deployment stack. We will\nprimarily use Kubernetes as an example but the threat model remains\naccurate if deployed with other orchestration systems, or when running\nCilium outside of Kubernetes. The attackers will have different levels\nof initial privileges, giving us a broad overview of the security\nguarantees that Cilium can provide depending on the nature of the threat\nand the extent of a previous compromise.\n\nFor each threat actor, this guide uses the `the STRIDE methodology`_ to\nassess likely attacks. Where one attack type in the STRIDE set can lead to others\n(for example, tampering leading to denial of service), we have described the\nattack path under the most impactful attack type. For the potential attacks\nthat we identify, we recommend controls that can be used to reduce the\nrisk of the identified attacks compromising a cluster. Applying the\nrecommended controls is strongly advised in order to run Cilium securely\nin production.\n\n.. _the STRIDE methodology: https://en.wikipedia.org/wiki/STRIDE_(security)\n\nReference Architecture\n----------------------\n\nFor ease of understanding, consider a single Kubernetes\ncluster running Cilium, as illustrated below:\n\n.. image:: images/cilium_threat_model_reference_architecture.png\n\nThe Threat Surface\n~~~~~~~~~~~~~~~~~~\n\nIn the above scenario, the aim of Cilium's security controls is to\nensure that all the components of the Cilium platform are operating\ncorrectly, to the extent possible given the abilities of the threat\nactor that Cilium is faced with. The key components that need to be\nprotected are:\n\n-  the Cilium agent running on a node, either as a Kubernetes pod, a host process, or as an entire virtual machine\n-  Cilium state (either stored via CRDs or via an external key-value store like etcd)\n-  eBPF programs loaded by Cilium into the kernel\n-  network packets managed by Cilium\n-  observability data collected by Cilium and stored by Hubble\n\nThe Threat Model\n----------------\n\nFor each type of attacker, we consider the plausible types of attacks\navailable to them, how Cilium can be used to protect against these\nattacks, as well as the security controls that Cilium provides. For\nattacks which might arise as a consequence of the high level of\nprivileges required by Cilium, we also suggest mitigations that users\nshould apply to secure their environments.\n\n.. _kubernetes-workload-attacker:\n\nKubernetes Workload Attacker\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor the first scenario, consider an attacker who has been able to\ngain access to a Kubernetes pod, and is now able to run arbitrary code\ninside a container. This could occur, for example, if a vulnerable\nservice is exposed externally to a network. In this case, let us also\nassume that the compromised pod does not have any elevated privileges\n(in Kubernetes or on the host) or direct access to host files.\n\n.. image:: images/cilium_threat_model_workload.png\n\nIn this scenario, there is no potential for compromise of the Cilium\nstack; in fact, Cilium provides several features that would allow users\nto limit the scope of such an attack:\n\n.. rst-class:: wrapped-table\n\n+-----------------+---------------------+--------------------------------+\n| Threat surface  | Identified STRIDE   | Cilium security benefits       |\n|                 | threats             |                                |\n+=================+=====================+================================+\n| Cilium agent    | Potential denial of | Cilium can enforce             |\n|                 | service if the      | `bandwidth limitations`_       |\n|                 | compromised         | on pods to limit the network   | \n|                 |                     | resource utilization.          |\n|                 | Kubernetes workload |                                |\n|                 | does not have       |                                |\n|                 | defined resource    |                                |\n|                 | limits.             |                                |\n+-----------------+---------------------+--------------------------------+\n| Cilium          | None                |                                |\n| configuration   |                     |                                |\n+-----------------+---------------------+--------------------------------+\n| Cilium eBPF     | None                |                                |\n| programs        |                     |                                |\n+-----------------+---------------------+--------------------------------+\n| Network data    | None                | - Cilium's network policy can  |\n|                 |                     |   be used to provide           |\n|                 |                     |   least-privilege isolation    |\n|                 |                     |   between Kubernetes           |\n|                 |                     |   workloads, and between       |\n|                 |                     |   Kubernetes workloads and     |\n|                 |                     |   \"external\" endpoints running |\n|                 |                     |   outside the Kubernetes       |\n|                 |                     |   cluster, or running on the   |\n|                 |                     |   Kubernetes worker nodes.     |\n|                 |                     |   Users should ideally define  |\n|                 |                     |   specific allow rules that    |\n|                 |                     |   only permit expected         |\n|                 |                     |   communication between        |\n|                 |                     |   services.                    |\n|                 |                     | - Cilium's network             |\n|                 |                     |   connectivity will prevent an |\n|                 |                     |   attacker from observing the  |\n|                 |                     |   traffic intended for other   |\n|                 |                     |   workloads, or sending        |\n|                 |                     |   traffic that \"spoofs\" the    |\n|                 |                     |   identity of another pod,     |\n|                 |                     |   even if transparent          |\n|                 |                     |   encryption is not in use.    |\n|                 |                     |   Pods cannot send traffic     |\n|                 |                     |   that \"spoofs\" other pods due |\n|                 |                     |   to limits on the use of      |\n|                 |                     |   source IPs and limits on     |\n|                 |                     |   sending tunneled traffic.    |\n+-----------------+---------------------+--------------------------------+\n| Observability   | None                | Cilium's Hubble flow-event     |\n| data            |                     | observability can be used to   |\n|                 |                     | provide reliable audit of      |\n|                 |                     | the attacker's L3/L4 and L7    |\n|                 |                     | network connectivity.          |\n+-----------------+---------------------+--------------------------------+\n\n.. _bandwidth limitations: https://docs.cilium.io/en/stable/network/kubernetes/bandwidth-manager/\n\nRecommended Controls\n^^^^^^^^^^^^^^^^^^^^\n\n-  Kubernetes workloads should have `defined resource limits`_.\n   This will help in ensuring that Cilium is not starved of resources due to a misbehaving deployment in a cluster.\n-  Cilium can be given prioritized access to system resources either via\n   Kubernetes, cgroups, or other controls.\n-  Runtime security solutions such as `Tetragon`_ should be deployed to \n   ensure that container compromises can be detected as they occur.\n\n.. _defined resource limits: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n.. _Tetragon: https://github.com/cilium/tetragon\n\n.. _limited-privilege-host-attacker:\n\nLimited-privilege Host Attacker\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn this scenario, the attacker is someone with the ability to run\narbitrary code with direct access to the host PID or network namespace\n(or both), but without \"root\" privileges that would allow them to\ndisable Cilium components or undermine the eBPF and other kernel state\nCilium relies on.\n\nThis level of access could exist for a variety of reasons, including:\n\n-  Pods or other containers running in the host PID or network\n   namespace, but not with \"root\" privileges. This includes\n   ``hostNetwork: true`` and ``hostPID: true`` containers.\n-  Non-\"root\" SSH or other console access to a node.\n-  A containerized workload that has \"escaped\" the container namespace\n   but as a non-privileged user.\n\n.. image:: images/cilium_threat_model_non_privileged.png\n\nIn this case, an attacker would be able to bypass some of Cilium's\nnetwork controls, as described below:\n\n.. rst-class:: wrapped-table\n\n+-----------------+-------------------------+----------------------------+\n| **Threat        | **Identified STRIDE     | **Cilium security          |\n| surface**       | threats**               | benefits**                 |\n+=================+=========================+============================+\n| Cilium agent    | - If the non-privileged |                            |\n|                 |   attacker is able to   |                            |\n|                 |   access the container  |                            |\n|                 |   runtime and Cilium is |                            |\n|                 |   running as a          |                            |\n|                 |   container, the        |                            |\n|                 |   attacker will be able |                            |\n|                 |   to tamper with the    |                            |\n|                 |   Cilium agent running  |                            |\n|                 |   on the node.          |                            |\n|                 | - Denial of service is  |                            |\n|                 |   also possible via     |                            |\n|                 |   spawning workloads    |                            |\n|                 |   directly on the host. |                            |\n+-----------------+-------------------------+----------------------------+\n| Cilium          | Same as for the Cilium  |                            |\n| configuration   | agent.                  |                            |\n|                 |                         |                            |\n|                 |                         |                            |\n|                 |                         |                            |\n|                 |                         |                            |\n|                 |                         |                            |\n|                 |                         |                            |\n|                 |                         |                            |\n+-----------------+-------------------------+----------------------------+\n| Cilium eBPF     | Same as for the Cilium  |                            |\n| programs        | agent.                  |                            |\n|                 |                         |                            |\n|                 |                         |                            |\n|                 |                         |                            |\n|                 |                         |                            |\n|                 |                         |                            |\n|                 |                         |                            |\n|                 |                         |                            |\n+-----------------+-------------------------+----------------------------+\n| Network data    | Elevation of            | Cilium's network           |\n|                 | privilege: traffic      | connectivity will prevent  |\n|                 | sent by the attacker    | an attacker from observing |\n|                 | will no longer be       | the traffic intended for   |\n|                 | subject to Kubernetes   | other workloads, or        |\n|                 | or                      | sending traffic that       |\n|                 | container-networked     | spoofs the identity of     |\n|                 | Cilium network          | another pod, even if       |\n|                 | policies.               | transparent encryption is  |\n|                 | :ref:`Host-networked    | not in use.                |\n|                 | Cilium                  |                            |\n|                 | policies                |                            |\n|                 | <host_firewall>`        |                            |\n|                 | will continue to        |                            |\n|                 | apply. Other traffic    |                            |\n|                 | within the cluster      |                            |\n|                 | remains unaffected.     |                            |\n+-----------------+-------------------------+----------------------------+\n| Observability   | None                    | Cilium's Hubble flow-event |\n| data            |                         | observability can be used  |\n|                 |                         | to provide reliable audit  |\n|                 |                         | of the attacker's L3/L4    |\n|                 |                         | and L7 network             |\n|                 |                         | connectivity. Traffic sent |\n|                 |                         | by the attacker will be    |\n|                 |                         | attributed to the worker   |\n|                 |                         | node, and not to a         |\n|                 |                         | specific Kubernetes        |\n|                 |                         | workload.                  |\n+-----------------+-------------------------+----------------------------+\n\nRecommended Controls\n^^^^^^^^^^^^^^^^^^^^\n\nIn addition to the recommended controls against the :ref:`kubernetes-workload-attacker`:\n\n-  Container images should be regularly patched to reduce the chance of\n   compromise.\n-  Minimal container images should be used where possible.\n-  Host-level privileges should be avoided where possible.\n-  Ensure that the container users do not have access to the underlying\n   container runtime.\n\n.. _root-equivalent-host-attacker:\n\nRoot-equivalent Host Attacker\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA \"root\" privilege host attacker has full privileges to do everything on\nthe local host. This access could exist for several reasons, including:\n\n-  Root SSH or other console access to the Kubernetes worker node.\n-  A containerized workload that has escaped the container namespace as\n   a privileged user.\n-  Pods running with ``privileged: true`` or other significant\n   capabilities like ``CAP_SYS_ADMIN`` or ``CAP_BPF``.\n\n.. image:: images/cilium_threat_model_root.png\n\n.. rst-class:: wrapped-table\n\n+-------------------+--------------------------------------------------+\n| **Threat          | **Identified STRIDE threats**                    |\n| surface**         |                                                  |\n+===================+==================================================+\n| Cilium agent      | In this situation, all potential attacks covered |\n|                   | by STRIDE are possible. Of note:                 |\n|                   |                                                  |\n|                   | -  The attacker would be able to disable eBPF on |\n|                   |    the node, disabling Cilium's network and      |\n|                   |    runtime visibility and enforcement. All       |\n|                   |    further operations by the attacker will be    |\n|                   |    unlimited and unaudited.                      |\n|                   | -  The attacker would be able to observe network |\n|                   |    connectivity across all workloads on the      |\n|                   |    host.                                         |\n|                   | -  The attacker can spoof traffic from the node  |\n|                   |    such that it appears to come from pods        |\n|                   |    with any identity.                            |\n|                   | -  If the physical network allows ARP poisoning, |\n|                   |    or if any other attack allows a               |\n|                   |    compromised node to \"attract\" traffic         |\n|                   |    destined to other nodes, the attacker can     |\n|                   |    potentially intercept all traffic in the      |\n|                   |    cluster, even if this traffic is encrypted    |\n|                   |    using IPsec, since we use a cluster-wide      |\n|                   |    pre-shared key.                               |\n|                   | -  The attacker can also use Cilium's            |\n|                   |    credentials to :ref:`attack the Kubernetes    |\n|                   |    API server <kubernetes-api-server-attacker>`, |\n|                   |    as well as Cilium's :ref:`etcd key-value      |\n|                   |    store <kv-store-attacker>` (if in use).       |\n|                   | -  If the compromised node is running the        |\n|                   |    ``cilium-operator`` pod, the attacker         |\n|                   |    would be able to carry out denial of          |\n|                   |    service attacks against other nodes using     |\n|                   |    the ``cilium-operator`` service account       |\n|                   |    credentials found on the node.                |\n+-------------------+                                                  |\n| Cilium            |                                                  |\n| configuration     |                                                  |\n+-------------------+                                                  |\n| Cilium eBPF       |                                                  |\n| programs          |                                                  |\n+-------------------+                                                  |\n| Network data      |                                                  |\n+-------------------+                                                  |\n| Observability     |                                                  |\n| data              |                                                  |\n+-------------------+--------------------------------------------------+\n\nThis attack scenario emphasizes the importance of securing Kubernetes\nnodes, minimizing the permissions available to container workloads, and\nmonitoring for suspicious activity on the node, container, and API\nserver levels.\n\nRecommended Controls\n^^^^^^^^^^^^^^^^^^^^\n\nIn addition to the controls against a :ref:`limited-privilege-host-attacker`:\n\n-  Workloads with privileged access should be reviewed; privileged access should\n   only be provided to deployments if essential.\n-  Network policies should be configured to limit connectivity to workloads with\n   privileged access.\n-  Kubernetes audit logging should be enabled, with audit logs being sent to a\n   centralized external location for automated review.\n-  Detections should be configured to alert on suspicious activity.\n-  ``cilium-operator`` pods should not be scheduled on nodes that run regular\n   workloads, and should instead be configured to run on control plane nodes.\n\n.. _mitm-attacker:\n\nMan-in-the-middle Attacker\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn this scenario, our attacker has access to the underlying network\nbetween Kubernetes worker nodes, but not the Kubernetes worker nodes\nthemselves. This attacker may inspect, modify, or inject malicious\nnetwork traffic.\n\n.. image:: images/cilium_threat_model_mitm.png\n\nThe threat matrix for such an attacker is as follows:\n\n.. rst-class:: wrapped-table\n\n+------------------+---------------------------------------------------+\n| **Threat         | **Identified STRIDE threats**                     |\n| surface**        |                                                   |\n+==================+===================================================+\n| Cilium agent     | None                                              |\n+------------------+---------------------------------------------------+\n| Cilium           | None                                              |\n| configuration    |                                                   |\n+------------------+---------------------------------------------------+\n| Cilium eBPF      | None                                              |\n| programs         |                                                   |\n+------------------+---------------------------------------------------+\n| Network data     | - Without transparent encryption, an attacker     |\n|                  |   could inspect traffic between workloads in both |\n|                  |   overlay and native routing modes.               |\n|                  | - An attacker with knowledge of pod network       |\n|                  |   configuration (including pod IP addresses and   |\n|                  |   ports) could inject traffic into a cluster by   |\n|                  |   forging packets.                                |\n|                  | - Denial of service could occur depending on the  |\n|                  |   behavior of the attacker.                       |\n+------------------+---------------------------------------------------+\n| Observability    | - TLS is required for all connectivity between    |\n| data             |   Cilium components, as well as for exporting     |\n|                  |   data to other destinations, removing the        |\n|                  |   scope for spoofing or tampering.                |\n|                  | - Without transparent encryption, the attacker    |\n|                  |   could re-create the observability data as       |\n|                  |   available on the network level.                 |\n|                  | - Information leakage could occur via an attacker |\n|                  |   scraping Hubble Prometheus metrics. These       |\n|                  |   metrics are disabled by default, and            |\n|                  |   can contain sensitive information on network    |\n|                  |   flows.                                          |\n|                  | - Denial of service could occur depending on the  |\n|                  |   behavior of the attacker.                       |\n+------------------+---------------------------------------------------+\n\nRecommended Controls\n^^^^^^^^^^^^^^^^^^^^\n\n- :ref:`gsg_encryption` should be configured to ensure the confidentiality of\n  communication between workloads.\n- TLS should be configured for communication between the Prometheus\n  metrics endpoints and the Prometheus server.\n- Network policies should be configured such that only the Prometheus\n  server is allowed to scrape :ref:`Hubble metrics <metrics>` in particular.\n\n.. _network-attacker:\n\nNetwork Attacker\n~~~~~~~~~~~~~~~~\n\nIn our threat model, a generic network attacker has access to the same\nunderlying IP network as Kubernetes worker nodes, but is not inline\nbetween the nodes. The assumption is that this attacker is still able to\nsend IP layer traffic that reaches a Kubernetes worker node. This is a\nweaker variant of the man-in-the-middle attack described above, as the\nattacker can only inject traffic to worker nodes, but not see the\nreplies.\n\n.. image:: images/cilium_threat_model_network_attacker.png\n\nFor such an attacker, the threat matrix is as follows:\n\n.. rst-class:: wrapped-table\n\n+------------------+---------------------------------------------------+\n| **Threat         | **Identified STRIDE threats**                     |\n| surface**        |                                                   |\n+==================+===================================================+\n| Cilium agent     | None                                              |\n+------------------+---------------------------------------------------+\n| Cilium           | None                                              |\n| configuration    |                                                   |\n+------------------+---------------------------------------------------+\n| Cilium eBPF      | None                                              |\n| programs         |                                                   |\n+------------------+---------------------------------------------------+\n| Network data     | - An attacker with knowledge of pod network       |\n|                  |   configuration (including pod IP addresses and   |\n|                  |   ports) could inject traffic into a cluster by   |\n|                  |   forging packets.                                |\n|                  | - Denial of service could occur depending on the  |\n|                  |   behavior of the attacker.                       |\n+------------------+---------------------------------------------------+\n| Observability    | - Denial of service could occur depending on the  |\n| data             |   behavior of the attacker.                       |\n|                  | - Information leakage could occur via an attacker |\n|                  |   scraping Cilium or Hubble Prometheus metrics,   |\n|                  |   depending on the specific metrics enabled.      |\n+------------------+---------------------------------------------------+\n\nRecommended Controls\n^^^^^^^^^^^^^^^^^^^^\n\n- :ref:`gsg_encryption` should be configured to ensure the confidentiality of\n  communication between workloads.\n\n.. _kubernetes-api-server-attacker:\n\nKubernetes API Server Attacker\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis type of attack could be carried out by any user or code with\nnetwork access to the Kubernetes API server and credentials that allow\nKubernetes API requests. Such permissions would allow the user to read\nor manipulate the API server state (for example by changing CRDs).\n\nThis section is intended to cover any attack that might be exposed via\nKubernetes API server access, regardless of whether the access is full or\nlimited. \n\n.. image:: images/cilium_threat_model_api_server_attacker.png\n\nFor such an attacker, our threat matrix is as follows:\n\n.. rst-class:: wrapped-table\n\n+------------------+---------------------------------------------------+\n| **Threat         | **Identified STRIDE threats**                     |\n| surface**        |                                                   |\n+==================+===================================================+\n| Cilium agent     | - A Kubernetes API user with ``kubectl exec``     |\n|                  |   access to the pod running Cilium effectively    |\n|                  |   becomes a :ref:`root-equivalent host            |\n|                  |   attacker <root-equivalent-host-attacker>`,      |\n|                  |   since Cilium runs as a privileged pod.          |\n|                  | - An attacker with permissions to configure       |\n|                  |   workload settings effectively becomes a         |\n|                  |   :ref:`kubernetes-workload-attacker`.            |\n+------------------+---------------------------------------------------+\n| Cilium           | The ability to modify the ``Cilium*``             |\n| configuration    | CustomResourceDefinitions, as well as any         |\n|                  | CustomResource from Cilium, in the cluster could  |\n|                  | have the following effects:                       |\n|                  |                                                   |\n|                  | -  The ability to create or modify CiliumIdentity |\n|                  |    and CiliumEndpoint or CiliumEndpointSlice      |\n|                  |    resources would allow an attacker to tamper    |\n|                  |    with the identities of pods.                   |\n|                  | -  The ability to delete Kubernetes or Cilium     |\n|                  |    NetworkPolicies would remove policy            |\n|                  |    enforcement.                                   |\n|                  | -  Creating a large number of CiliumIdentity      |\n|                  |    resources could result in denial of service.   |\n|                  | -  Workloads external to the cluster could be     |\n|                  |    added to the network.                          |\n|                  | -  Traffic routing settings between workloads     |\n|                  |    could be modified                              |\n|                  |                                                   |\n|                  | The cumulative effect of such actions could       |\n|                  | result in the escalation of a single-node         |\n|                  | compromise into a multi-node compromise.          |\n+------------------+---------------------------------------------------+\n| Cilium eBPF      | An attacker with ``kubectl exec`` access to the   |\n| programs         | Cilium agent pod will be able to modify eBPF      |\n|                  | programs.                                         |\n+------------------+---------------------------------------------------+\n| Network data     | Privileged Kubernetes API server access (``exec`` |\n|                  | access to Cilium pods or access to view           |\n|                  | Kubernetes secrets) could allow an attacker to    |\n|                  | access the pre-shared key used for IPsec. When    |\n|                  | used by a :ref:`man-in-the-middle                 |\n|                  | attacker <mitm-attacker>`, this                   |\n|                  | could undermine the confidentiality and integrity |\n|                  | of workload communication.                        |\n|                  | |br| |br|                                         |\n|                  | Depending on the attacker's level of access, the  |\n|                  | ability to spoof identities or tamper with policy |\n|                  | enforcement could also allow them to view network |\n|                  | data.                                             |\n+------------------+---------------------------------------------------+\n| Observability    | Users with permissions to configure workload      |\n| data             | settings could cause denial of service.           |\n+------------------+---------------------------------------------------+\n\nRecommended Controls\n^^^^^^^^^^^^^^^^^^^^\n\n- `Kubernetes RBAC`_ should be configured to only grant necessary permissions\n  to users and service accounts. Access to resources in the ``kube-system``\n  and ``cilium`` namespaces in particular should be highly limited.\n- Kubernetes audit logs should be used to automatically review requests\n  made to the API server, and detections should be configured to\n  alert on suspicious activity.\n\n.. _Kubernetes RBAC: https://kubernetes.io/docs/reference/access-authn-authz/rbac/\n\n.. _kv-store-attacker:\n\nCilium Key-value Store Attacker\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCilium can use :ref:`an external key-value store <k8s_install_etcd>`\nsuch as etcd to store state. In this scenario, we consider a user with\nnetwork access to the Cilium etcd endpoints and credentials to access\nthose etcd endpoints. The credentials to the etcd endpoints are stored\nas Kubernetes secrets; any attacker would first have to compromise these\nsecrets before gaining access to the key-value store.\n\n.. image:: images/cilium_threat_model_etcd_attacker.png\n\n.. rst-class:: wrapped-table\n\n+------------------+---------------------------------------------------+\n| **Threat         | **Identified STRIDE threats**                     |\n| surface**        |                                                   |\n+==================+===================================================+\n| Cilium agent     | None                                              |\n+------------------+---------------------------------------------------+\n| Cilium           | The ability to create or modify Identities or     |\n| configuration    | Endpoints in etcd would allow an attacker to      |\n|                  | \"give\" any pod any identity. The ability to spoof |\n|                  | identities in this manner might be used to        |\n|                  | escalate a single node compromise to a multi-node |\n|                  | compromise, for example by spoofing identities to |\n|                  | undermine ingress segmentation rules that would   |\n|                  | be applied on remote nodes.                       |\n+------------------+---------------------------------------------------+\n| Cilium eBPF      | None                                              |\n| programs         |                                                   |\n+------------------+---------------------------------------------------+\n| Network data     | An attacker would be able to modify the routing   |\n|                  | of traffic within a cluster, and as a consequence |\n|                  | gain the privileges of a :ref:`mitm-attacker`.    |\n|                  |                                                   |\n+------------------+---------------------------------------------------+\n| Observability    | None                                              |\n| data             |                                                   |\n+------------------+---------------------------------------------------+\n\nRecommended Controls\n^^^^^^^^^^^^^^^^^^^^\n\n-  The ``etcd`` instance deployed to store Cilium configuration should be independent\n   of the instance that is typically deployed as part of configuring a Kubernetes\n   cluster. This separation reduces the risk of a Cilium ``etcd`` compromise\n   leading to further cluster-wide impact.\n-  Kubernetes RBAC controls should be applied to restrict access to Kubernetes\n   secrets.\n-  Kubernetes audit logs should be used to detect access to secret data and\n   alert if such access is suspicious.\n\nHubble Data Attacker\n~~~~~~~~~~~~~~~~~~~~\n\nThis is an attacker with network reachability to Kubernetes worker\nnodes, or other systems that store or expose Hubble data, with the goal\nof gaining access to potentially sensitive Hubble flow or process data.\n\n.. image:: images/cilium_threat_model_hubble_attacker.png\n\n.. rst-class:: wrapped-table\n\n+------------------+---------------------------------------------------+\n| **Threat         | **Identified STRIDE threats**                     |\n| surface**        |                                                   |\n+==================+===================================================+\n| Cilium pods      | None                                              |\n+------------------+---------------------------------------------------+\n| Cilium           | None                                              |\n| configuration    |                                                   |\n+------------------+---------------------------------------------------+\n| Cilium eBPF      | None                                              |\n| programs         |                                                   |\n+------------------+---------------------------------------------------+\n| Network data     | None                                              |\n+------------------+---------------------------------------------------+\n| Observability    | None, assuming correct configuration of the       |\n| data             | following:                                        |\n|                  |                                                   |\n|                  | -  Network policy to limit access to              |\n|                  |    ``hubble-relay`` or ``hubble-ui`` services     |\n|                  | -  Limited access to ``cilium``,                  |\n|                  |    ``hubble-relay``, or ``hubble-ui`` pods        |\n|                  | -  TLS for external data export                   |\n|                  | -  Security controls at the destination of any    |\n|                  |    exported data                                  |\n+------------------+---------------------------------------------------+\n\nRecommended Controls\n^^^^^^^^^^^^^^^^^^^^\n\n-  Network policies should limit access to the ``hubble-relay`` and\n   ``hubble-ui`` services\n-  Kubernetes RBAC should be used to limit access to any ``cilium-*``\n   or ``hubble-`*`` pods\n-  TLS should be configured for access to the Hubble Relay API and Hubble UI\n-  TLS should be correctly configured for any data export\n-  The destination data stores for exported data should be secured (such\n   as by applying encryption at rest and cloud provider specific RBAC\n   controls, for example)\n\nOverall Recommendations\n-----------------------\n\nTo summarize the recommended controls to be used when configuring a\nproduction Kubernetes cluster with Cilium:\n\n#. Ensure that Kubernetes roles are scoped correctly to the requirements of your\n   users, and that service account permissions for pods are tightly scoped to\n   the needs of the workloads. In particular, access to sensitive namespaces,\n   ``exec`` actions, and Kubernetes secrets should all be highly controlled.\n#. Use resource limits for workloads where possible to reduce the chance of\n   denial of service attacks.\n#. Ensure that workload privileges and capabilities are only granted when\n   essential to the functionality of the workload, and ensure that specific\n   controls to limit and monitor the behavior of the workload are in place.\n#. Use :ref:`network policies <network_policy>` to ensure that network traffic in Kubernetes is segregated.\n#. Use :ref:`gsg_encryption` in Cilium to ensure that communication between\n   workloads is secured.\n#. Enable Kubernetes audit logging, forward the audit logs to a centralized\n   monitoring platform, and define alerting for suspicious activity.\n#. Enable TLS for access to any externally-facing services, such as Hubble Relay\n   and Hubble UI.\n#. Use `Tetragon`_ as a runtime security solution to rapidly detect unexpected\n   behavior within your Kubernetes cluster.\n\nIf you have questions, suggestions, or would like to help improve Cilium's security\nposture, reach out to security@cilium.io.\n\n.. |br| raw:: html\n\n      <br>\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/security/threat-model.rst",
  "extracted_at": "2025-09-03T01:13:28.755229Z"
}
{
  "url": "file:///tmp/cilium-repo/Documentation/security/aws.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _aws_metadata_with_policy:\n\n***********************************************\nLocking Down External Access Using AWS Metadata\n***********************************************\n\nThis document serves as an introduction to using Cilium to enforce policies\nbased on AWS metadata. It provides a detailed walk-through of running a single-node\nCilium environment on your machine. It is designed to take 15-30 minutes\nfor users with some experience running Kubernetes.\n\n\nSetup Cilium\n============\n\nThis guide will work with any approach to installing Cilium, including minikube,\nas long as the cilium-operator pod in the deployment can reach the AWS API server\nHowever, since the most common use of this mechanism is for Kubernetes clusters\nrunning in AWS, we recommend trying it out along with the guide: :ref:`k8s_install_quick` .\n\nCreate AWS secrets\n==================\n\nBefore installing Cilium, a new Kubernetes Secret with the AWS Tokens needs to\nbe added to your Kubernetes cluster. This Secret will allow Cilium to gather\ninformation from the AWS API which is needed to implement ToGroups policies.\n\nAWS Access keys and IAM role\n------------------------------\n\nTo create a new access token the `following guide can be used\n<https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html>`_.\nThese keys need to have certain permissions set:\n\n.. code-block:: javascript\n\n    {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Effect\": \"Allow\",\n                \"Action\": \"ec2:Describe*\",\n                \"Resource\": \"*\"\n            }\n        ]\n    }\n\nAs soon as you have the access tokens, the following secret needs to be added,\nwith each empty string replaced by the associated value as a base64-encoded string:\n\n\n.. code-block:: yaml\n    :name: cilium-secret.yaml\n\n    apiVersion: v1\n    kind: Secret\n    metadata:\n      name: cilium-aws\n      namespace: kube-system\n    type: Opaque\n    data:\n      AWS_ACCESS_KEY_ID: \"\"\n      AWS_SECRET_ACCESS_KEY: \"\"\n      AWS_DEFAULT_REGION: \"\"\n\nThe base64 command line utility can be used to generate each value, for example:\n\n.. code-block:: shell-session\n\n    $ echo -n \"eu-west-1\"  | base64\n    ZXUtd2VzdC0x\n\nThis secret stores the AWS credentials, which will be used to connect the AWS\nAPI.\n\n.. code-block:: shell-session\n\n    $ kubectl create -f cilium-secret.yaml\n\nTo validate that the credentials are correct, the following pod can be created\nfor debugging purposes:\n\n.. code-block:: yaml\n\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: testing-aws-pod\n      namespace: kube-system\n    spec:\n      containers:\n      - name: aws-cli\n        image: mesosphere/aws-cli\n        command: ['sh', '-c', 'sleep 3600']\n        env:\n          - name: AWS_ACCESS_KEY_ID\n            valueFrom:\n              secretKeyRef:\n                name: cilium-aws\n                key: AWS_ACCESS_KEY_ID\n                optional: true\n          - name: AWS_SECRET_ACCESS_KEY\n            valueFrom:\n              secretKeyRef:\n                name: cilium-aws\n                key: AWS_SECRET_ACCESS_KEY\n                optional: true\n          - name: AWS_DEFAULT_REGION\n            valueFrom:\n              secretKeyRef:\n                name: cilium-aws\n                key: AWS_DEFAULT_REGION\n                optional: true\n\nTo list all of the available AWS instances, the following command can be used:\n\n.. code-block:: shell-session\n\n   $ kubectl  -n kube-system exec -ti testing-aws-pod -- aws ec2 describe-instances\n\nOnce the secret has been created and validated, the cilium-operator pod must be\nrestarted in order to pick up the credentials in the secret.\nTo do this, identify and delete the existing cilium-operator pod, which will be\nrecreated automatically:\n\n.. code-block:: shell-session\n\n    $ kubectl get pods -l name=cilium-operator -n kube-system\n    NAME                              READY   STATUS    RESTARTS   AGE\n    cilium-operator-7c9d69f7c-97vqx   1/1     Running   0          36h\n\n    $ kubectl delete pod cilium-operator-7c9d69f7c-97vqx\n\n\n\nIt is important for this demo that ``coredns`` is working correctly. To know the\nstatus of ``coredns`` you can run the following command:\n\n.. code-block:: shell-session\n\n    $ kubectl get deployment -l k8s-app=kube-dns -n kube-system\n    NAME       DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\n    coredns    2         2         2            2           13h\n\nWhere at least one pod should be available.\n\nConfigure AWS Security Groups\n=============================\n\nCilium's AWS Metadata filtering capability enables explicit whitelisting\nof communication between a subset of pods (identified by Kubernetes labels)\nwith a set of destination EC2 ENIs (identified by membership in an AWS security group).\n\nIn this example, the destination EC2 elastic network interfaces are attached to\nEC2 instances that are members of a single AWS security group ('sg-0f2146100a88d03c3').\nPods with label ``class=xwing`` should only be able to make connections outside the\ncluster to the destination network interfaces in that security group.\n\nTo enable this, the VMs acting as Kubernetes worker nodes must be able to\nsend traffic to the destination VMs that are being accessed by pods.  One approach\nfor achieving this is to put all Kubernetes worker VMs in a single 'k8s-worker'\nsecurity group, and then ensure that any security group that is referenced in a\nCilium toGroups policy has an allow all ingress rule (all ports) for connections from the\n'k8s-worker' security group.  Cilium filtering will then ensure that the only pods allowed\nby policy can reach the destination VMs.\n\nCreate a sample policy\n======================\n\nDeploy a demo application:\n----------------------------\n\nIn this case we're going to use a demo application that is used in other guides.\nThese manifests will create three microservices applications: *deathstar*,\n*tiefighter*, and *xwing*. In this case, we are only going to use our *xwing*\nmicroservice to secure communications to existing AWS instances.\n\n.. parsed-literal::\n\n    $ kubectl create -f \\ |SCM_WEB|\\/examples/minikube/http-sw-app.yaml\n    service \"deathstar\" created\n    deployment \"deathstar\" created\n    deployment \"tiefighter\" created\n    deployment \"xwing\" created\n\n\nKubernetes will deploy the pods and service in the background. Running ``kubectl\nget pods,svc`` will inform you about the progress of the operation.  Each pod\nwill go through several states until it reaches ``Running`` at which point the\npod is ready.\n\n.. code-block:: shell-session\n\n    $ kubectl get pods,svc\n    NAME                             READY     STATUS    RESTARTS   AGE\n    po/deathstar-76995f4687-2mxb2    1/1       Running   0          1m\n    po/deathstar-76995f4687-xbgnl    1/1       Running   0          1m\n    po/tiefighter                    1/1       Running   0          1m\n    po/xwing                         1/1       Running   0          1m\n\n    NAME             TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE\n    svc/deathstar    ClusterIP   10.109.254.198   <none>        80/TCP    3h\n    svc/kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP   3h\n\nPolicy Language:\n-----------------\n\n**ToGroups** rules can be used to define policy in relation to cloud providers, like AWS.\n\n.. code-block:: yaml\n\n    ---\n    kind: CiliumNetworkPolicy\n    apiVersion: cilium.io/v2\n    metadata:\n      name: to-groups-sample\n      namespace: default\n    spec:\n      endpointSelector:\n        matchLabels:\n          org: alliance\n          class: xwing\n      egress:\n      - toPorts:\n        - ports:\n          - port: '80'\n            protocol: TCP\n        toGroups:\n        - aws:\n            securityGroupsIds:\n            - 'sg-0f2146100a88d03c3'\n\nThis policy allows traffic from pod *xwing* to any AWS elastic network interface\nin the security group with ID ``sg-0f2146100a88d03c3``.\n\nValidate that derived policy is in place\n----------------------------------------\n\nEvery time that a new policy with ToGroups rules is added, an equivalent policy\n(also called \"derivative policy\"), will be created. This policy will contain the\nset of CIDRs that correspond to the specification in ToGroups, e.g., the IPs of\nall network interfaces that are part of a specified security group. The list of\nIPs is updated periodically.\n\n.. code-block:: shell-session\n\n    $ kubectl get cnp\n    NAME                                                             AGE\n    to-groups-sample                                                 11s\n    to-groups-sample-togroups-044ba7d1-f491-11e8-ad2e-080027d2d952   10s\n\nEventually, the derivative policy will contain IPs in the ToCIDR section:\n\n.. code-block:: shell-session\n\n   $ kubectl get cnp to-groups-sample-togroups-044ba7d1-f491-11e8-ad2e-080027d2d952\n\n\n.. code-block:: yaml\n\n    apiVersion: cilium.io/v2\n    kind: CiliumNetworkPolicy\n    metadata:\n      creationTimestamp: 2018-11-30T11:13:52Z\n      generation: 1\n      labels:\n        io.cilium.network.policy.kind: derivative\n        io.cilium.network.policy.parent.uuid: 044ba7d1-f491-11e8-ad2e-080027d2d952\n      name: to-groups-sample-togroups-044ba7d1-f491-11e8-ad2e-080027d2d952\n      namespace: default\n      ownerReferences:\n      - apiVersion: cilium.io/v2\n        blockOwnerDeletion: true\n        kind: CiliumNetworkPolicy\n        name: to-groups-sample\n        uid: 044ba7d1-f491-11e8-ad2e-080027d2d952\n      resourceVersion: \"34853\"\n      selfLink: /apis/cilium.io/v2/namespaces/default/ciliumnetworkpolicies/to-groups-sample-togroups-044ba7d1-f491-11e8-ad2e-080027d2d952\n      uid: 04b289ba-f491-11e8-ad2e-080027d2d952\n    specs:\n    - egress:\n      - toCIDRSet:\n        - cidr: 34.254.113.42/32\n        - cidr: 172.31.44.160/32\n        toPorts:\n        - ports:\n          - port: \"80\"\n            protocol: TCP\n      endpointSelector:\n        matchLabels:\n          any:class: xwing\n          any:org: alliance\n          k8s:io.kubernetes.pod.namespace: default\n      labels:\n      - key: io.cilium.k8s.policy.name\n        source: k8s\n        value: to-groups-sample\n      - key: io.cilium.k8s.policy.uid\n        source: k8s\n        value: 044ba7d1-f491-11e8-ad2e-080027d2d952\n      - key: io.cilium.k8s.policy.namespace\n        source: k8s\n        value: default\n      - key: io.cilium.k8s.policy.derived-from\n        source: k8s\n        value: CiliumNetworkPolicy\n    status:\n      nodes:\n        k8s1:\n          enforcing: true\n          lastUpdated: 2018-11-30T11:28:03.907678888Z\n          localPolicyRevision: 28\n          ok: true\n\nThe derivative rule should contain the following information:\n\n- *metadata.OwnerReferences*: that contains the information about the ToGroups\n  policy.\n\n- *specs.Egress.ToCIDRSet*:  the list of private and public IPs of the instances\n  that correspond to the spec of the parent policy.\n\n- *status*: whether or not the policy is enforced yet, and when the policy was\n  last updated.\n\nThe endpoint status for the *xwing* should have policy enforcement\nenabled only for egress connectivity:\n\n.. code-block:: shell-session\n\n    $ kubectl exec -q -it -n kube-system cilium-85vtg -- cilium-dbg endpoint get 23453 -o jsonpath='{$[0].status.policy.realized.policy-enabled}'\n    egress\n\nIn this example, *xwing* pod can only connect to ``34.254.113.42/32`` and\n``172.31.44.160/32`` and connectivity to other IP will be denied.\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/security/aws.rst",
  "extracted_at": "2025-09-03T00:53:44.706252Z"
}
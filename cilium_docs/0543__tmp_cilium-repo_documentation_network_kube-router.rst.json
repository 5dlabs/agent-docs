{
  "url": "file:///tmp/cilium-repo/Documentation/network/kube-router.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n .. _kube-router: \n \n Using Kube-Router to Run BGP (deprecated) \n \n This guide explains how to configure Cilium and kube-router to co-operate to\nuse kube-router for BGP peering and route propagation and Cilium for policy\nenforcement and load-balancing. \n .. include:: ../beta.rst \n Deploy kube-router\n################## \n Download the kube-router DaemonSet template: \n .. code-block:: shell-session \n curl -LO https://raw.githubusercontent.com/cloudnativelabs/kube-router/v1.2/daemonset/generic-kuberouter-only-advertise-routes.yaml\n \n Open the file  generic-kuberouter-only-advertise-routes.yaml  and edit the\n args:  section. The following arguments are  required  to be set to\nexactly these values: \n .. code-block:: yaml \n - \"--run-router=true\"\n- \"--run-firewall=false\"\n- \"--run-service-proxy=false\"\n- \"--enable-cni=false\"\n- \"--enable-pod-egress=false\"\n \n The following arguments are  optional  and may be set according to your\nneeds.  For the purpose of keeping this guide simple, the following values are\nbeing used which require the least preparations in your cluster. Please see the\n kube-router user guide <https://github.com/cloudnativelabs/kube-router/blob/master/docs/user-guide.md> _\nfor more information. \n .. code-block:: yaml \n - \"--enable-ibgp=true\"\n- \"--enable-overlay=true\"\n- \"--advertise-cluster-ip=true\"\n- \"--advertise-external-ip=true\"\n- \"--advertise-loadbalancer-ip=true\"\n \n The following arguments are  optional  and should be set if you want BGP peering\nwith an external router. This is useful if you want externally routable Kubernetes\nPod and Service IPs. Note the values used here should be changed to\nwhatever IPs and ASNs are configured on your external router. \n .. code-block:: yaml \n - \"--cluster-asn=65001\"\n- \"--peer-router-ips=10.0.0.1,10.0.2\"\n- \"--peer-router-asns=65000,65000\"\n \n Apply the DaemonSet file to deploy kube-router and verify it has come up\ncorrectly: \n .. code-block:: shell-session \n $ kubectl apply -f generic-kuberouter-only-advertise-routes.yaml\n$ kubectl -n kube-system get pods -l k8s-app=kube-router\nNAME                READY     STATUS    RESTARTS   AGE\nkube-router-n6fv8   1/1       Running   0          10m\nkube-router-nj4vs   1/1       Running   0          10m\nkube-router-xqqwc   1/1       Running   0          10m\nkube-router-xsmd4   1/1       Running   0          10m\n \n Deploy Cilium\n############# \n In order for routing to be delegated to kube-router, tunneling/encapsulation\nmust be disabled. This is done by setting the  routing-mode=native  in the\nConfigMap  cilium-config  or by adjusting the DaemonSet to run the\n cilium-agent  with the argument  --routing-mode=native . Moreover, in the\nsame ConfigMap, we must explicitly set  ipam: kubernetes  since kube-router\npulls the pod CIDRs directly from K8s: \n .. code-block:: yaml \n # Encapsulation mode for communication between nodes\n# Possible values:\n#   - disabled\n#   - vxlan (default)\n#   - geneve\nrouting-mode: \"native\"\nipam: \"kubernetes\"\n \n You can then install Cilium according to the instructions in section\n:ref: ds_deploy . \n Ensure that Cilium is up and running: \n .. code-block:: shell-session \n $ kubectl -n kube-system get pods -l k8s-app=cilium\nNAME           READY     STATUS    RESTARTS   AGE\ncilium-fhpk2   1/1       Running   0          45m\ncilium-jh6kc   1/1       Running   0          44m\ncilium-rlx6n   1/1       Running   0          44m\ncilium-x5x9z   1/1       Running   0          45m\n \n Verify Installation\n################### \n Verify that kube-router has installed routes: \n .. code-block:: shell-session \n $ kubectl -n kube-system exec ds/cilium -- ip route list scope global\ndefault via 172.0.32.1 dev eth0 proto dhcp src 172.0.50.227 metric 1024\n10.2.0.0/24 via 10.2.0.172 dev cilium_host src 10.2.0.172\n10.2.1.0/24 via 172.0.51.175 dev eth0 proto 17\n10.2.2.0/24 dev tun-172011760 proto 17 src 172.0.50.227\n10.2.3.0/24 dev tun-1720186231 proto 17 src 172.0.50.227\n \n In the above example, we see three categories of routes that have been\ninstalled: \n \n Local PodCIDR:  This route points to all pods running on the host and makes\nthese pods available to\n \n 10.2.0.0/24 via 10.2.0.172 dev cilium_host src 10.2.0.172 \n \n \n BGP route:  This type of route is installed if kube-router determines that\nthe remote PodCIDR can be reached via a router known to the local host. It\nwill instruct pod to pod traffic to be forwarded directly to that router\nwithout requiring any encapsulation.\n \n 10.2.1.0/24 via 172.0.51.175 dev eth0 proto 17 \n \n \n IPIP tunnel route:   If no direct routing path exists, kube-router will fall\nback to using an overlay and establish an IPIP tunnel between the nodes.\n \n 10.2.2.0/24 dev tun-172011760 proto 17 src 172.0.50.227 \n 10.2.3.0/24 dev tun-1720186231 proto 17 src 172.0.50.227 \n \n \n \n .. include:: ../installation/k8s-install-validate.rst",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/kube-router.rst",
  "extracted_at": "2025-09-03T01:13:29.254468Z"
}
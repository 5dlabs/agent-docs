{
  "url": "file:///tmp/cilium-repo/Documentation/security/network/encryption.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _gsg_encryption:\n\n************************************\nTransparent Encryption\n************************************\n\nCilium supports the transparent encryption of Cilium-managed host traffic and\ntraffic between Cilium-managed endpoints either using IPsec or WireGuardÂ®:\n\n.. toctree::\n   :maxdepth: 1\n   :glob:\n\n   encryption-ipsec\n   encryption-wireguard\n\n.. admonition:: Video\n :class: attention\n\n  You can also see a demo of Cilium Transparent Encryption in `eCHO episode 79: Transparent Encryption with IPsec and WireGuard <https://www.youtube.com/watch?v=vj7M-t9MK6s>`__.\n\nKnown Issues and Workarounds\n============================\n\nEgress traffic to not yet discovered remote endpoints may be unencrypted\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo determine if a packet needs to be encrypted or not, transparent encryption\nrelies on the same mechanisms as policy enforcement to decide if the destination\nof an outgoing packet belongs to a Cilium-managed endpoint on a remote node.\nThis means that if an endpoint is allowed to initiate traffic to targets outside\nof the cluster, it is possible for that endpoint to send packets to arbitrary\nIP addresses before Cilium learns that a particular IP address belongs to a\nremote Cilium-managed endpoint or newly joined remote Cilium host in the cluster.\nIn such a case there is a time window during which Cilium will send out the\ninitial packets unencrypted, as it has to assume the destination IP address is\noutside of the cluster. Once the information about the newly created endpoint\nhas propagated in the cluster and Cilium knows that the IP address is an\nendpoint on a remote node, it will start encrypting packets using the encryption\nkey of the remote node.\n\nOne workaround for this issue is to ensure that the endpoint is not allowed to\nsend unencrypted traffic to arbitrary targets outside of the cluster. This can\nbe achieved by defining an egress policy which either completely disallows\ntraffic to ``reserved:world`` identities, or only allows egress traffic\nto addresses outside of the cluster to a certain subset of trusted IP\naddresses using ``toCIDR``, ``toCIDRSet`` and ``toFQDN`` rules.\nSee :ref:`policy_examples` for more details about how to write network\npolicies that restrict egress traffic to certain endpoints.\n\nAnother way to mitigate this issue is to set ``encryption.strictMode.enabled``\nto ``true`` and the expected pod CIDR as ``encryption.strictMode.cidr``.\nThis encryption strict mode enforces that traffic exiting a node\nto the set CIDR is always encrypted. Be aware that information\nabout new pod endpoints must propagate to the node before the node can send\ntraffic to them.\n\nEncryption strict mode has the following limitations:\n\n- Only WireGuard encryption is supported.\n- The pod CIDR and therefore the encryption strict mode CIDR must be IPv4.\n  IPv6 traffic is not protected by the strict mode and can be leaked.\n- To disable all dynamic lookups, you must use direct routing mode and the\n  node CIDR and pod CIDR must not overlap. Otherwise,\n  ``encryption.strictMode.allowRemoteNodeIdentities`` must be set to ``true``.\n  This allows unencrypted traffic sent from or to an IP address\n  associated with a node identity.\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/security/network/encryption.rst",
  "extracted_at": "2025-09-03T01:13:28.734373Z"
}
{
  "url": "file:///tmp/cilium-repo/Documentation/network/servicemesh/ingress.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n .. _gs_ingress: \n \n Kubernetes Ingress Support \n \n Cilium uses the standard  Kubernetes Ingress _ resource definition, with\nan  ingressClassName  of  cilium . This can be used for path-based\nrouting and for TLS termination. For backwards compatibility, the\n kubernetes.io/ingress.class  annotation with value of  cilium \nis also supported. \n .. Note:: \n The ingress controller creates a Service of LoadBalancer type, so\nyour environment will need to support this.\n \n Cilium allows you to specify load balancer mode for the Ingress resource: \n \n dedicated : The Ingress controller will create a dedicated loadbalancer\nfor the Ingress. \n shared : The Ingress controller will use a shared loadbalancer for all\nIngress resources. \n \n Each load balancer mode has its own benefits and drawbacks. The shared mode saves\nresources by sharing a single LoadBalancer config across all Ingress resources in\nthe cluster, while the dedicated mode can help to avoid potential conflicts (e.g.\npath prefix) between resources. \n .. Note:: \n It is possible to change the load balancer mode for an Ingress resource.\nWhen the mode is changed, active connections to backends of the Ingress\nmay be terminated during the reconfiguration due to a new load balancer\nIP address being assigned to the Ingress resource.\n \n This is a step-by-step guide on how to enable the Ingress Controller in\nan existing K8s cluster with Cilium installed. \n .. _Kubernetes Ingress: https://kubernetes.io/docs/concepts/services-networking/ingress/ \n Prerequisites\n############# \n \n Cilium must be configured with the kube-proxy replacement, using\n kubeProxyReplacement=true . For more information, see :ref: kube-proxy replacement <kubeproxy-free> . \n Cilium must be configured with the L7 proxy enabled using  l7Proxy=true \n(enabled by default). \n By default, the Ingress controller creates a Service of LoadBalancer type,\nso your environment will need to support this. Alternatively, you can change\nthis to NodePort or, since Cilium 1.16+, directly expose the Cilium L7 proxy\non the :ref: host network<gs_ingress_host_network_mode> . \n \n .. include:: installation.rst \n .. include:: ingress-reference.rst \n Ingress Path Types and Precedence \n \n The Ingress specification supports three types of paths: \n \n Exact  - match the given path exactly. \n Prefix  - match the URL path prefix split by  / . The last path segment must\nmatch the whole segment - if you configure a Prefix path of  /foo/bar ,\n /foo/bar/baz  will match, but  /foo/barbaz  will not. \n ImplementationSpecific  - Interpretation of the Path is up to the IngressClass.\n In Cilium's case, we define ImplementationSpecific to be \"Regex\" , so Cilium will\ninterpret any given path as a regular expression and program Envoy accordingly.\nNotably, some other implementations have ImplementationSpecific mean \"Prefix\",\nand in those cases, Cilium will treat the paths differently. (Since a path like\n /foo/bar  contains no regex characters, when it is configured in Envoy as a\nregex, it will function as an  Exact  match instead). \n \n When multiple path types are configured on an Ingress object, Cilium will configure\nEnvoy with the matches in the following order: \n #. Exact\n#. ImplementationSpecific (that is, regular expression)\n#. Prefix\n#. The  /  Prefix match has special handling and always goes last. \n Within each of these path types, the paths are sorted in decreasing order of string\nlength. \n If you do use ImplementationSpecific regex support, be careful with using the\n *  operator, since it will increase the length of the regex, but may match\nanother, shorter option. \n For example, if you have two ImplementationSpecific paths,  /impl , and  /impl.* ,\nthe second will be sorted ahead of the first in the generated config. But because\n *  is in use, the  /impl  match will never be hit, as any request to that\npath will match the  /impl.*  path first. \n See the :ref: Ingress Path Types <gs_ingress_path_types>  for more information. \n Supported Ingress Annotations \n \n .. list-table::\n:header-rows: 1 \n \n \n \n Name \n Description \n Default Value \n \n \n \n \n ingress.cilium.io/loadbalancer-mode \n | The loadbalancer mode for the ingress.\n| Allows a per ingress override\n| of the default set in the Helm value\n|  ingressController.loadbalancerMode .\n| Applicable values are  dedicated  and\n|  shared . \n |  dedicated \n| (from Helm chart) \n \n \n \n \n ingress.cilium.io/loadbalancer-class \n | The loadbalancer class for the ingress.\n| Only applicable when  loadbalancer-mode  is set to  dedicated . \n unspecified \n \n \n \n \n ingress.cilium.io/service-type \n | The Service type for dedicated Ingress.\n| Applicable values are  LoadBalancer \n| and  NodePort . \n LoadBalancer \n \n \n \n \n ingress.cilium.io/service-external-traffic-policy \n | The Service externalTrafficPolicy for dedicated\n| Ingress. Applicable values are  Cluster \n| and  Local . \n Cluster \n \n \n \n \n ingress.cilium.io/insecure-node-port \n | The NodePort to use for the HTTP Ingress.\n| Applicable only if  ingress.cilium.io/service-type \n| is  NodePort . If unspecified, a random\n| NodePort will be allocated by kubernetes. \n unspecified \n \n \n \n \n ingress.cilium.io/secure-node-port \n | The NodePort to use for the HTTPS Ingress.\n| Applicable only if  ingress.cilium.io/service-type \n| is  NodePort . If unspecified, a random\n| NodePort will be allocated by kubernetes. \n unspecified \n \n \n \n \n ingress.cilium.io/host-listener-port \n | The port to use for the Envoy listener on the host\n| network. Applicable and mandatory only for\n| dedicated Ingress and if :ref: host network mode<gs_ingress_host_network_mode>  is\n| enabled. \n 8080 \n \n \n \n \n ingress.cilium.io/tls-passthrough \n | Enable TLS Passthrough mode for this Ingress.\n| Applicable values are  enabled  and  disabled ,\n| although boolean-style values will also be\n| accepted.\n|\n| Note that some conditions apply to TLS\n| Passthrough Ingresses, due to how\n| TLS Passthrough works:\n| * A  host  field must be set in the Ingress\n| * Default backends are ignored\n| * Rules with paths other than  /  are ignored\n| If all the rules in an Ingress are ignored for\n| these reasons, no Envoy config will be generated\n| and the Ingress will have no effect.\n|\n| Note that this annotation is analogous to\n| the  ssl-passthrough  on other Ingress\n| controllers. \n disabled \n \n \n \n \n ingress.cilium.io/force-https \n | Enable enforced HTTPS redirects for this Ingress.\n| Applicable values are  enabled  and  disabled ,\n| although boolean-style values will also be\n| accepted.\n|\n| Note that if the annotation is not present, this\n| behavior will be controlled by the\n|  enforce-ingress-https  configuration\n| file setting (or  ingressController.enforceHttps \n| in Helm).\n|\n| Any host with TLS config will have redirects to\n| HTTPS configured for each match specified in the\n| Ingress. \n unspecified \n \n \n \n Additionally, cloud-provider specific annotations for the LoadBalancer Service\nare supported. \n By default, annotations with values beginning with: \n \n lbipam.cilium.io \n nodeipam.cilium.io \n service.beta.kubernetes.io \n service.kubernetes.io \n cloud.google.com \n \n will be copied from an Ingress object to the generated LoadBalancer Service objects. \n This setting is controlled by the Cilium Operator's  ingress-lb-annotation-prefixes \nconfig flag, and can be configured in Cilium's Helm  values.yaml \nusing the  ingressController.ingressLBAnnotationPrefixes  setting. \n Please refer to the  Kubernetes documentation <https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer> _\nfor more details. \n .. _gs_ingress_host_network_mode: \n Host network mode\n#################\n.. note::\nSupported since Cilium 1.16+ \n Host network mode allows you to expose the Cilium ingress controller (Envoy\nlistener) directly on the host network.\nThis is useful in cases where a LoadBalancer Service is unavailable, such\nas in development environments or environments with cluster-external\nloadbalancers. \n .. note::\n* Enabling the Cilium ingress controller host network mode automatically disables the LoadBalancer/NodePort type Service mode. They are mutually exclusive.\n* The listener is exposed on all interfaces ( 0.0.0.0  for IPv4 and/or  ::  for IPv6). \n Host network mode can be enabled via Helm: \n .. code-block:: yaml \n ingressController:\n  enabled: true\n  hostNetwork:\n    enabled: true\n \n Once enabled, host network ports can be specified with the following methods: \n \n Shared Ingress: Globally via Helm flags\n \n ingressController.hostNetwork.sharedListenerPort : Host network port to expose the Cilium ingress controller Envoy listener. The default port is  8080 . If you change it, you should choose a port number higher than  1023  (see  Bind to privileged port _). \n \n \n Dedicated Ingress: Per  Ingress  resource via annotations\n \n ingress.cilium.io/host-listener-port :  Host network port to expose the Cilium ingress controller Envoy listener. The default port is  8080  but it can only be used for a single  Ingress  resource as it needs to be unique per  Ingress  resource. You should choose a port higher than  1023  (see  Bind to privileged port _). This annotation is mandatory if the global Cilium ingress controller mode is configured to  dedicated  ( ingressController.loadbalancerMode ) or the ingress resource sets the  ingress.cilium.io/loadbalancer-mode  annotation to  dedicated  and multiple  Ingress  resources are deployed. \n \n \n \n The default behavior regarding shared or dedicated ingress can be configured via\n ingressController.loadbalancerMode . \n .. warning::\nBe aware that misconfiguration might result in port clashes. Configure unique ports that are still available on all Cilium Nodes where Cilium ingress controller Envoy listeners are exposed. \n Bind to privileged port \n \n By default, the Cilium L7 Envoy process does not have any Linux capabilities\nout-of-the-box and is therefore not allowed to listen on privileged ports. \n If you choose a port equal to or lower than  1023 , ensure that the Helm value\n envoy.securityContext.capabilities.keepCapNetBindService=true  is configured\nand to add the capability  NET_BIND_SERVICE  to the respective\n:ref: Cilium Envoy container via Helm values<envoy> : \n \n Standalone DaemonSet mode:  envoy.securityContext.capabilities.envoy \n Embedded mode:  securityContext.capabilities.ciliumAgent \n \n Configure the following Helm values to allow privileged port bindings in host\nnetwork mode: \n .. tabs:: \n .. group-tab:: Standalone DaemonSet mode\n\n  .. code-block:: yaml\n\n      ingressController:\n        enabled: true\n        hostNetwork:\n          enabled: true\n      envoy:\n        enabled: true\n        securityContext:\n          capabilities:\n            keepCapNetBindService: true\n            envoy:\n            # Add NET_BIND_SERVICE to the list (keep the others!)\n            - NET_BIND_SERVICE\n\n.. group-tab:: Embedded mode\n\n  .. code-block:: yaml\n\n      ingressController:\n        enabled: true\n        hostNetwork:\n          enabled: true\n      envoy:\n        securityContext:\n          capabilities:\n            keepCapNetBindService: true\n      securityContext:\n        capabilities:\n          ciliumAgent:\n          # Add NET_BIND_SERVICE to the list (keep the others!)\n          - NET_BIND_SERVICE\n \n Deploy Cilium Ingress listeners on subset of nodes \n \n The Cilium ingress controller Envoy listener can be exposed on a specific subset\nof nodes. This only works in combination with the host network mode and can be\nconfigured via a node label selector in the Helm values: \n .. code-block:: yaml \n ingressController:\n  enabled: true\n  hostNetwork:\n    enabled: true\n    nodes:\n      matchLabels:\n        role: infra\n        component: ingress\n \n This will deploy the Ingress Controller Envoy listener only on the Cilium Nodes\nmatching the configured labels. An empty selector selects all nodes and\ncontinues to expose the functionality on all Cilium nodes. \n Examples\n######## \n Please refer to one of the below examples on how to use and leverage\nCilium's Ingress features: \n .. toctree::\n:maxdepth: 1\n:glob: \n http\ningress-and-network-policy\npath-types \ngrpc\ntls-termination\ntls-default-certificate",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/servicemesh/ingress.rst",
  "extracted_at": "2025-09-03T01:13:29.160008Z"
}
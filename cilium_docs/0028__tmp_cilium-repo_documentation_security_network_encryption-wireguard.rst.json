{
  "url": "file:///tmp/cilium-repo/Documentation/security/network/encryption-wireguard.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n .. _encryption_wg: \n \n WireGuard Transparent Encryption \n \n This guide explains how to configure Cilium with transparent encryption of\ntraffic between Cilium-managed endpoints using  WireGuardÂ® <https://www.wireguard.com/> _. \n .. admonition:: Video\n:class: attention \n Aside from this guide, you can also watch  eCHO episode 3: WireGuard <https://www.youtube.com/watch?v=-awkPi3D60E&t=475s> __ on how\nWireGuard can encrypt network traffic. \n When WireGuard is enabled in Cilium, the agent running on each cluster node\nwill establish a secure WireGuard tunnel between it and all other known nodes\nin the cluster. Each node automatically creates its own encryption key-pair and\ndistributes its public key via the  network.cilium.io/wg-pub-key  annotation\nin the Kubernetes  CiliumNode  custom resource object. Each node's public key\nis then used by other nodes to decrypt and encrypt traffic from and to\nCilium-managed endpoints running on that node. \n Packets are not encrypted when they are destined to the same node from which\nthey were sent. This behavior is intended. Encryption would provide no benefits\nin that case, given that the raw traffic can be observed on the node anyway. \n The WireGuard tunnel endpoint is exposed on UDP port  51871  on each node. If\nyou run Cilium in an environment that requires firewall rules to enable\nconnectivity, you will have to ensure that all Cilium cluster nodes can reach\neach other via that port. \n .. note:: \n When running in tunnel routing mode, pod to pod traffic is encapsulated twice.\nIt is first sent to the VXLAN / Geneve tunnel interface, and then subsequently\nalso encapsulated by the WireGuard tunnel. \n Enable WireGuard in Cilium \n Before you enable WireGuard in Cilium, please ensure that the Linux distribution\nrunning on your cluster nodes has support for WireGuard in kernel mode\n(i.e.  CONFIG_WIREGUARD=m  on Linux 5.6 and newer, or via the out-of-tree\nWireGuard module on older kernels).\nSee  WireGuard Installation <https://www.wireguard.com/install/> _ for details\non how to install the kernel module on your Linux distribution. \n .. tabs:: \n .. group-tab:: Cilium CLI\n\n   If you are deploying Cilium with the Cilium CLI, pass the following\n   options:\n\n   .. parsed-literal::\n\n      cilium install |CHART_VERSION| \\\n         --set encryption.enabled=true \\\n         --set encryption.type=wireguard\n\n.. group-tab:: Helm\n\n   If you are deploying Cilium with Helm by following\n   :ref:`k8s_install_helm`, pass the following options:\n\n   .. parsed-literal::\n\n       helm install cilium |CHART_RELEASE| \\\\\n         --namespace kube-system \\\\\n         --set encryption.enabled=true \\\\\n         --set encryption.type=wireguard\n \n WireGuard may also be enabled manually by setting the\n enable-wireguard: true  option in the Cilium  ConfigMap  and restarting\neach Cilium agent instance. \n .. note:: \n When running with the CNI chaining (e.g., :ref: chaining_aws_cni ), set the\nHelm option  cni.enableRouteMTUForCNIChaining  to  true  to force Cilium\nto set a correct MTU for Pods. Otherwise, Pod traffic encrypted with\nWireGuard might get fragmented, which can lead to a network performance\ndegradation. \n Validate the Setup \n Run a  bash  shell in one of the Cilium pods with\n kubectl -n kube-system exec -ti ds/cilium -- bash  and execute the following\ncommands: \n \n \n Check that WireGuard has been enabled (number of peers should correspond to\na number of nodes subtracted by one): \n .. code-block:: shell-session \n cilium-dbg status | grep Encryption \n Encryption: Wireguard [cilium_wg0 (Pubkey: <..>, Port: 51871, Peers: 2)] \n \n \n Install tcpdump \n .. code-block:: shell-session \n apt-get update\napt-get -y install tcpdump \n \n \n Check that traffic is sent via the  cilium_wg0  tunnel device: \n .. code-block:: shell-session \n tcpdump -n -i cilium_wg0 \n tcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on cilium_wg0, link-type RAW (Raw IP), capture size 262144 bytes\n15:05:24.643427 IP 10.244.1.35.51116 > 10.244.3.78.8080: Flags [S], seq 476474887, win 64860, options [mss 1410,sackOK,TS val 648097391 ecr 0,nop,wscale 7], length 0\n15:05:24.644185 IP 10.244.3.78.8080 > 10.244.1.35.51116: Flags [S.], seq 4032860634, ack 476474888, win 64308, options [mss 1410,sackOK,TS val 4004186138 ecr 648097391,nop,wscale 7], length 0\n15:05:24.644238 IP 10.244.1.35.51116 > 10.244.3.78.8080: Flags [.], ack 1, win 507, options [nop,nop,TS val 648097391 ecr 4004186138], length 0\n15:05:24.644277 IP 10.244.1.35.51116 > 10.244.3.78.8080: Flags [P.], seq 1:81, ack 1, win 507, options [nop,nop,TS val 648097392 ecr 4004186138], length 80: HTTP: GET / HTTP/1.1\n15:05:24.644370 IP 10.244.3.78.8080 > 10.244.1.35.51116: Flags [.], ack 81, win 502, options [nop,nop,TS val 4004186139 ecr 648097392], length 0\n15:05:24.645536 IP 10.244.3.78.8080 > 10.244.1.35.51116: Flags [.], seq 1:1369, ack 81, win 502, options [nop,nop,TS val 4004186140 ecr 648097392], length 1368: HTTP: HTTP/1.1 200 OK\n15:05:24.645569 IP 10.244.1.35.51116 > 10.244.3.78.8080: Flags [.], ack 1369, win 502, options [nop,nop,TS val 648097393 ecr 4004186140], length 0\n15:05:24.645578 IP 10.244.3.78.8080 > 10.244.1.35.51116: Flags [P.], seq 1369:2422, ack 81, win 502, options [nop,nop,TS val 4004186140 ecr 648097392], length 1053: HTTP\n15:05:24.645644 IP 10.244.1.35.51116 > 10.244.3.78.8080: Flags [.], ack 2422, win 494, options [nop,nop,TS val 648097393 ecr 4004186140], length 0\n15:05:24.645752 IP 10.244.1.35.51116 > 10.244.3.78.8080: Flags [F.], seq 81, ack 2422, win 502, options [nop,nop,TS val 648097393 ecr 4004186140], length 0\n15:05:24.646431 IP 10.244.3.78.8080 > 10.244.1.35.51116: Flags [F.], seq 2422, ack 82, win 502, options [nop,nop,TS val 4004186141 ecr 648097393], length 0\n15:05:24.646484 IP 10.244.1.35.51116 > 10.244.3.78.8080: Flags [.], ack 2423, win 502, options [nop,nop,TS val 648097394 ecr 4004186141], length 0 \n \n \n Troubleshooting \n When troubleshooting dropped or unencrypted packets between pods, the following\ncommands can be helpful: \n .. code-block:: shell-session \n From node A: \n cilium-dbg debuginfo --output json | jq .encryption\n{\n\"wireguard\": {\n\"interfaces\": [\n{\n\"listen-port\": 51871,\n\"name\": \"cilium_wg0\",\n\"peer-count\": 1,\n\"peers\": [\n{\n\"allowed-ips\": [\n\"10.154.1.107/32\",\n\"10.154.1.195/32\"\n],\n\"endpoint\": \"192.168.61.12:51871\",\n\"last-handshake-time\": \"2021-05-05T12:31:24.418Z\",\n\"public-key\": \"RcYfs/GEkcnnv6moK5A1pKnd+YYUue21jO9I08Bv0zo=\"\n}\n],\n\"public-key\": \"DrAc2EloK45yqAcjhxerQKwoYUbLDjyrWgt9UXImbEY=\"\n}\n]\n}\n} \n From node B: \n cilium-dbg debuginfo --output json | jq .encryption\n{\n\"wireguard\": {\n\"interfaces\": [\n{\n\"listen-port\": 51871,\n\"name\": \"cilium_wg0\",\n\"peer-count\": 1,\n\"peers\": [\n{\n\"allowed-ips\": [\n\"10.154.2.103/32\",\n\"10.154.2.142/32\"\n],\n\"endpoint\": \"192.168.61.11:51871\",\n\"last-handshake-time\": \"2021-05-05T12:31:24.631Z\",\n\"public-key\": \"DrAc2EloK45yqAcjhxerQKwoYUbLDjyrWgt9UXImbEY=\"\n}\n],\n\"public-key\": \"RcYfs/GEkcnnv6moK5A1pKnd+YYUue21jO9I08Bv0zo=\"\n}\n]\n}\n} \n For pod to pod packets to be successfully encrypted and decrypted, the following\nmust hold: \n \n WireGuard public key of a remote node in the  peers[*].public-key  section\nmatches the actual public key of the remote node ( public-key  retrieved via\nthe same command on the remote node). \n peers[*].allowed-ips  should contain a list of pod IP addresses running\non the remote. \n \n Cluster Mesh \n WireGuard enabled Cilium clusters can be connected via :ref: Cluster Mesh . The\n clustermesh-apiserver  will forward the necessary WireGuard public keys\nautomatically to remote clusters.\nIn such a setup, it is important to note that all participating clusters must\nhave WireGuard encryption enabled, i.e. mixed mode is currently not supported.\nIn addition, UDP traffic between nodes of different clusters on port  51871 \nmust be allowed. \n .. _node-node-wg: \n Node-to-Node Encryption (beta) \n By default, WireGuard-based encryption only encrypts traffic between Cilium-managed\npods. To enable node-to-node encryption, which additionally also encrypts\nnode-to-node, pod-to-node and node-to-pod traffic, use the following configuration\noptions: \n .. tabs:: \n .. group-tab:: Cilium CLI\n\n   If you are deploying Cilium with the Cilium CLI, pass the following\n   options:\n\n   .. parsed-literal::\n\n      cilium install |CHART_VERSION| \\\n         --set encryption.enabled=true \\\n         --set encryption.type=wireguard \\\n         --set encryption.nodeEncryption=true\n\n.. group-tab:: Helm\n\n   If you are deploying Cilium with Helm by following\n   :ref:`k8s_install_helm`, pass the following options:\n\n   .. parsed-literal::\n\n       helm install cilium |CHART_RELEASE| \\\\\n         --namespace kube-system \\\\\n         --set encryption.enabled=true \\\\\n         --set encryption.type=wireguard \\\\\n         --set encryption.nodeEncryption=true\n \n .. warning:: \n Cilium automatically disables node-to-node encryption from and to\nKubernetes control-plane nodes, i.e. any node with the\n node-role.kubernetes.io/control-plane  label will opt-out of node-to-node\nencryption. \n This is done to ensure worker nodes are always able to communicate with the\nKubernetes API to update their WireGuard public keys. With node-to-node\nencryption enabled, the connection to the kube-apiserver would also be\nencrypted with WireGuard. This creates a bootstrapping problem where the\nconnection used to update the WireGuard public key is itself encrypted with\nthe public key about to be replaced.\nThis is problematic if a node needs to change its public key, for example\nbecause it generated a new private key after a node reboot or node\nre-provisioning. \n Therefore, by not encrypting the connection from and to the kube-apiserver\nhost network with WireGuard, we ensure that worker nodes are\nnever accidentally locked out from the control plane. Note that even if\nWireGuard node-to-node encryption is disabled on those nodes, the Kubernetes\ncontrol-plane itself is usually still encrypted by Kubernetes itself using\nmTLS and that pod-to-pod traffic for any Cilium-manged pods on the\ncontrol-plane nodes are also still encrypted via Cilium's WireGuard\nimplementation. \n The label selector for matching the control-plane nodes which shall not\nparticipate in node-to-node encryption can be configured using the\n node-encryption-opt-out-labels  ConfigMap option. It defaults to\n node-role.kubernetes.io/control-plane .\nYou may force node-to-node encryption from and to control-plane nodes by\nusing an empty label selector with that option. Note that doing so is not\nrecommended, as it will require you to always manually update a node's public\nkey in its corresponding  CiliumNode  CRD when a worker node's public key\nchanges, given that the worker node will be unable to do so itself. \n N/S load balancer traffic isn't encrypted when an intermediate node redirects\na request to a different node with the following load balancer configuration: \n \n LoadBalancer & NodePort XDP Acceleration \n Direct Server Return (DSR) in non-Geneve dispatch mode \n \n Egress Gateway replies are not encrypted when XDP Acceleration is enabled. \n Which traffic is encrypted \n The following table denotes which packets are encrypted with WireGuard depending\non the mode. Configurations or communication pairs not present in the following\ntable are not subject to encryption with WireGuard and therefore assumed to be unencrypted. \n +----------------+-------------------+----------------------+-----------------+\n| Origin         | Destination       | Configuration        | Encryption mode |\n+================+===================+======================+=================+\n| Pod            | remote Pod        | any                  | default         |\n+----------------+-------------------+----------------------+-----------------+\n| Pod            | remote Node       | any                  | node-to-node    |\n+----------------+-------------------+----------------------+-----------------+\n| Node           | remote Pod        | any                  | node-to-node    |\n+----------------+-------------------+----------------------+-----------------+\n| Node           | remote Node       | any                  | node-to-node    |\n+----------------+-------------------+----------------------+-----------------+\n|  Services                                                                 |\n+----------------+-------------------+----------------------+-----------------+\n| Pod            | remote Pod via    | any                  | default         |\n|                | ClusterIP Service |                      |                 |\n+----------------+-------------------+----------------------+-----------------+\n| Pod            | remote Pod via    | Socket LB            | default         |\n|                | non ClusterIP     |                      |                 |\n|                | Service (e.g.,    |                      |                 |\n|                | NodePort)         |                      |                 |\n+----------------+-------------------+----------------------+-----------------+\n| Pod            | remote Pod via    | kube-proxy           | node-to-node    |\n|                | non ClusterIP     |                      |                 |\n|                | Service           |                      |                 |\n+----------------+-------------------+----------------------+-----------------+\n| Client outside | remote Pod via    | KPR,                 | default         |\n| cluster        | Service           | overlay routing,     |                 |\n|                |                   | without DSR,         |                 |\n|                |                   | without XDP          |                 |\n+----------------+-------------------+----------------------+-----------------+\n| Client outside | remote Pod via    | native routing,      | node-to-node    |\n| cluster        | Service           | without XDP          |                 |\n+----------------+-------------------+----------------------+-----------------+\n| Client outside | remote Pod or     | DSR in Geneve mode,  | default         |\n| cluster        | remote Node via   | without XDP          |                 |\n|                | Service           |                      |                 |\n+----------------+-------------------+----------------------+-----------------+\n| Pod            | remote Pod via L7 | L7 Proxy / Ingress   | default         |\n|                | Proxy or L7       |                      |                 |\n|                | Ingress Service   |                      |                 |\n+----------------+-------------------+----------------------+-----------------+\n|  Egress Gateway                                                           |\n+----------------+-------------------+----------------------+-----------------+\n| Pod            |Egress Gateway node| Egress Gateway       | default         |\n+----------------+-------------------+----------------------+-----------------+\n| Egress Gateway | Pod               | Egress Gateway       | default         |\n| node           |                   | without XDP          |                 |\n+----------------+-------------------+----------------------+-----------------+ \n \n Pod : Cilium-managed K8s Pod running in non-host network namespace. \n Node : K8s host running Cilium, or Pod running in host network namespace\nmanaged by Cilium. \n Service : K8s Service (ClusterIP, NodePort, LoadBalancer, ExternalIP). \n Client outside cluster : Any client which runs outside K8s cluster.\nRequest between client and Node is not encrypted. Depending on Cilium\nconfiguration (see the table at the beginning of this section), it might be\nencrypted only between intermediate Node (which received client request first)\nand destination Node. \n \n Known Issues \n \n Packets may be dropped when configuring the WireGuard device leading to\nconnectivity issues. This happens when endpoints are added or removed or\nwhen node updates occur. In some cases this may lead to failed calls to\n sendmsg  and  sendto . See :gh-issue: 33159  for more details. \n \n Legal \n \"WireGuard\" is a registered trademark of Jason A. Donenfeld.",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/security/network/encryption-wireguard.rst",
  "extracted_at": "2025-09-03T01:13:28.740399Z"
}
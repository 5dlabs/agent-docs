{
  "url": "file:///tmp/cilium-repo/Documentation/network/concepts/ipam/crd.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _concepts_ipam_crd:\n\n##########\nCRD-Backed\n##########\n\nThe CRD-backed IPAM mode provides an extendable interface to control the IP\naddress management via a Kubernetes Custom Resource Definition (CRD). This\nallows to delegate IPAM to external operators or make it user configurable per\nnode.\n\n************\nArchitecture\n************\n\n.. image:: crd_arch.png\n    :align: center\n\nWhen this mode is enabled, each Cilium agent will start watching for a\nKubernetes custom resource ``ciliumnodes.cilium.io`` with a name matching the\nKubernetes node on which the agent is running.\n\nWhenever the custom resource is updated, the per node allocation pool is\nupdated with all addresses listed in the ``spec.ipam.available`` field. When an\nIP is removed that is currently allocated, the IP will continue to be used but\nwill not be available for re-allocation after release.\n\nUpon allocation of an IP in the allocation pool, the IP is added to the\n``status.ipam.inuse`` field.\n\n.. note::\n\n   The node status update is limited to run at most once every 15 seconds.\n   Therefore, if several pods are scheduled at the same time, the update of the\n   status section can lag behind.\n\n*************\nConfiguration\n*************\n\nThe CRD-backed IPAM mode is enabled by setting ``ipam: crd`` in the\n``cilium-config`` ConfigMap or by specifying the option ``--ipam=crd``. When\nenabled, the agent will wait for a ``CiliumNode`` custom resource matching the\nKubernetes node name to become available with at least one IP address listed as\navailable. When connectivity health-checking is enabled, at least two IP\naddresses must be available.\n\nWhile waiting, the agent will print the following log message:\n\n::\n\n\tWaiting for initial IP to become available in '<node-name>' custom resource\n\n\nFor a practical tutorial on how to enable CRD IPAM mode with Cilium, see the\nsection :ref:`gsg_ipam_crd`.\n\nPrivileges\n==========\n\nIn order for the custom resource to be functional, the following additional\nprivileges are required. These privileges are automatically granted when using\nthe standard Cilium deployment artifacts:\n\n.. code-block:: yaml\n\n\tapiVersion: rbac.authorization.k8s.io/v1\n\tkind: ClusterRole\n\tmetadata:\n\t  name: cilium\n\trules:\n\t- apiGroups:\n\t  - cilium.io\n\t  resources:\n\t  - ciliumnodes\n\t  - ciliumnodes/status\n\t  verbs:\n\t  - '*'\n\n**************\nCRD Definition\n**************\n\nThe CiliumNode custom resource is modeled after a standard Kubernetes resource\nand is split into a ``spec`` and ``status`` section:\n\n.. code-block:: go\n\n        type CiliumNode struct {\n                [...]\n\n                // Spec is the specification of the node\n                Spec NodeSpec `json:\"spec\"`\n\n                // Status it the status of the node\n                Status NodeStatus `json:\"status\"`\n        }\n\nIPAM Specification\n==================\n\nThe ``spec`` section embeds an IPAM specific field which allows to define the\nlist of all IPs which are available to the node for allocation:\n\n.. code-block:: go\n\n        // AllocationMap is a map of allocated IPs indexed by IP\n        type AllocationMap map[string]AllocationIP\n\n        // NodeSpec is the configuration specific to a node\n        type NodeSpec struct {\n                // [...]\n\n                // IPAM is the address management specification. This section can be\n                // populated by a user or it can be automatically populated by an IPAM\n                // operator\n                //\n                // +optional\n                IPAM IPAMSpec `json:\"ipam,omitempty\"`\n        }\n\n\t// IPAMSpec is the IPAM specification of the node\n\ttype IPAMSpec struct {\n                // Pool is the list of IPs available to the node for allocation. When\n                // an IP is used, the IP will remain on this list but will be added to\n                // Status.IPAM.InUse\n                //\n                // +optional\n                Pool AllocationMap `json:\"pool,omitempty\"`\n\t}\n\n\t// AllocationIP is an IP available for allocation or already allocated\n\ttype AllocationIP struct {\n\t\t// Owner is the owner of the IP, this field is set if the IP has been\n\t\t// allocated. It will be set to the pod name or another identifier\n\t\t// representing the usage of the IP\n\t\t//\n                // The owner field is left blank for an entry in Spec.IPAM.Pool\n                // and filled out as the IP is used and also added to\n                // Status.IPAM.InUse.\n\t\t//\n\t\t// +optional\n\t\tOwner string `json:\"owner,omitempty\"`\n\n\t\t// Resource is set for both available and allocated IPs, it represents\n\t\t// what resource the IP is associated with, e.g. in combination with\n\t\t// AWS ENI, this will refer to the ID of the ENI\n\t\t//\n\t\t// +optional\n\t\tResource string `json:\"resource,omitempty\"`\n\t}\n\nIPAM Status\n===========\n\nThe ``status`` section contains an IPAM specific field. The IPAM status reports\nall used addresses on that node:\n\n.. code-block:: go\n\n\t// NodeStatus is the status of a node\n\ttype NodeStatus struct {\n\t\t// [...]\n\n\t\t// IPAM is the IPAM status of the node\n\t\t//\n\t\t// +optional\n\t\tIPAM IPAMStatus `json:\"ipam,omitempty\"`\n\t}\n\n\t// IPAMStatus is the IPAM status of a node\n\ttype IPAMStatus struct {\n\t\t// InUse lists all IPs out of Spec.IPAM.Pool which have been\n\t\t// allocated and are in use.\n\t\t//\n\t\t// +optional\n\t\tInUse AllocationMap `json:\"used,omitempty\"`\n\t}\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/concepts/ipam/crd.rst",
  "extracted_at": "2025-09-03T01:13:29.216802Z"
}
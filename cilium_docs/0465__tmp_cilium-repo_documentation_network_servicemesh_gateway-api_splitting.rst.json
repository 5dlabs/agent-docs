{
  "url": "file:///tmp/cilium-repo/Documentation/network/servicemesh/gateway-api/splitting.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _gs_gateway_splitting:\n\n*************************\nTraffic Splitting Example\n*************************\n\nHTTP traffic splitting is the process of sending incoming traffic to multiple backend services, based on predefined weights or other criteria. \nThe Cilium Gateway API includes built-in support for traffic splitting, allowing users to easily distribute incoming traffic across multiple backend services. \nThis is very useful for canary testing or A/B scenarios.\n\nThis particular example uses the Gateway API to load balance incoming traffic to different backends, starting with the same weights before testing with a 99/1 weight distribution.\n\n.. include:: ../echo-app.rst\n\nDeploy the Cilium Gateway\n=========================\n\nYou can find an example Gateway and HTTPRoute definition in ``splitting.yaml``:\n\n.. literalinclude:: ../../../../examples/kubernetes/gateway/splitting.yaml\n     :language: yaml\n\nNotice the even 50/50 split between the two Services.\n\nDeploy the Gateway and the HTTPRoute:\n\n.. parsed-literal::\n\n    $ kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes/gateway/splitting.yaml\n\nThe preceding example creates a Gateway named ``cilium-gw`` that listens on port 80.\nA single route is defined and includes two different ``backendRefs`` (``echo-1`` and ``echo-2``) and weights associated with them.\n\n.. code-block:: shell-session\n\n    $ kubectl get gateway cilium-gw\n    NAME        CLASS    ADDRESS          PROGRAMMED   AGE\n    cilium-gw   cilium   172.18.255.200                8s\n\n.. Note::\n\n    Some providers like EKS use a fully-qualified domain name rather than an IP address.\n\nEven traffic split\n==================\n\nNow that the Gateway is ready, you can make HTTP requests to the services.\n\n.. code-block:: shell-session\n\n    $ GATEWAY=$(kubectl get gateway cilium-gw -o jsonpath='{.status.addresses[0].value}')\n    $ curl --fail -s http://$GATEWAY/echo\n\n    Hostname: echo-1-7d88f779b-m6r46\n\n    Pod Information:\n        node name:      kind-worker2\n        pod name:       echo-1-7d88f779b-m6r46\n        pod namespace:  default\n        pod IP: 10.0.2.15\n\n    Server values:\n        server_version=nginx: 1.12.2 - lua: 10010\n\n    Request Information:\n        client_address=10.0.2.252\n        method=GET\n        real path=/echo\n        query=\n        request_version=1.1\n        request_scheme=http\n        request_uri=http://172.18.255.200:8080/echo\n\n    Request Headers:\n        accept=*/*  \n        host=172.18.255.200  \n        user-agent=curl/7.81.0  \n        x-forwarded-proto=http  \n        x-request-id=ee152a07-2be2-4539-b74d-ebcebf912907  \n\n    Request Body:\n        -no body in request-\n\nNotice that the reply includes the name of the Pod that received the query. For example:\n\n.. code-block:: shell-session\n\n    Hostname: echo-2-5bfb6668b4-2rl4t\n\nRepeat the command several times.\nYou should see the reply balanced evenly across both Pods and Nodes.\nVerify that traffic is evenly split across multiple Pods by running a loop and counting the requests:\n\n.. code-block:: shell-session\n\n    while true; do curl -s -k \"http://$GATEWAY/echo\" >> curlresponses.txt ;done\n\nStop the loop with ``Ctrl+C``.\nVerify that the responses are more or less evenly distributed.\n\n.. code-block:: shell-session\n\n    $ cat curlresponses.txt| grep -c \"Hostname: echo-1\"\n    1221\n    $ cat curlresponses.txt| grep -c \"Hostname: echo-2\"\n    1162\n\nUneven (99/1) traffic split\n===========================\n\nUpdate the HTTPRoute weights, either by using ``kubectl edit httproute`` or by updating the value in the original manifest before reapplying it to. For example, set ``99`` for echo-1 and ``1`` for echo-2:\n\n.. code-block:: shell-session\n\n    backendRefs:\n    - kind: Service\n      name: echo-1\n      port: 8080\n      weight: 99\n    - kind: Service\n      name: echo-2\n      port: 8090\n      weight: 1\n\n\nVerify that traffic is unevenly split across multiple Pods by running a loop and counting the requests:\n\n.. code-block:: shell-session\n\n    while true; do curl -s -k \"http://$GATEWAY/echo\" >> curlresponses991.txt ;done\n\nStop the loop with ``Ctrl+C``.\nVerify that responses are more or less evenly distributed.\n\n.. code-block:: shell-session\n\n    $ cat curlresponses991.txt| grep -c \"Hostname: echo-1\"\n    24739\n    $ cat curlresponses991.txt| grep -c \"Hostname: echo-2\"\n    239\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/servicemesh/gateway-api/splitting.rst",
  "extracted_at": "2025-09-03T01:13:29.161064Z"
}
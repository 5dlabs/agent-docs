{
  "url": "file:///tmp/cilium-repo/Documentation/network/bgp-control-plane/bgp-control-plane-v1.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n .. _bgp_control_plane_v1: \n BGP Peering Policy ( Legacy )\n############################# \n .. warning::\n CiliumBGPPeeringPolicy  will be discontinued in future. Consider\nusing the new :ref: BGP APIs <bgp_control_plane_v2>  to configure the BGP Control Plane. \n Configure Peering \n .. code-block:: yaml \n apiVersion: \"cilium.io/v2alpha1\"\nkind: CiliumBGPPeeringPolicy\nmetadata:\nname: rack0\nspec:\nnodeSelector:\nmatchLabels:\nrack: rack0\nvirtualRouters:\n- localASN: 64512\nneighbors:\n- peerAddress: '10.0.0.1/32'\npeerASN: 64512 \n All BGP peering topology information is carried in a  CiliumBGPPeeringPolicy \nCRD. A  CiliumBGPPeeringPolicy  can be applied to one or more nodes based on\nits  nodeSelector  field. Only a single  CiliumBGPPeeringPolicy  can be\napplied to a node. If multiple policies match a node, Cilium clears all BGP\nsessions until only one policy matches the node. \n .. warning:: \n Applying another policy over an existing one will cause the BGP session to\nbe cleared and causes immediate connectivity disruption. It is strongly\nrecommended to test the policy in a staging environment before applying it\nto production. \n Each  CiliumBGPPeeringPolicy  defines one or more  virtualRouters . The\nvirtual router defines a BGP router instance which is uniquely identified by\nits  localASN . Each virtual router can have multiple  neighbors  defined.\nThe neighbor defines a BGP neighbor uniquely identified by its  peerAddress \nand  peerASN . When  localASN  and  peerASN  are the same, iBGP peering\nis used. When  localASN  and  peerASN  are different, eBGP peering is used. \n Specifying Router ID (IPv6 single-stack only)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \n When Cilium is running on an IPv4 or a dual-stack, the BGP Router ID is\nautomatically derived from the IPv4 address assigned to the node. When Cilium\nis running on an IPv6 single-stack cluster, the BGP Router ID must be\nconfigured manually. This can be done by setting the annotation on the\nKubernetes Node resource: \n .. code-block:: shell-session \n $ kubectl annotate node   cilium.io/bgp-virtual-router.64512=\"router-id=10.0.0.2\" \n Currently, you must set the annotation for each Node. In the future, automatic\nassignment of the Router ID may be supported. Follow  #30333 <https://github.com/cilium/cilium/issues/30333/> _ for updates. \n Validating Peering Status\n^^^^^^^^^^^^^^^^^^^^^^^^^ \n Once the  CiliumBGPPeeringPolicy  is applied, you can check the BGP peering\nstatus with the Cilium CLI with the following command: \n .. code-block:: shell-session \n $ cilium bgp peers\nNode                              Local AS   Peer AS   Peer Address     Session State   Uptime   Family         Received   Advertised\nnode0                             64512      64512     10.0.0.1         established     10s      ipv4/unicast   0          0\nipv6/unicast   0          0 \n Node Annotations \n A  CiliumBGPPeeringPolicy  can apply to multiple nodes. When a\n CiliumBGPPeeringPolicy  applies to one or more nodes each node will\ninstantiate one or more BGP routers as defined in  virtualRouters . However,\nthere are times when fine-grained control over an instantiated virtual router's\nconfiguration needs to take place. This can be accomplished by applying a\nKubernetes annotation to Kubernetes Node resources. \n A single annotation is used to specify a set of configuration attributes\nto apply to a particular virtual router instantiated on a particular\nhost. \n The syntax of the annotation is as follows: \n :: \n    cilium.io/bgp-virtual-router.{asn}=\"key=value,...\"\n \n The  {asn}  portion should be replaced by the virtual router's local ASN you\nwish to apply these configuration attributes to. Multiple option key/value\npairs can be specified by separating them with a comma. When duplicate keys are\ndefined with different values, the last key's value will be used. \n Overriding Router ID\n^^^^^^^^^^^^^^^^^^^^ \n When Cilium is running on an IPv4 single-stack or a dual-stack, the BGP Control\nPlane can use the IPv4 address assigned to the node as the BGP Router ID\nbecause Router ID is 32bit long, and we can rely on the uniqueness of the IPv4\naddress to make Router ID unique which is not the case for IPv6. Thus, when\nrunning in an IPv6 single-stack, or when the auto assignment of the Router ID\nis not desired, the administrator needs to manually define it. This can be\naccomplished by setting the  router-id  key in the annotation. \n .. code-block:: shell-session \n $ kubectl annotate node   cilium.io/bgp-virtual-router.{asn}=\"router-id=10.0.0.2\" \n Listening on the Local Port\n^^^^^^^^^^^^^^^^^^^^^^^^^^^ \n By default, the BGP Control Plane instantiates each virtual router without a\nlistening port. This means the BGP router can only initiate connections to the\nconfigured peers, but cannot accept incoming connections. This is the default\nbehavior because the BGP Control Plane is designed to function in environments\nwhere another BGP router (such as  Bird ) is running on the same node. When\nit is required to accept incoming connections, the  local-port  key can be\nused to specify the listening port. \n .. code-block:: shell-session \n $ kubectl annotate node   cilium.io/bgp-virtual-router.{asn}=\"local-port=179\" \n Advertising PodCIDRs \n BGP Control Plane can advertise PodCIDR prefixes of the nodes selected by the\n CiliumBGPPeeringPolicy  to the BGP peers. This allows the BGP peers to reach\nthe Pods directly without involving load balancers or NAT. There are two ways\nto advertise PodCIDRs depending on the IPAM mode setting. \n Kubernetes and ClusterPool IPAM\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \n When :ref: Kubernetes <k8s_hostscope>  or :ref: ClusterPool <ipam_crd_cluster_pool>  IPAM is used, set the\n virtualRouters[*].exportPodCIDR  field to true. \n .. code-block:: yaml \n apiVersion: \"cilium.io/v2alpha1\"\nkind: CiliumBGPPeeringPolicy\nmetadata:\nname: rack0\nspec:\nnodeSelector:\nmatchLabels:\nrack: rack0\nvirtualRouters:\n- localASN: 64512\nexportPodCIDR: true # <-- enable PodCIDR advertisement\nneighbors:\n- peerAddress: '10.0.0.1/32'\npeerASN: 64512 \n With this configuration, the BGP speaker on each node advertises the\nPodCIDR prefixes assigned to the local node. \n .. _bgp_control_plane_multipool_ipam: \n MultiPool IPAM\n^^^^^^^^^^^^^^ \n When :ref: MultiPool IPAM <ipam_crd_multi_pool>  is used, specify the\n virtualRouters[*].podIPPoolSelector  field. The  .podIPPoolSelector  field\nis a label selector that selects allocated CIDRs of  CiliumPodIPPool \nmatching the specified  .matchLabels  or  .matchExpressions . \n .. code-block:: yaml \n apiVersion: \"cilium.io/v2alpha1\"\nkind: CiliumBGPPeeringPolicy\nmetadata:\nname: rack0\nspec:\nnodeSelector:\nmatchLabels:\nrack: rack0\nvirtualRouters:\n- localASN: 64512\npodIPPoolSelector: # <-- select CiliumPodIPPool to advertise\nmatchLabels:\nenvironment: production\nneighbors:\n- peerAddress: '10.0.0.1/32'\npeerASN: 64512 \n This advertises the PodCIDR prefixes allocated from the selected\nCiliumPodIPPools. Note that the CIDR must be allocated to a  CiliumNode  that\nmatches the  .nodeSelector  for the virtual router to announce the PodCIDR as\na BGP route. \n If you wish to announce ALL CiliumPodIPPool CIDRs within the cluster, a  NotIn  match expression\nwith a dummy key and value can be used like: \n .. code-block:: yaml \n apiVersion: \"cilium.io/v2alpha1\"\nkind: CiliumBGPPeeringPolicy\nspec:\nnodeSelector:\nmatchLabels:\nrack: rack0\nvirtualRouters:\n- localASN: 64512\npodIPPoolSelector:\nmatchExpressions:\n- {key: somekey, operator: NotIn, values: ['never-used-value']}\nneighbors:\n- peerAddress: '10.0.0.1/32'\npeerASN: 64512 \n There are two special purpose selector fields that match CiliumPodIPPools based on  name  and/or\n namespace  metadata instead of labels: \n =============================== ===================\nSelector                        Field \n \n io.cilium.podippool.namespace    .meta.namespace \nio.cilium.podippool.name         .meta.name \n=============================== =================== \n For additional details regarding CiliumPodIPPools, see the :ref: ipam_crd_multi_pool  section. \n Other IPAM Types\n^^^^^^^^^^^^^^^^ \n When using other IPAM types, the BGP Control Plane does not support advertising\nPodCIDRs and specifying  virtualRouters[*].exportPodCIDR  doesn't take any\neffect. \n Advertising Service Virtual IPs \n In Kubernetes, a Service has multiple virtual IP addresses,\nsuch as  .spec.clusterIP ,  .spec.clusterIPs ,  .status.loadBalancer.ingress[*].ip \nand  .spec.externalIPs .\nThe BGP control plane can advertise the virtual IP address of the Service to BGP peers.\nThis allows users to directly access the Service from outside the cluster. \n To advertise the virtual IPs, specify the  virtualRouters[*].serviceSelector  field\nand the  virtualRouters[*].serviceAdvertisements  field. The  .serviceAdvertisements \ndefaults to the  LoadBalancerIP  service. You can also specify the  .serviceAdvertisements \nfield to advertise specific service types, with options such as  LoadBalancerIP ,\n ClusterIP  and  ExternalIP . \n It is worth noting that when you configure  virtualRouters[*].serviceAdvertisements  as  ClusterIP ,\nthe BGP Control Plane only considers the configuration of the service's  .spec.internalTrafficPolicy  and ignores\nthe configuration of  .spec.externalTrafficPolicy .\nFor  ExternalIP  and  LoadBalancerIP , it only considers the configuration of\nthe service's  .spec.externalTrafficPolicy  and ignores the configuration of  .spec.internalTrafficPolicy . \n The  .serviceSelector  field is a label selector that selects Services matching\nthe specified  .matchLabels  or  .matchExpressions . \n When your upstream router supports Equal Cost Multi Path(ECMP), you can use\nthis feature to load balance traffic to the Service across multiple nodes by\nadvertising the same ingress IPs from multiple nodes. \n .. code-block:: yaml \n apiVersion: \"cilium.io/v2alpha1\"\nkind: CiliumBGPPeeringPolicy\nmetadata:\nname: rack0\nspec:\nnodeSelector:\nmatchLabels:\nrack: rack0\nvirtualRouters:\n- localASN: 64512\nserviceSelector: # <-- select Services to advertise\nmatchLabels:\napp: foo\nserviceAdvertisements: # <-- specify the service types to advertise\n- LoadBalancerIP # <-- default\n- ClusterIP      # <-- options\n- ExternalIP     # <-- options\nneighbors:\n- peerAddress: '10.0.0.1/32'\npeerASN: 64512 \n .. warning:: \n Many routers have a limit on the number of ECMP paths they can hold in their\nrouting table ( Juniper    <https://www.juniper.net/documentation/us/en/software/junos/cli-reference/topics/ref/statement/maximum-ecmp-edit-chassis.html> __).\nWhen advertising the Service VIPs from many nodes, you may exceed this\nlimit. We recommend checking the limit with your network administrator\nbefore using this feature. \n Advertising ExternalIP Services\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \n If you wish to use this together with  kubeProxyReplacement  feature  (see :ref: kubeproxy-free  docs),\nplease make sure the ExternalIP support is enabled. \n If you only wish to advertise the  .spec.externalIPs  of Service,\nyou can specify the  virtualRouters[*].serviceAdvertisements  field as  ExternalIP . \n .. code-block:: yaml \n apiVersion: \"cilium.io/v2alpha1\"\nkind: CiliumBGPPeeringPolicy\nmetadata:\nname: rack0\nspec:\nnodeSelector:\nmatchLabels:\nrack: rack0\nvirtualRouters:\n- localASN: 64512\nserviceSelector: # <-- select Services to advertise\nmatchLabels:\napp: foo\nserviceAdvertisements: # <-- specify the service types to advertise\n- ExternalIP\nneighbors:\n- peerAddress: '10.0.0.1/32'\npeerASN: 64512 \n Advertising ClusterIP Services\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \n If you wish to use this together with  kubeProxyReplacement  feature  (see :ref: kubeproxy-free  docs),\nspecific BPF parameters need to be enabled.\nSee :ref: External Access To ClusterIP Services <external_access_to_clusterip_services>  section for how to enable it. \n If you only wish to advertise the  .spec.clusterIP  and  .spec.clusterIPs  of Service,\nyou can specify the  virtualRouters[*].serviceAdvertisements  field as  ClusterIP . \n .. code-block:: yaml \n apiVersion: \"cilium.io/v2alpha1\"\nkind: CiliumBGPPeeringPolicy\nmetadata:\nname: rack0\nspec:\nnodeSelector:\nmatchLabels:\nrack: rack0\nvirtualRouters:\n- localASN: 64512\nserviceSelector: # <-- select Services to advertise\nmatchLabels:\napp: foo\nserviceAdvertisements: # <-- specify the service types to advertise\n- ClusterIP\nneighbors:\n- peerAddress: '10.0.0.1/32'\npeerASN: 64512 \n Additionally, when the  .spec.clusterIP  or  .spec.clusterIPs  of the Service contains  None ,\nthis IP address will be ignored and will not be advertised. \n Advertising Load Balancer Services\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \n You must first allocate ingress IPs to advertise them. By default, Kubernetes\ndoesn't provide a way to assign ingress IPs to a Service. The cluster\nadministrator is responsible for preparing a controller that assigns ingress\nIPs. Cilium supports assigning ingress IPs with the :ref: Load Balancer IPAM <lb_ipam>  feature. \n .. code-block:: yaml \n apiVersion: \"cilium.io/v2alpha1\"\nkind: CiliumBGPPeeringPolicy\nspec:\nnodeSelector:\nmatchLabels:\nrack: rack0\nvirtualRouters:\n- localASN: 64512\nserviceSelector:\nmatchLabels:\napp: foo\nneighbors:\n- peerAddress: '10.0.0.1/32'\npeerASN: 64512 \n This advertises the ingress IPs of all Services matching the  .serviceSelector . \n If you wish to announce ALL services within the cluster, a  NotIn  match expression\nwith a dummy key and value can be used like: \n .. code-block:: yaml \n apiVersion: \"cilium.io/v2alpha1\"\nkind: CiliumBGPPeeringPolicy\nspec:\nnodeSelector:\nmatchLabels:\nrack: rack0\nvirtualRouters:\n- localASN: 64512\nserviceSelector:\nmatchExpressions:\n- {key: somekey, operator: NotIn, values: ['never-used-value']}\nneighbors:\n- peerAddress: '10.0.0.1/32'\npeerASN: 64512 \n There are a few special purpose selector fields which don't match on labels but\ninstead on other metadata like  .meta.name  or  .meta.namespace . \n =============================== ===================\nSelector                        Field \n \n io.kubernetes.service.namespace  .meta.namespace \nio.kubernetes.service.name       .meta.name \n=============================== =================== \n Load Balancer Class \n \nCilium supports the `loadBalancerClass\n<https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-class>`__.\nWhen the load balancer class is set to ``io.cilium/bgp-control-plane`` or unspecified,\nCilium will announce the ingress IPs of the Service. Otherwise, Cilium will not announce\nthe ingress IPs of the Service.\n\nexternalTrafficPolicy\n \n When the Service has  externalTrafficPolicy: Cluster , BGP Control Plane\nunconditionally advertises the ingress IPs of the selected Service. When the\nService has  externalTrafficPolicy: Local , BGP Control Plane keeps track of\nthe endpoints for the service on the local node and stops advertisement when\nthere's no local endpoint. \n Validating Advertised Routes \n Get all IPv4 unicast routes available: \n .. code-block:: shell-session \n $ cilium bgp routes available ipv4 unicast\nNode                              VRouter   Prefix        NextHop   Age    Attrs\nnode0                             64512     10.1.0.0/24   0.0.0.0   17m42s [{Origin: i} {Nexthop: 0.0.0.0}] \n Get all IPv4 unicast routes available for a specific vrouter: \n .. code-block:: shell-session \n $ cilium bgp routes available ipv4 unicast vrouter 64512\nNode                              VRouter   Prefix        NextHop   Age    Attrs\nnode0                             64512     10.1.0.0/24   0.0.0.0   17m42s [{Origin: i} {Nexthop: 0.0.0.0}] \n Get IPv4 unicast routes advertised to a specific peer: \n .. code-block:: shell-session \n $ cilium bgp routes advertised ipv4 unicast peer 10.0.0.1\nNode                              VRouter   Prefix        NextHop   Age    Attrs\nnode0                             64512     10.1.0.0/24   10.0.0.2  17m42s [{Origin: i} {AsPath: } {Nexthop: 10.0.0.2} {LocalPref: 100}] \n Neighbor Options \n Each  virtualRouters  can contain multiple  neighbors . You can specify\nvarious BGP peering options for each neighbor. This section describes the\navailable options and use cases. \n .. warning:: \n Change of an existing neighbor configuration can cause reset of the existing BGP\npeering connection, which results in route flaps and transient packet loss while\nthe session reestablishes and peers exchange their routes. To prevent packet loss,\nit is recommended to configure BGP Graceful Restart. \n Peer Port\n^^^^^^^^^ \n By default, the BGP Control Plane uses port 179 for BGP peering. When the neighbor is\nrunning on a non-standard port, you can specify the port number with the  peerPort \nfield. \n .. code-block:: yaml \n apiVersion: \"cilium.io/v2alpha1\"\nkind: CiliumBGPPeeringPolicy\nspec:\nnodeSelector:\nmatchLabels:\nrack: rack0\nvirtualRouters:\n- localASN: 64512\nneighbors:\n- peerAddress: '10.0.0.1/32'\npeerASN: 64512\npeerPort: 1179 # <-- specify the peer port \n Timers\n^^^^^^ \n BGP Control Plane supports modifying the following BGP timer parameters. For\nmore detailed description for each timer parameters, please refer to  RFC4271 <https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-class> __. \n ================= ============================ ==========\nName              Field                        Default \n \n ConnectRetryTimer  connectRetryTimeSeconds   120\nHoldTimer          holdTimeSeconds           90\nKeepaliveTimer     keepAliveTimeSeconds      30\n================= ============================ ========== \n In datacenter networks which Kubernetes clusters are deployed, it is generally\nrecommended to set the  HoldTimer  and  KeepaliveTimer  to a lower value\nfor faster possible failure detection. For example, you can set the minimum\npossible values  holdTimeSeconds=9  and  keepAliveTimeSeconds=3 . \n .. code-block:: yaml \n apiVersion: \"cilium.io/v2alpha1\"\nkind: CiliumBGPPeeringPolicy\nspec:\nnodeSelector:\nmatchLabels:\nrack: rack0\nvirtualRouters:\n- localASN: 64512\nneighbors:\n- peerAddress: '10.0.0.1/32'\npeerASN: 64512\nconnetRetryTimeSeconds: 90 # <-- specify the ConnectRetryTimer\nholdTimeSeconds: 9         # <-- specify the HoldTimer\nkeepAliveTimeSeconds: 3    # <-- specify the KeepaliveTimer \n eBGP Multihop\n^^^^^^^^^^^^^ \n By default, IP TTL of the BGP packets is set to 1 in eBGP. Generally, it is\nencouraged to not change the TTL, but in some cases, you may need to change the\nTTL value. For example, when the BGP peer is a Route Server and located in a\ndifferent subnet, you may need to set the TTL value to more than 1. \n .. code-block:: yaml \n apiVersion: \"cilium.io/v2alpha1\"\nkind: CiliumBGPPeeringPolicy\nspec:\nnodeSelector:\nmatchLabels:\nrack: rack0\nvirtualRouters:\n- localASN: 64512\nneighbors:\n- peerAddress: '10.0.0.1/32'\npeerASN: 64512\neBGPMultihopTTL: 4 # <-- specify the TTL value \n MD5 Passwords\n^^^^^^^^^^^^^ \n By configuring  authSecretRef  for a neighbor you can configure that a\n RFC-2385 _ TCP MD5 password should be configured on the session with this BGP\npeer. \n .. code-block:: yaml \n apiVersion: \"cilium.io/v2alpha1\"\nkind: CiliumBGPPeeringPolicy\nmetadata:\nname: rack0\nspec:\nnodeSelector:\nmatchLabels:\nrack: rack0\nvirtualRouters:\n- localASN: 64512\nneighbors:\n- peerAddress: '10.0.0.1/32'\npeerASN: 64512\nauthSecretRef: \"bgp-password\" # <-- specify the secret name \n authSecretRef  should reference the name of a secret in the BGP secrets\nnamespace (if using the Helm chart this is  kube-system  by default). The\nsecret should contain a key with a name of  password . \n BGP secrets are limited to a configured namespace to keep the permissions\nneeded on each Cilium Agent instance to a minimum. The Helm chart will\nconfigure Cilium to be able to read from it by default. \n An example of creating a secret is: \n .. code-block:: shell-session \n $ kubectl create secret generic -n kube-system --type=string secretname --from-literal=password=my-secret-password \n If you wish to change the namespace, you can set the\n bgpControlPlane.secretNamespace.name  Helm chart value. To have the\nnamespace created automatically, you can set the\n bgpControlPlane.secretNamespace.create  Helm chart value  to  true . \n Because TCP MD5 passwords sign the header of the packet they cannot be used if\nthe session will be address translated by Cilium (i.e. the Cilium Agent's pod\nIP address must be the address the BGP peer sees). \n If the password is incorrect, or the header is otherwise changed the TCP\nconnection will not succeed. This will appear as  dial: i/o timeout  in the\nCilium Agent's logs rather than a more specific error message. \n .. _RFC-2385 : https://www.rfc-editor.org/rfc/rfc2385.html \n If a  CiliumBGPPeeringPolicy  is deployed with an  authSecretRef  that Cilium cannot find, the BGP session will use an empty password and the agent will log an error such as in the following example:: \n level=error msg=\"Failed to fetch secret \"secretname\": not found (will continue with empty password)\" component=manager.fetchPeerPassword subsys=bgp-control-plane \n .. _bgp_control_plane_graceful_restart: \n Graceful Restart\n^^^^^^^^^^^^^^^^\nThe Cilium BGP Control Plane can be configured to act as a graceful restart\n Restarting Speaker . When you enable graceful restart, the BGP session will restart\nand the \"graceful restart\" capability will be advertised in the BGP OPEN message. \n In the event of a Cilium Agent restart, the peering BGP router does not withdraw\nroutes received from the Cilium BGP control plane immediately. The datapath\ncontinues to forward traffic during Agent restart, so there is no traffic\ndisruption. \n Configure graceful restart on per-neighbor basis, as follows: \n .. code-block:: yaml \n apiVersion: \"cilium.io/v2alpha1\"\nkind: CiliumBGPPeeringPolicy\nmetadata:\nname: rack0\nspec:\nnodeSelector:\nmatchLabels:\nrack: rack0\nvirtualRouters:\n- localASN: 64512\nneighbors:\n- peerAddress: '10.0.0.1/32'\npeerASN: 64512\ngracefulRestart:\nenabled: true           # <-- enable graceful restart\nrestartTimeSeconds: 120 # <-- set RestartTime \n Optionally, you can use the  RestartTime  parameter.  RestartTime  is the time\nadvertised to the peer within which Cilium BGP control plane is expected to re-establish\nthe BGP session after a restart. On expiration of  RestartTime , the peer removes\nthe routes previously advertised by the Cilium BGP control plane. \n When the Cilium Agent restarts, it closes the BGP TCP socket, causing the emission of a\nTCP FIN packet. On receiving this TCP FIN, the peer changes its BGP state to  Idle  and\nstarts its  RestartTime  timer. \n The Cilium agent boot up time varies depending on the deployment. If using  RestartTime ,\nyou should set it to a duration greater than the time taken by the Cilium Agent to boot up. \n Default value of  RestartTime  is 120 seconds. More details on graceful restart and\n RestartTime  can be found in  RFC-4724 _ and  RFC-8538 _. \n .. _RFC-4724 : https://www.rfc-editor.org/rfc/rfc4724.html\n.. _RFC-8538 : https://www.rfc-editor.org/rfc/rfc8538.html \n Advertised Path Attributes\n^^^^^^^^^^^^^^^^^^^^^^^^^^ \n BGP advertisements can be extended with additional BGP Path Attributes - BGP Communities ( RFC-1997 _) or Local Preference.\nThese Path Attributes can be configured selectively for each BGP peer and advertisement type. \n The following code block shows an example configuration of  AdvertisedPathAttributes  for a BGP neighbor,\nwhich adds a BGP community attribute with the value  64512:100  to all Service announcements from the\nmatching  CiliumLoadBalancerIPPool  and sets the Local Preference value for all Pod CIDR announcements\nto the value  150 : \n .. code-block:: yaml \n apiVersion: \"cilium.io/v2alpha1\"\nkind: CiliumBGPPeeringPolicy\nmetadata:\nname: rack0\nspec:\nnodeSelector:\nmatchLabels:\nrack: rack0\nvirtualRouters:\n- localASN: 64512\nneighbors:\n- peerAddress: '10.0.0.1/32'\npeerASN: 64512\nadvertisedPathAttributes:\n- selectorType: CiliumLoadBalancerIPPool # <-- select CiliumLoadBalancerIPPool and add BGP community 64512:100\nselector:\nmatchLabels:\nenvironment: production\ncommunities:\nstandard:\n- 64512:100\n- selectorType: PodCIDR # <-- select PodCIDR and add local preference 150 and BGP community 64512:150\nlocalPreference: 150\ncommunities:\nstandard:\n- 64512:150 \n .. note::\nNote that Local Preference Path Attribute is sent only to  iBGP  peers (not to  eBGP  peers). \n Each  AdvertisedPathAttributes  configuration item consists of two parts: \n \n SelectorType  with  Selector  define which BGP advertisements will be extended with additional Path Attributes. \n Communities  and / or  LocalPreference  define the additional Path Attributes applied on the selected routes. \n \n There are three possible values of the  SelectorType  which define the object type on which the  Selector  applies: \n \n PodCIDR : matches  CiliumNode  custom resources\n(Path Attributes apply to routes announced for PodCIDRs of selected  CiliumNode  objects). \n CiliumLoadBalancerIPPool : matches  CiliumLoadBalancerIPPool  custom resources\n(Path Attributes apply to routes announced for selected  CiliumLoadBalancerIPPool  objects). \n CiliumPodIPPool : matches  CiliumPodIPPool  custom resources\n(Path Attributes apply to routes announced for allocated prefixes of selected  CiliumPodIPPool  objects). \n \n There are two types of additional Path Attributes that can be advertised with the routes:  Communities  and  LocalPreference . \n Communities  defines a set of community values advertised in the supported BGP Communities Path Attributes.\nThe values can be of three types: \n \n \n Standard : represents a value of the \"standard\" 32-bit BGP Communities Attribute ( RFC-1997 _)\nas a 4-byte decimal number or two 2-byte decimal numbers separated by a colon (e.g.  64512:100 ). \n \n \n WellKnown : represents a value of the \"standard\" 32-bit BGP Communities Attribute ( RFC-1997 _)\nas a well-known string alias to its numeric value. Allowed values and their mapping to the numeric values: \n =============================== ================= =================\nWell-Known Value                Hexadecimal Value 16-bit Pair Value \n \n internet                      0x00000000      0:0 \n planned-shut                  0xffff0000      65535:0 \n accept-own                    0xffff0001      65535:1 \n route-filter-translated-v4    0xffff0002      65535:2 \n route-filter-v4               0xffff0003      65535:3 \n route-filter-translated-v6    0xffff0004      65535:4 \n route-filter-v6               0xffff0005      65535:5 \n llgr-stale                    0xffff0006      65535:6 \n no-llgr                       0xffff0007      65535:7 \n blackhole                     0xffff029a      65535:666 \n no-export                     0xffffff01      65535:65281 \n no-advertise                  0xffffff02      65535:65282 \n no-export-subconfed           0xffffff03      65535:65283 \n no-peer                       0xffffff04      65535:65284 \n=============================== ================= ================= \n \n \n Large : represents a value of the BGP Large Communities Attribute ( RFC-8092 _),\nas three 4-byte decimal numbers separated by colons (e.g.  64512:100:50 ). \n \n \n .. _RFC-1997 : https://www.rfc-editor.org/rfc/rfc1997.html\n.. _RFC-8092 : https://www.rfc-editor.org/rfc/rfc8092.html \n LocalPreference  defines the preference value advertised in the BGP Local Preference Path Attribute.\nAs Local Preference is only valid for  iBGP  peers, this value will be ignored for  eBGP  peers\n(no Local Preference Path Attribute will be advertised). \n Once configured, the additional Path Attributes advertised with the routes for a peer can be verified using the\n cilium bgp routes  Cilium CLI command, for example: \n .. code-block:: shell-session \n $ cilium bgp routes advertised ipv4 unicast peer 10.0.0.1 \n VRouter   Prefix               NextHop     Age     Attrs\n64512     10.1.0.0/24          10.0.0.2    3m31s   [{Origin: i} {LocalPref: 150} {Nexthop: 10.0.0.2}]\n64512     192.168.100.190/32   10.0.0.2    3m32s   [{Origin: i} {LocalPref: 100} {Communities: 64512:100} {Nexthop: 10.0.0.2}] \n .. _bgp-control-plane-address-families: \n Address Families\n^^^^^^^^^^^^^^^^ \n By default, the BGP Control Plane advertises IPv4 Unicast and IPv6 Unicast\nMultiprotocol Extensions Capability ( RFC-4760 ) as well as Graceful Restart\naddress families ( RFC-4724 ) if enabled. If you wish to change the default\nbehavior and advertise only specific address families, you can use the\n families  field. The  families  field is a list of AFI (Address Family\nIdentifier) and SAFI (Subsequent Address Family Identifier) pairs. The only\noptions currently supported are  {afi: ipv4, safi: unicast}  and  {afi: ipv6, safi: unicast} . \n Following example shows how to advertise only IPv4 Unicast address family: \n .. _RFC-4760 : https://www.rfc-editor.org/rfc/rfc4760.html \n .. code-block:: yaml \n apiVersion: \"cilium.io/v2alpha1\"\nkind: CiliumBGPPeeringPolicy\nmetadata:\nname: rack0\nspec:\nnodeSelector:\nmatchLabels:\nrack: rack0\nvirtualRouters:\n- localASN: 64512\nneighbors:\n- peerAddress: '10.0.0.1/32'\npeerASN: 64512\nfamilies:\n- afi: ipv4\nsafi: unicast",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/bgp-control-plane/bgp-control-plane-v1.rst",
  "extracted_at": "2025-09-03T01:13:29.187024Z"
}
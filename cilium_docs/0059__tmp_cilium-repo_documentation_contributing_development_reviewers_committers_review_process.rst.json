{
  "url": "file:///tmp/cilium-repo/Documentation/contributing/development/reviewers_committers/review_process.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _review_process:\n\nPull requests review process for committers\n===========================================\n\nReview process\n--------------\n\n.. note::\n\n   These instructions assume that reviewers are members of the Cilium GitHub\n   organization. This is required to obtain the privileges to modify GitHub\n   labels on the pull request. See `Cilium's Contributor Ladder`_ for details.\n\n.. _Cilium's Contributor Ladder: https://github.com/cilium/community/blob/main/CONTRIBUTOR-LADDER.md\n\n#. Find Pull Requests (PRs) needing a review `from you <user_review_filter_>`_,\n   or `from one of your teams <team_review_filter_>`_.\n\n#. If this PR was opened by a contributor who is not part of the Cilium\n   organization, please assign yourself to that PR and keep track of the PR to\n   ensure it gets reviewed and merged.\n\n   If the contributor is a Cilium committer, then they are responsible for\n   getting the PR ready to be merged by addressing review comments and\n   resolving all CI checks for \"Required\" workflows.\n\n   If this PR is a backport PR (typically with the label ``kind/backport``) and\n   no-one else has reviewed the PR, review the changes as a sanity check. If\n   any individual commits deviate from the original patch, request review from\n   the original author to validate that the backport was correctly applied.\n\n#. Review overall correctness of the PR according to the rules specified in the\n   section :ref:`submit_pr`.\n\n#. Set the labels accordingly. A bot called maintainer's little helper might\n   automatically help you with this.\n\n   +--------------------------------+---------------------------------------------------------------------------+\n   | Labels                         | When to set                                                               |\n   +================================+===========================================================================+\n   | ``dont-merge/needs-sign-off``  | Some commits are not signed off                                           |\n   +--------------------------------+---------------------------------------------------------------------------+\n   | ``dont-merge/needs-rebase``    | PR is outdated and needs to be rebased                                    |\n   +--------------------------------+---------------------------------------------------------------------------+\n\n#. Validate that bugfixes are marked with ``kind/bug`` and validate whether the\n   assessment of backport requirements as requested by the submitter conforms\n   to the :ref:`backport_criteria`.\n\n   +--------------------------+---------------------------------------------------------------------------+\n   | Labels                   | When to set                                                               |\n   +==========================+===========================================================================+\n   | ``needs-backport/X.Y``   | PR needs to be backported to these stable releases                        |\n   +--------------------------+---------------------------------------------------------------------------+\n\n#. If the PR is subject to backport, validate that the PR does not mix bugfix\n   and refactoring of code as it will heavily complicate the backport process.\n   Demand for the PR to be split.\n\n#. Validate the ``release-note/*`` label and check the release note\n   suitability. Release notes are passed through the dedicated ``release-note``\n   block (see :ref:`submit_pr`), or through the PR title if this block is\n   missing. To check if the notes are suitable, put yourself into the\n   perspective of a future release notes reader with lack of context and ensure\n   the title is precise but brief.\n\n   +-----------------------------------+--------------------------------------------------------------------------------------------------------+\n   | Labels                            | When to set                                                                                            |\n   +===================================+========================================================================================================+\n   | ``dont-merge/needs-release-note`` | Do NOT merge PR, needs a release note                                                                  |\n   +-----------------------------------+--------------------------------------------------------------------------------------------------------+\n   | ``release-note/bug``              | This is a non-trivial bugfix and is a user-facing bug                                                  |\n   +-----------------------------------+--------------------------------------------------------------------------------------------------------+\n   | ``release-note/major``            | This is a major feature addition, e.g. Add MongoDB support                                             |\n   +-----------------------------------+--------------------------------------------------------------------------------------------------------+\n   | ``release-note/minor``            | This is a minor feature addition, e.g. Add support for a Kubernetes version                            |\n   +-----------------------------------+--------------------------------------------------------------------------------------------------------+\n   | ``release-note/misc``             | This is a not user-facing change , e.g. Refactor endpoint package, a bug fix of a non-released feature |\n   +-----------------------------------+--------------------------------------------------------------------------------------------------------+\n   | ``release-note/ci``               | This is a CI feature or bug fix.                                                                       |\n   +-----------------------------------+--------------------------------------------------------------------------------------------------------+\n\n#. Check for upgrade compatibility impact and if in doubt, set the label\n   ``upgrade-impact`` and discuss in `Cilium Slack`_'s ``#development`` channel\n   or in the weekly meeting.\n\n   +--------------------------+---------------------------------------------------------------------------+\n   | Labels                   | When to set                                                               |\n   +==========================+===========================================================================+\n   | ``upgrade-impact``       | The code changes have a potential upgrade impact                          |\n   +--------------------------+---------------------------------------------------------------------------+\n\n#. When submitting a review, provide explicit approval or request specific\n   changes whenever possible. Clear feedback indicates whether contributors\n   must take action before a PR can merge.\n\n   If you need more information before you can approve or request changes, you\n   can leave comments seeking clarity. If you do not explicitly approve or\n   request changes, it's best practice to raise awareness about the discussion\n   so that others can participate. Here are some ways you can raise awareness:\n\n   - Re-request review from codeowners in the PR\n   - Raise the topic for discussion in Slack or during community meetings\n\n   When requesting changes, summarize your feedback for the PR, including\n   overall issues for a contributor to consider and/or encouragement for what a\n   contributor is already doing well.\n\n#. When all review objectives for all ``CODEOWNERS`` are met, all CI tests have\n   passed, and all reviewers have approved the requested changes, you can merge\n   the PR by clicking on the \"Rebase and merge\" button.\n\nReviewer Teams\n--------------\n\nEvery reviewer, including committers in the `committers team`_, belongs to `one\nor more teams in the Cilium organization <cilium_teams_>`_. If you would like\nto add or remove yourself from any team, please submit a PR against the\n`community repository`_.\n\nOnce a contributor opens a PR, GitHub automatically picks which `teams\n<cilium_teams_>`_ should review the PR using the ``CODEOWNERS`` file. Each\nreviewer can see the PRs they need to review by filtering by reviews\nrequested. A good filter is provided in this `link <user_review_filter_>`_ so\nmake sure to bookmark it.\n\nReviewers are expected to focus their review on the areas of the code where\nGitHub requested their review. For small PRs, it may make sense to simply\nreview the entire PR. However, if the PR is quite large then it can help to\nnarrow the area of focus to one particular aspect of the code. When leaving a\nreview, share which areas you focused on and which areas you think that other\nreviewers should look into. This helps others to focus on aspects of review\nthat have not been covered as deeply.\n\nBelonging to a team does not mean that a reviewer needs to know every single\nline of code the team is maintaining. Once you have reviewed a PR, if you feel\nthat another pair of eyes is needed, re-request a review from the appropriate\nteam. In the following example, the reviewer belonging to the CI team is\nre-requesting a review for other team members to review the PR. This allows\nother team members belonging to the CI team to see the PR as part of the PRs\nthat require review in the `filter <team_review_filter_>`_.\n\n.. image:: ../../../images/re-request-review.png\n   :align: center\n   :scale: 50%\n\nWhen all review objectives for all ``CODEOWNERS`` are met, all required CI\ntests have passed and a proper release label is set, a PR may be merged by any\ncommitter with access rights to click the green merge button.\nMaintainer's little helper may set the ``ready-to-merge`` label automatically\nto recognize the state of the PR. Periodically, a rotating assigned committer\nwill review the list of PRs that are marked ``ready-to-merge``.\n\n.. _committers team: https://github.com/orgs/cilium/teams/committers/members\n.. _community repository: https://github.com/cilium/community\n.. _cilium_teams: https://github.com/orgs/cilium/teams/team/teams\n.. _maintainers: https://github.com/orgs/cilium/teams/cilium-maintainers/members\n.. _user_review_filter: https://github.com/cilium/cilium/pulls?q=is%3Apr+is%3Aopen+draft%3Afalse+user-review-requested%3A%40me+sort%3Aupdated-asc\n.. _team_review_filter: https://github.com/cilium/cilium/pulls?q=is%3Apr+is%3Aopen+draft%3Afalse+review-requested%3A%40me+sort%3Aupdated-asc\n\nCode owners\n-----------\n\n.. include:: ../../../codeowners.rst\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/contributing/development/reviewers_committers/review_process.rst",
  "extracted_at": "2025-09-03T01:13:28.797259Z"
}
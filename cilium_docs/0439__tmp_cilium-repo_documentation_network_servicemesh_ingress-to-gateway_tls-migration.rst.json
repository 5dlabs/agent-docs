{
  "url": "file:///tmp/cilium-repo/Documentation/network/servicemesh/ingress-to-gateway/tls-migration.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _gs_gateway_tls_migration:\n\n*************\nTLS Migration\n*************\n\nThis migration example builds on the previous :ref:`gs_gateway_http_migration` and adds TLS\ntermination for two HTTP routes. For simplicity, this example omits the second route to ``productpage``.\n\n\nReview Ingress Configuration\n============================\n\nYou can find the example Ingress definition in ``tls-ingress.yaml``.\n\n.. literalinclude:: ../../../../examples/kubernetes/servicemesh/tls-ingress.yaml\n   :language: yaml\n\nThis example:\n\n- listens for HTTPS traffic on port 443.\n- terminates TLS for the ``hipstershop.cilium.rocks`` and ``bookinfo.cilium.rocks`` hostnames using the TLS certificate and key from the Secret *demo-cert*.\n- routes HTTPS requests for the ``hipstershop.cilium.rocks`` hostname with the URI prefix ``/hipstershop.ProductCatalogService`` to the *productcatalogservice* Service.\n- routes HTTPS requests for the ``hipstershop.cilium.rocks`` hostname with the URI prefix ``/hipstershop.CurrencyService`` to the *currencyservice* Service.\n- routes HTTPS requests for the ``bookinfo.cilium.rocks`` hostname with the URI prefix ``/details`` to the *details* Service.\n- routes HTTPS requests for the ``bookinfo.cilium.rocks`` hostname with any other prefix to the *productpage* Service.\n\n\nCreate Equivalent Gateway Configuration\n=======================================\n\nTo create the equivalent TLS termination configuration, consider the following:\n\n- TLS Termination\n\n.. tabs::\n\n    .. group-tab:: Ingress\n        \n        The Ingress resource supports TLS termination via the TLS section, where the TLS certificate and key are stored in a Kubernetes Secret.\n\n        .. code-block:: shell-session\n\n            apiVersion: networking.k8s.io/v1\n            kind: Ingress\n            metadata:\n              name: tls-ingress\n              namespace: default\n            [...]\n            spec:\n              tls:\n              - hosts:\n                - bookinfo.cilium.rocks\n                - hipstershop.cilium.rocks\n                secretName: demo-cert\n\n    .. group-tab:: Gateway API\n\n        In the Gateway API, TLS termination is a property of the Gateway listener, and similarly to the Ingress, a TLS certificate and key are also stored in a Secret.\n\n        .. code-block:: shell-session\n\n            apiVersion: gateway.networking.k8s.io/v1beta1\n            kind: Gateway\n            metadata:\n              name: tls-gateway\n            spec:\n              gatewayClassName: cilium\n              listeners:\n              - name: bookinfo.cilium.rocks\n                protocol: HTTPS\n                port: 443\n                hostname: \"bookinfo.cilium.rocks\"\n                tls:\n                  certificateRefs:\n                  - kind: Secret\n                    name: demo-cert\n              - name: hipstershop.cilium.rocks\n                protocol: HTTPS\n                port: 443\n                hostname: \"hipstershop.cilium.rocks\"\n                tls:\n                  certificateRefs:\n                  - kind: Secret\n                    name: demo-cert\n\n- Host-header-based Routing Rules\n\n.. tabs::\n\n    .. group-tab:: Ingress\n        \n        The Ingress API uses the term *host*.\n        With Ingress, each host has separate routing rules.\n\n        .. code-block:: shell-session\n\n            apiVersion: networking.k8s.io/v1\n            kind: Ingress\n            metadata:\n              name: tls-ingress\n              namespace: default\n            spec:\n              ingressClassName: cilium\n            rules:\n            - host: hipstershop.cilium.rocks\n                http:\n                paths:\n                - backend:\n                    service:\n                        name: productcatalogservice\n                        port:\n                        number: 3550\n                    path: /hipstershop.ProductCatalogService\n                    pathType: Prefix\n\n    .. group-tab:: Gateway API\n\n        The Gateway API uses the *hostname* term.\n        The host-header-based routing rules map to the hostnames of the HTTPRoute. \n        In the HTTPRoute, the routing rules apply to all hostnames.\n\n        The hostnames of an HTTPRoute must match the hostname of the Gateway listener. Otherwise, the listener will ignore the routing rules for the unmatched hostnames.\n\n        .. code-block:: shell-session\n\n            ---\n            apiVersion: gateway.networking.k8s.io/v1beta1\n            kind: HTTPRoute\n            metadata:\n              name: hipstershop-cilium-rocks\n              namespace: default\n            spec:\n              hostnames:\n              - hipstershop.cilium.rocks\n              parentRefs:\n              - name: cilium-gateway\n              rules:\n              - matches:\n                - path:\n                    type: PathPrefix\n                    value: /hipstershop.ProductCatalogService\n                backendRefs:\n                - name: productcatalogservice\n                  port: 3550\n\nReview Equivalent Gateway Configuration\n=======================================\n\nYou can find the equivalent final Gateway and HTTPRoute definition in ``tls-migration.yaml``.\n\n.. literalinclude:: ../../../../examples/kubernetes/gateway/tls-migration.yaml\n   :language: yaml\n\nDeploy the resources and verify that HTTPS requests are routed successfully to the services.\nFor more information, consult the Gateway API :ref:`gs_gateway_https`.",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/servicemesh/ingress-to-gateway/tls-migration.rst",
  "extracted_at": "2025-09-03T01:13:29.140394Z"
}
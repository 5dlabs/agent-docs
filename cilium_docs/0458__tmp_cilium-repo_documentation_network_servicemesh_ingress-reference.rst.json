{
  "url": "file:///tmp/cilium-repo/Documentation/network/servicemesh/ingress-reference.rst",
  "content": "Reference\n#########\n\nHow Cilium Ingress and Gateway API differ from other Ingress controllers\n************************************************************************\n\nOne of the biggest differences between Cilium's Ingress and Gateway API support\nand other Ingress controllers is how closely tied the implementation is to the\nCNI. For Cilium, Ingress and Gateway API are part of the networking stack,\nand so behave in a different way to other Ingress or Gateway API controllers\n(even other Ingress or Gateway API controllers running in a Cilium cluster).\n\nOther Ingress or Gateway API controllers are generally installed as a Deployment\nor Daemonset in the cluster, and exposed via a Loadbalancer Service or similar (which Cilium\ncan, of course, enable).\n\nCilium's Ingress and Gateway API config is exposed with a Loadbalancer or NodePort\nservice, or optionally can be exposed on the Host network also. But in all of\nthese cases, when traffic arrives at the Service's port, eBPF code intercepts\nthe traffic and transparently forwards it to Envoy (using the TPROXY kernel facility).\n\nThis affects things like client IP visibility, which works differently for Cilium's\nIngress and Gateway API support to other Ingress controllers.\n\nIt also allows Cilium's Network Policy engine to apply CiliumNetworkPolicy to\ntraffic bound for and traffic coming from an Ingress.\n\nCilium's ingress config and CiliumNetworkPolicy\n***********************************************\n\nIngress and Gateway API traffic bound to backend services via Cilium passes through a\nper-node Envoy proxy.\n\nThe per-node Envoy proxy has special code that allows it to interact with the\neBPF policy engine, and do policy lookups on traffic. This allows Envoy to be\na Network Policy enforcement point, both for Ingress (and Gateway API) traffic,\nand also for east-west traffic via GAMMA or L7 Traffic Management.\n\nHowever, for ingress config, there's also an additional step. Traffic that arrives at\nEnvoy *for Ingress or Gateway API* is assigned the special ``ingress`` identity\nin Cilium's Policy engine.\n\nTraffic coming from outside the cluster is usually assigned the ``world`` identity\n(unless there are IP CIDR policies in the cluster). This means that there are\nactually *two* logical Policy enforcement points in Cilium Ingress - before traffic\narrives at the ``ingress`` identity, and after, when it is about to exit the\nper-node Envoy.\n\n.. image:: /images/ingress-policy.png\n    :align: center\n\nThis means that, when applying Network Policy to a cluster, it's important to\nensure that both steps are allowed, and that traffic is allowed from ``world`` to\n``ingress``, and from ``ingress`` to identities in the cluster (like the\n``productpage`` identity in the image above).\n\nPlease see the :ref:`gs_ingress_and_network_policy` for more details for Ingress,\nalthough the same principles also apply for Gateway API.\n\nSource IP Visibility\n********************\n\n.. Note::\n\n    By default, source IP visibility for Cilium ingress config, both Ingress\n    and Gateway API, should *just work* on most installations. Read this section\n    for more information on requirements and relevant settings.\n\nHaving a backend be able to deduce what IP address the actual request came from\nis important for most applications.\n\nBy default, Cilium's Envoy instances are configured to append the visible source\naddress of incoming HTTP connections to the ``X-Forwarded-For`` header, using the\nusual rules. That is, by default Cilium sets the number of trusted hops to ``0``,\nindicating that Envoy should use the address the connection is opened from, rather\nthan a value inside the ``X-Forwarded-For`` list. Increasing this count will\nhave Envoy use the ``n`` th value from the list, counting from the right.\n\nEnvoy will also set the ``X-Envoy-External-Address`` header to the trusted client\naddress, whatever that turns out to be, based on ``X-Forwarded-For``.\n\n.. Note::\n    \n    Backends using Cilium ingress (whether via Ingress or Gateway API) should\n    just see the ``X-Forwarded-For`` and ``X-Envoy-External-Address`` headers (which\n    are handled transparently by many HTTP libraries).\n\n``externalTrafficPolicy`` for Loadbalancer or NodePort Services\n===============================================================\n\nCilium's ingress support (both for Ingress and Gateway API) often uses a Loadbalancer\nor NodePort Service to expose the Envoy Daemonset.\n\nIn these cases, the Service object has one field that is particularly relevant\nto Client IP visibility - the ``externalTrafficPolicy`` field.\n\nIt has two relevant settings:\n\n- ``Local``: Nodes will only route traffic to Pods running on the local node, \n  *without masquerading the source IP*. Because of this, in clusters that use\n  ``kube-proxy``, this is the only way to ensure source IP visibility. Part of\n  the contract for ``externalTrafficPolicy`` local is also that the node will\n  open a port (the ``healthCheckNodePort``, automatically set by Kubernetes when\n  ``externalTrafficPolicy: Local`` is set), and requests to\n  ``http://<nodeIP>:<healthCheckNodePort>/healthz`` will return 200 on nodes that\n  have local pods running, and non-200 on nodes that don't. Cilium implements this\n  for general Loadbalancer Services, but it's a bit different for Cilium ingress\n  config (both Ingress and Gateway API).\n- ``Cluster``: Node will route to all endpoints across the cluster evenly. This\n  has a couple of other effects: Firstly, upstream loadbalancers will expect to\n  be able to send traffic to any node and have it end up at a backend Pod, and\n  the node *may* masquerade the source IP. This means that in many cases,\n  ``externalTrafficPolicy: Cluster`` may mean that the backend pod does *not* see\n  the source IP.\n\nIn Cilium's case, all ingress traffic bound for a Service that exposes Envoy is\n*always* going to the local node, and is *always* forwarded to Envoy using the\nLinux Kernel TPROXY function, which transparently forwards packets to the backend.\n\nThis means that for Cilium ingress config, for both Ingress and Gateway API, things\nwork a little differently in both ``externalTrafficPolicy`` cases.\n\n.. Note::\n\n    In *both* ``externalTrafficPolicy`` cases, traffic will arrive at any node\n    in the cluster, and be forwarded to *Envoy* **while keeping the source IP intact**.\n\nAlso, for any Services that exposes Cilium's Envoy, Cilium will ensure that\nwhen ``externalTrafficPolicy: Local`` is set, every node in the cluster will\npass the ``healthCheckNodePort`` check, so that external load balancers will\nforward correctly.\n\nHowever, for Cilium's ingress config, both Ingress and Gateway API, **it is not\nnecessary** to configure ``externalTrafficPolicy: Local`` to keep the source IP\nvisible to the backend pod (via the ``X-Forwarded-For`` and ``X-Envoy-External-Address``\nfields).\n\nTLS Passthrough and source IP visibility\n========================================\n\nBoth Ingress and Gateway API support TLS Passthrough configuration (via annotation\nfor Ingress, and the TLSRoute resource for Gateway API). This configuration allows\nmultiple TLS Passthrough backends to share the same TLS port on a loadbalancer,\nwith Envoy inspecting the Server Name Indicator (SNI) field of the TLS handshake,\nand using that to forward the TLS stream to a backend.\n\nHowever, this poses problems for source IP visibility, because Envoy is doing a\nTCP Proxy of the TLS stream.\n\nWhat happens is that the TLS traffic arrives at Envoy, terminating a TCP stream,\nEnvoy inspects the client hello to find the SNI, picks a backend to forward to,\nthen starts a new TCP stream and forwards the TLS traffic inside the downstream\n(outside)  packets to the upstream (the backend).\n\nBecause it's a new TCP stream, as far as the backends are concerned, the source\nIP is Envoy (which is often the Node IP, depending on your Cilium config).\n\n.. Note::\n\n    When doing TLS Passthrough, backends will see Cilium Envoy's IP address\n    as the source of the forwarded TLS streams.\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/servicemesh/ingress-reference.rst",
  "extracted_at": "2025-09-03T01:13:29.150672Z"
}
{
  "url": "file:///tmp/cilium-repo/Documentation/contributing/docs/docsstyle.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n .. _docs_style_guide: \n \n Documentation style \n \n .. |RST| replace:: reStructuredText \n Here are some guidelines and best practices for contributing to Cilium's\ndocumentation. They have several objectives: \n \n \n Ensure that the documentation is rendered in the best possible way (in\nparticular for code blocks). \n \n \n Make the documentation easy to maintain and extend. \n \n \n Help keep a consistent style throughout the documentation. \n \n \n In the end, provide a better experience to users, and help them find the\ninformation they need. \n \n \n See also :ref: the documentation for testing <testing-documentation>  for\ninstructions on how to preview documentation changes. \n General considerations \n Write in US English.\nFor example, use \"prioritize\" instead of \":spelling:ignore: prioritise \" and\n\"color\" instead of \":spelling:ignore: colour \". \n Maintain a consistent style with the rest of the documentation when possible,\nor at least with the rest of the updated page. \n Omit hyphens when possible. For example, use \"load balancing\" instead of\n\"load-balancing\". \n Header \n Use the following header when adding new files to the Documentation. \n .. code-block:: rst \n .. only:: not (epub or latex or html) \n       WARNING: You are looking at unreleased Cilium documentation.\n      Please use the official rendered version released here:\n      https://docs.cilium.io\n \n One exception is |RST| fragments that are supposed to be sourced from other\ndocumentation files. Those do not need this header. \n Headings \n Prefer sentence case (capital letter on first word) rather than\ntitle case for all headings. \n Body \n Wrap the lines for long sentences or paragraphs. There is no fixed convention\non the length of lines, but targeting a width of about 80 characters should be\nsafe in most circumstances. \n Capitalization \n Follow  the section on capitalization for API objects _ from the Kubernetes\nstyle guide for when to (not) capitalize API objects. In particular: \n When you refer specifically to interacting with an API object, use\n`UpperCamelCase`_, also known as Pascal case.\n \n And: \n When you are generally discussing an API object, use `sentence-style\ncapitalization`_\n \n For example, write \"Gateway API\", capitalized. Use \"Gateway\" when writing about\nan API object as an entity, and \"gateway\" for a specific instance. \n The following examples are correct:: \n - Gateway API is a subproject of Kubernetes SIG Network.\n- Cilium is conformant to the Gateway API spec at version X.Y.Z.\n- In order to expose this service, create a Gateway to hold the listener configuration.\n- Traffic from the Internet passes through the gateway to get to the backend service.\n- Now that you have created the \"foo\" gateway, you need to create some Routes.\n \n But the following examples are incorrect:: \n - The implementation of gateway API\n- To create a gateway object, ...\n \n .. _the section on capitalization for API objects: https://kubernetes.io/docs/contribute/style/style-guide/#use-upper-camel-case-for-api-objects\n.. _UpperCamelCase: https://en.wikipedia.org/wiki/Camel_case\n.. _sentence-style capitalization: https://docs.microsoft.com/en-us/style-guide/text-formatting/using-type/use-sentence-style-capitalization \n .. _docs_style_code_blocks: \n Code blocks \n Code snippets and other literal blocks usually fall under one of those three\ncategories: \n \n \n They contain  substitution references _ (for example:  |SCM_WEB| ). In that\ncase, always use the  .. parsed-literal  directive, otherwise the token\nwill not be substituted. \n Prefer: \n .. code-block:: rst \n .. parsed-literal:: \n   $ kubectl create -f \\ |SCM_WEB|\\/examples/minikube/http-sw-app.yaml\n \n Avoid: \n .. code-block:: rst \n .. code-block:: shell-session \n   $ kubectl create -f \\ |SCM_WEB|\\/examples/minikube/http-sw-app.yaml\n \n \n \n If the text is not a code snippet, but just some fragment that should be\nprinted verbatim (for example, the unstructured output of a shell command),\nuse the marker for  literal blocks _ ( :: ). \n Prefer: \n .. code-block:: rst \n See the output in  dmesg : \n :: \n   [ 3389.935842] flen=6 proglen=70 pass=3 image=ffffffffa0069c8f from=tcpdump pid=20583\n  [ 3389.935847] JIT code: 00000000: 55 48 89 e5 48 83 ec 60 48 89 5d f8 44 8b 4f 68\n \n See more output in  dmesg :: \n   [ 3389.935849] JIT code: 00000010: 44 2b 4f 6c 4c 8b 87 d8 00 00 00 be 0c 00 00 00\n  [ 3389.935850] JIT code: 00000020: e8 1d 94 ff e0 3d 00 08 00 00 75 16 be 17 00 00\n \n Avoid: \n .. code-block:: rst \n See the output in  dmesg : \n .. parsed-literal:: \n   [ 3389.935842] flen=6 proglen=70 pass=3 image=ffffffffa0069c8f from=tcpdump pid=20583\n  [ 3389.935847] JIT code: 00000000: 55 48 89 e5 48 83 ec 60 48 89 5d f8 44 8b 4f 68\n \n The reason is that because these snippets contain no code, there is no need\nto mark them as code or parsed literals. The former would tell Sphinx to\nattempt to apply syntax highlight, the second would tell it to look for |RST|\nmarkup to parse in the block. \n \n \n If the text contained code or structured output, use the  .. code-block \ndirective. Do  not  use the  .. code  directive, which is slightly less\nflexible. \n Prefer: \n .. code-block:: rst \n .. code-block:: shell-session \n   $ ls\n  cilium\n  $ cd cilium/\n \n Avoid: \n .. code-block:: rst \n .. parsed-literal:: \n   $ ls\n  cilium\n  $ cd cilium/\n \n .. code-block:: bash \n   $ ls\n  cilium\n  $ cd cilium/\n \n .. code-block:: shell-session \n   ls\n  cilium\n  cd cilium/\n \n The  .. code-block  directive should always take a language name as\nargument, for example:  .. code-block:: yaml  or  .. code-block:: shell-session . The use of  bash  is possible but should be limited to\nBash scripts. For any listing of shell commands, and in particular if the\nsnippet mixes commands and their output, use  shell-session , which will\nbring the best coloration and may trigger the generation of the  Copy commands  button. \n \n \n For snippets containing shell commands, in particular if they also contain the\noutput for those commands, use prompt symbols to prefix the commands. Use  $ \nfor commands to run as a normal user, and  #  for commands to run with\nadministrator privileges. You may use  sudo  as an alternative way to mark\ncommands to run with privileges. \n .. _substitution references: https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#substitution-references\n.. _literal blocks: https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#literal-blocks \n Links \n \n \n Avoid using  embedded URIs _ (```... <...> __``), which make the document harder to read when looking at the source code of the documentation. Prefer to use  block-level hyperlink targets`_ (where the URI is not written\ndirectly in the sentence in the |RST| file, below the paragraph). \n Prefer: \n .. code-block:: rst \n See the  documentation for Cilium _. \n Here is another link to  the same documentation <cilium documentation> _. \n .. _documentation for Cilium:\n.. _cilium documentation: https://docs.cilium.io/en/latest/ \n Avoid: \n .. code-block:: rst \n See the  documentation for Cilium <https://docs.cilium.io/en/latest/> __. \n \n \n If using embedded URIs, use anonymous hyperlinks ( ... <...>`__`` with two underscores, see the documentation for `embedded URIs`_) instead of named references ( ... <...>`_``, note the single underscore). \n Prefer (but see previous item): \n .. code-block:: rst \n See the  documentation for Cilium <https://docs.cilium.io/en/latest/> __. \n Avoid: \n .. code-block:: rst \n See the  documentation for Cilium <https://docs.cilium.io/en/latest/> _. \n \n \n .. _embedded URIs: https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#embedded-uris-and-aliases\n.. _block-level hyperlink targets: https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#hyperlink-targets \n Lists \n \n \n Left-align the body of a list item with the text on the first line, after the\nitem symbol. \n Prefer: \n .. code-block:: rst \n \n The text in this item\nwraps of several lines,\nwith consistent indentation. \n \n Avoid: \n .. code-block:: rst \n \n The text in this item\nwraps on several lines\nand the indent is not consistent\nwith the first line. \n \n \n \n For enumerated lists, prefer auto-numbering with the  #.  marker rather\nthan manually numbering the sections. \n Prefer: \n .. code-block:: rst \n #. First item\n#. Second item \n Avoid: \n .. code-block:: rst \n \n First item \n Second item \n \n \n \n Be consistent with periods at the end of list items. In general, omit periods\nfrom bulleted list items unless the items are complete sentences. But if one\nlist item requires a period, use periods for all items. \n Prefer: \n .. code-block:: rst \n \n This is one list item \n This is another list item \n \n Avoid: \n .. code-block:: rst \n \n This is one list item, period. We use punctuation. \n This list item should have a period too, but doesn't \n \n \n \n Callouts \n Use callouts effectively. For example, use the  .. note::  directive to\nhighlight information that helps users in a specific context. Do not use it to\navoid refactoring a section or paragraph. \n For example, when adding information about a new configuration flag that\ncompletes a feature, there is no need to append it as a note, given that it\ndoes not require particular attention from the reader. Avoid the following: \n .. parsed-literal:: \n Blinking pods are easier to spot in the dark. Use feature flag\n\\`\\`--blinking-pods\\`\\` to make new pods blink twice when they launch. If\nyou create blinking pods often, sunglasses may help protect your eyes.\n\n**\\.. note::\n\n    Use the flag \\`\\`--blinking-pods-blink-number\\`\\` to change the number\n    of times pods blink on start-up.**\n \n Instead, merge the new content with the existing paragraph: \n .. parsed-literal:: \n Blinking pods are easier to spot in the dark. Use feature flag\n\\`\\`--blinking-pods\\`\\` to make new pods blink when they launch. **By\ndefault, blinking pods blink twice, but you can use the flag\n\\`\\`--blinking-pods-blink-number\\`\\` to specify how many times they blink\non start-up.** If you create blinking pods often, sunglasses may help\nprotect your eyes.\n \n Roles \n \n \n We have a dedicated role for referencing Cilium GitHub issues, to reference\nthem in a consistent fashion. Use it when relevant. \n Prefer: \n .. code-block:: rst \n See :gh-issue: 1234 . \n Avoid: \n .. code-block:: rst \n See  this GitHub issue <https://github.com/cilium/cilium/issues/1234> __. \n \n \n Common pitfalls \n There are best practices for writing documentation; follow them. In general,\ndefault to the  Kubernetes style guide , especially for  content best practices . The following subsections cover the most common feedback given for\nCilium documentation Pull Requests. \n Use active voice \n \nPrefer::\n\n    Enable the flag.\n\nAvoid::\n\n    Ensure the flag is enabled.\n\nUse present tense\n \n Prefer:: \n The service returns a response code.\n \n Avoid:: \n The service will return a response code.\n \n Address the user as \"you\", not \"we\" \n \nPrefer::\n\n    You can specify values to filter tags.\n\nAvoid::\n\n    We'll specify this value to filter tags.\n\nUse plain, direct language\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPrefer::\n\n    Always configure the bundle explicitly in production environments.\n\nAvoid::\n\n    It is recommended to always configure the bundle explicitly in production environments.\n\nWrite for good localization\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAssume that what you write will be localized with machine translation. Figures\nof speech often localize poorly, as do idioms like \"above\" and \"below\".\n\nPrefer::\n\n    The following example\n    To assist this process,\n\nAvoid::\n\n    The example below\n    To give this process a boost,\n\nDefine abbreviations\n~~~~~~~~~~~~~~~~~~~~\n\nDefine abbreviations when you first use them on a page.\n\nPrefer::\n\n    Certificate authority (CA)\n\nAvoid::\n\n    CA\n\nDon't use Latin abbreviations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPrefer::\n\n    - For example,\n    - In other words,\n    - by following the ...\n    - and others\n\nAvoid::\n\n    - e.g.\n    - i.e.\n    - via\n    - etc.\n\nSpell words fully\n~~~~~~~~~~~~~~~~~\n\nPrefer::\n\n    and\n\nAvoid::\n\n    &\n\n.. _Kubernetes style guide: https://kubernetes.io/docs/contribute/style/style-guide/\n.. _content best practices: https://kubernetes.io/docs/contribute/style/style-guide/#content-best-practices\n\nSpecific language\n-----------------\n\nUse specific language. Avoid words like \"this\" (as a pronoun) and \"it\" when\nreferring to concepts, actions, or process states. Be as specific as possible,\neven if specificity seems overly repetitive. This requirement exists for two\nreasons:\n\n1. Indirect language assumes too much clarity on the part of the writer and too\n   much understanding on the part of the reader.\n\n2. Specific language is easier to review and easier to localize.\n\nWords like \"this\" and \"it\" are indirect references. For example:\n\n.. code-block:: rst\n\n  Feature A requires all pods to be painted blue. This means that the Agent\n  must apply its \"paint\" action to all pods. To achieve this, use the dedicated\n  CLI invocation.\n\nIn the preceding paragraph, the word \"this\" indirectly references both an\ninferred consequence (\"this means\") and a desired goal state (\"to achieve\nthis\"). Instead, be as specific as possible:\n\n.. code-block:: rst\n\n  Feature A requires all pods to be painted blue. Consequently, the Agent must\n  apply its \"paint\" action to all pods. To make the Agent paint all pods blue,\n  use the dedicated CLI invocation.\n\nThe following subsections contain more examples.\n\nUse specific wording rather than vague wording\n \n Prefer:: \n For each core, the Ingester attempts to spawn a worker pool.\n \n Avoid:: \n For each core, it attempts to spawn a worker pool.\n \n Use specific instructions rather than vague instructions \n \nPrefer::\n\n    Set the annotation value to remote.\n\nAvoid::\n\n    Set it to remote.",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/contributing/docs/docsstyle.rst",
  "extracted_at": "2025-09-03T00:53:44.784198Z"
}
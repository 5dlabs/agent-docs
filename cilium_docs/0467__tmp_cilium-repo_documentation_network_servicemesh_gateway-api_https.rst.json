{
  "url": "file:///tmp/cilium-repo/Documentation/network/servicemesh/gateway-api/https.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _gs_gateway_https:\n\n*************\nHTTPS Example\n*************\n\nThis example builds on the previous :ref:`gs_gateway_http` and add TLS\ntermination for two HTTP routes. For simplicity, the second route to ``productpage``\nis omitted.\n\n.. literalinclude:: ../../../../examples/kubernetes/gateway/basic-https.yaml\n     :language: yaml\n\n.. include:: ../tls-cert.rst\n\nDeploy the Gateway and HTTPRoute\n================================\n\nThe Gateway configuration for this demo provides the similar routing to the\n``details`` and ``productpage`` services.\n\n\n.. tabs::\n\n    .. group-tab:: Self-signed Certificate\n\n        .. parsed-literal::\n\n            $ kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes/gateway/basic-https.yaml\n\n    .. group-tab:: cert-manager\n\n        .. parsed-literal::\n\n            $ kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes/gateway/basic-https.yaml\n\n        To tell cert-manager that this Ingress needs a certificate, annotate the\n        Gateway with the name of the CA issuer we previously created:\n\n        .. code-block:: shell-session\n\n            $ kubectl annotate gateway tls-gateway cert-manager.io/issuer=ca-issuer\n\n        This creates a Certificate object along with a Secret containing the TLS\n        certificate.\n\n        .. code-block:: shell-session\n\n            $ kubectl get certificate,secret demo-cert\n            NAME                                    READY   SECRET      AGE\n            certificate.cert-manager.io/demo-cert   True    demo-cert   29s\n            NAME               TYPE                DATA   AGE\n            secret/demo-cert   kubernetes.io/tls   3      29s\n\nExternal IP address will be shown up in Gateway. Also, the host names should be shown up in\nrelated HTTPRoutes.\n\n.. code-block:: shell-session\n\n    $ kubectl get gateway tls-gateway\n    NAME          CLASS    ADDRESS         PROGRAMMED   AGE\n    tls-gateway   cilium   10.104.247.23   True         29s\n\n    $ kubectl get httproutes https-app-route-1 https-app-route-2\n    NAME                HOSTNAMES                      AGE\n    https-app-route-1   [\"bookinfo.cilium.rocks\"]      29s\n    https-app-route-2   [\"hipstershop.cilium.rocks\"]   29s\n\nUpdate ``/etc/hosts`` with the host names and IP address of the Gateway:\n\n.. code-block:: shell-session\n\n    $ sudo perl -ni -e 'print if !/\\.cilium\\.rocks$/d' /etc/hosts; sudo tee -a /etc/hosts \\\n      <<<\"$(kubectl get gateway tls-gateway -o jsonpath='{.status.addresses[0].value}') bookinfo.cilium.rocks hipstershop.cilium.rocks\"\n\nMake HTTPS Requests\n===================\n\n.. tabs::\n\n    .. group-tab:: Self-signed Certificate\n\n        By specifying the CA's certificate on a curl request, you can say that you trust certificates\n        signed by that CA.\n\n        .. code-block:: shell-session\n\n            $ curl --cacert minica.pem -v https://bookinfo.cilium.rocks/details/1\n            $ curl --cacert minica.pem -v https://hipstershop.cilium.rocks/\n\n        If you prefer, instead of supplying the CA you can specify ``-k`` to tell the\n        curl client not to validate the server's certificate. Without either, you\n        will get an error that the certificate was signed by an unknown authority.\n\n        Specifying -v on the curl request, you can see that the TLS handshake took\n        place successfully.\n\n    .. group-tab:: cert-manager\n\n        .. code-block:: shell-session\n\n            $ curl https://bookinfo.cilium.rocks/details/1\n            $ curl https://hipstershop.cilium.rocks/\n\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/servicemesh/gateway-api/https.rst",
  "extracted_at": "2025-09-03T01:13:29.163309Z"
}
{
  "url": "file:///tmp/cilium-repo/Documentation/network/servicemesh/gateway-api/grpc.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _gs_gateway_grpc:\n\n*************\ngRPC Example\n*************\n\nThis example demonstrates how to set up a Gateway that terminates TLS traffic and\nroutes requests to a gRPC service (i.e. using HTTP/2). In order for this example to\nwork, ALPN support needs to be enabled with the Helm flag ``gatewayAPI.enableAlpn``\nset to true. This enables clients to request HTTP/2 through the TLS negotiation.\n\n.. literalinclude:: ../../../../examples/kubernetes/gateway/grpc-tls-termination.yaml\n     :language: yaml\n\n.. tabs::\n\n    .. group-tab:: Self-signed Certificate\n\n        This example uses a TLS certificate signed by a made-up, `self-signed <https://cert-manager.io/docs/faq/terminology/#what-does-self-signed-mean-is-my-ca-self-signed>`_\n        certificate authority (CA). One easy way to do this is with `mkcert <https://github.com/FiloSottile/mkcert>`_.\n        The certificate will validate the hostname ``grpc-echo.cilium.rocks`` used in this example.\n\n        .. code-block:: shell-session\n\n            $ mkcert bookinfo.cilium.rocks hispter.cilium.rocks\n            Created a new local CA ðŸ’¥\n            Note: the local CA is not installed in the system trust store.\n            Run \"mkcert -install\" for certificates to be trusted automatically âš \n\n            Created a new certificate valid for the following names ðŸ“œ\n             - \"grpc-echo.cilium.rocks\"\n\n            The certificate is at \"./grpc-echo.cilium.rocks.pem\" and the key at \"./grpc-echo.cilium.rocks-key.pem\" âœ…\n\n            It will expire on 28 September 2027 ðŸ—“\n\n        Create a Kubernetes secret with this demo key and certificate:\n\n        .. code-block:: shell-session\n\n            $ kubectl create secret tls grpc-certificate --key=grpc-echo.cilium.rocks-key.pem --cert=grpc-echo.cilium.rocks.pem\n\n    .. group-tab:: cert-manager\n\n        Install cert-manager:\n\n        .. code-block:: shell-session\n\n            $ helm repo add jetstack https://charts.jetstack.io\n            $ helm install cert-manager jetstack/cert-manager --version v1.16.2 \\\n                --namespace cert-manager \\\n                --set crds.enabled=true \\\n                --create-namespace \\\n                --set config.apiVersion=\"controller.config.cert-manager.io/v1alpha1\" \\\n                --set config.kind=\"ControllerConfiguration\" \\\n                --set config.enableGatewayAPI=true\n\n        Now, create a CA Issuer:\n\n        .. parsed-literal::\n\n            $ kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes/servicemesh/ca-issuer.yaml\n\nDeploy the Gateway and GRPCRoute\n================================\n\nThis sets up a simple gRPC echo server and a Gateway to expose it.\n\n.. tabs::\n\n    .. group-tab:: Self-signed Certificate\n\n        .. parsed-literal::\n\n            $ kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes/gateway/grpc-tls-termination.yaml\n\n        The self-signed certificate Secrets from the previous step will be used by this Gateway.\n\n    .. group-tab:: cert-manager\n\n        .. parsed-literal::\n\n            $ kubectl apply -f \\ |SCM_WEB|\\/examples/kubernetes/gateway/grpc-tls-termination.yaml\n\n        To tell cert-manager that this Gateway needs a certificate, annotate the\n        Gateway with the name of the CA issuer you created previously:\n\n        .. code-block:: shell-session\n\n            $ kubectl annotate gateway tls-gateway cert-manager.io/issuer=ca-issuer\n\n        This creates a Certificate object along with a Secret containing the TLS\n        certificate.\n\n        .. code-block:: shell-session\n\n            $ kubectl get certificate,secret grpc-certificate\n            NAME                                           READY   SECRET             AGE\n            certificate.cert-manager.io/grpc-certificate   True    grpc-certificate   83s\n            NAME                      TYPE                DATA   AGE\n            secret/grpc-certificate   kubernetes.io/tls   3      78s\n\nExternal IP address will be shown up in Gateway. Also, the host names should show\nup in related HTTPRoutes.\n\n.. code-block:: shell-session\n\n    $ kubectl get gateway tls-gateway\n    NAME          CLASS    ADDRESS         PROGRAMMED   AGE\n    tls-gateway   cilium   10.104.247.23   True         29s\n\n    $ kubectl get grpcroutes\n    NAME         HOSTNAMES   AGE\n    grpc-route               116s\n\nUpdate ``/etc/hosts`` with the host names and IP address of the Gateway:\n\n.. code-block:: shell-session\n\n    $ sudo perl -ni -e 'print if !/\\.cilium\\.rocks$/d' /etc/hosts; sudo tee -a /etc/hosts \\\n      <<<\"$(kubectl get gateway tls-gateway -o jsonpath='{.status.addresses[0].value}') grpc-echo.cilium.rocks\"\n\nMake gRPC Requests\n===================\n\nYou can use the `grpcurl <https://github.com/fullstorydev/grpcurl>`_ cli tool to verify\nthat the service works correctly. The echo server used in this example will respond\nwith information about the HTTP/2 request the client made.\n\n.. tabs::\n\n    .. group-tab:: Self-signed Certificate\n\n        By specifying the CA's certificate on a curl request, you can say that you \n        trust certificates signed by that CA.\n\n        .. code-block:: shell-session\n\n            $ grpcurl -cacert ~/.local/share/mkcert/rootCA.pem grpc-echo.cilium.rocks:443 proto.EchoTestService/Echo\n\n        If you prefer, instead of supplying the CA you can specify ``-insecure`` to\n        tell the curl client not to validate the server's certificate. Without\n        either, you will get an error that the certificate was signed by an unknown\n        authority.\n\n    .. group-tab:: cert-manager\n\n        .. code-block:: shell-session\n\n            $ grpcurl grpc-echo.cilium.rocks:443 proto.EchoTestService/Echo\n            {\n              \"message\": \"Host=grpc-echo.cilium.rocks:443\\nRequestHeader=:authority:grpc-echo.cilium.rocks:443\\nRequestHeader=content-type:application/grpc\\nRequestHeader=grpc-accept-encoding:gzip\\nRequestHeader=x-forwarded-proto:https\\nRequestHeader=x-request-id:f7889cda-08b2-45cf-9329-833633ae8d9c\\nRequestHeader=user-agent:grpcurl/dev-build (no version set) grpc-go/1.61.0\\nRequestHeader=x-forwarded-for:172.22.0.7\\nRequestHeader=x-envoy-internal:true\\nStatusCode=200\\nServiceVersion=\\nServicePort=7070\\nIP=10.244.1.101\\nProto=GRPC\\nEcho=\\nHostname=grpc-echo-6879fc6969-2kh6r\\n\"\n            }\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/servicemesh/gateway-api/grpc.rst",
  "extracted_at": "2025-09-03T01:13:29.163779Z"
}
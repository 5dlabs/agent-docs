{
  "url": "file:///tmp/cilium-repo/Documentation/installation/cni-chaining-aws-cni.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n .. _chaining_aws_cni: \n \n AWS VPC CNI plugin \n \n This guide explains how to set up Cilium in combination with the AWS VPC CNI\nplugin. In this hybrid mode, the AWS VPC CNI plugin is responsible for setting\nup the virtual network devices as well as for IP address management (IPAM) via\nENIs. After the initial networking is setup for a given pod, the Cilium CNI\nplugin is called to attach eBPF programs to the network devices set up by the\nAWS VPC CNI plugin in order to enforce network policies, perform load-balancing\nand provide encryption. \n .. image:: aws-cilium-architecture.png \n .. include:: cni-chaining-limitations.rst \n .. admonition:: Video\n:class: attention \n If you require advanced features of Cilium, consider migrating fully to Cilium.\nTo help you with the process, you can watch two Principal Engineers at Meltwater talk about  how they migrated   Meltwater's production Kubernetes clusters - from the AWS VPC CNI plugin to Cilium <https://www.youtube.com/watch?v=w6S6baRHHu8&list=PLDg_GiBbAx-kDXqDYimwytMLh2kAHyMPd&t=182s> __. \n .. important:: \n Please ensure that you are running version  1.11.2 <https://github.com/aws/amazon-vpc-cni-k8s/releases/tag/v1.11.2> _\nor newer of the AWS VPC CNI plugin to guarantee compatibility with Cilium. \n .. code-block:: shell-session \n   $ kubectl -n kube-system get ds/aws-node -o json | jq -r '.spec.template.spec.containers[0].image'\n  602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni:v1.11.2\n \n If you are running an older version, as in the above example, you can upgrade it with: \n .. code-block:: shell-session \n   $ kubectl apply -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/release-1.11/config/master/aws-k8s-cni.yaml\n \n .. image:: aws-cni-architecture.png \n Setting up a cluster on AWS \n Follow the instructions in the :ref: k8s_install_quick  guide to set up an EKS\ncluster, or use any other method of your preference to set up a Kubernetes\ncluster on AWS. \n Ensure that the  aws-vpc-cni-k8s <https://github.com/aws/amazon-vpc-cni-k8s> _\nplugin is installed â€” which will already be the case if you have created an EKS\ncluster. Also, ensure the version of the plugin is up-to-date as per the above. \n .. include:: k8s-install-download-release.rst \n Deploy Cilium via Helm: \n .. parsed-literal:: \n helm install cilium |CHART_RELEASE| \\\n--namespace kube-system \\\n--set cni.chainingMode=aws-cni \\\n--set cni.exclusive=false \\\n--set enableIPv4Masquerade=false \\\n--set routingMode=native \n This will enable chaining with the AWS VPC CNI plugin. It will also disable\ntunneling, as it's not required since ENI IP addresses can be directly routed\nin the VPC. For the same reason, masquerading can be disabled as well. \n Restart existing pods \n The new CNI chaining configuration  will not  apply to any pod that is already\nrunning in the cluster. Existing pods will be reachable, and Cilium will\nload-balance  to  them, but not  from  them. Policy enforcement will also not\nbe applied. For these reasons, you must restart these pods so that the chaining\nconfiguration can be applied to them. \n The following command can be used to check which pods need to be restarted: \n .. code-block:: bash \n for ns in $(kubectl get ns -o jsonpath='{.items[ ].metadata.name}'); do\nceps=$(kubectl -n \"${ns}\" get cep  \n-o jsonpath='{.items[ ].metadata.name}')\npods=$(kubectl -n \"${ns}\" get pod  \n-o custom-columns=NAME:.metadata.name,NETWORK:.spec.hostNetwork  \n| grep -E '\\s( |false)' | awk '{print $1}' | tr '\\n' ' ')\nncep=$(echo \"${pods} ${ceps}\" | tr ' ' '\\n' | sort | uniq -u | paste -s -d ' ' -)\nfor pod in $(echo $ncep); do\necho \"${ns}/${pod}\";\ndone\ndone \n .. include:: k8s-install-validate.rst \n Advanced \n Enabling security groups for pods (EKS) \n Cilium can be used alongside the  security groups for pods <https://docs.aws.amazon.com/eks/latest/userguide/security-groups-for-pods.html> _\nfeature of EKS in supported clusters when running in chaining mode. Follow the\ninstructions below to enable this feature: \n .. important:: \n The following guide requires  jq <https://stedolan.github.io/jq/> _ and the\n AWS CLI <https://aws.amazon.com/cli/> _ to be installed and configured. \n Make sure that the  AmazonEKSVPCResourceController  managed policy is attached\nto the IAM role associated with the EKS cluster: \n .. code-block:: shell-session \n export EKS_CLUSTER_NAME=\"my-eks-cluster\" # Change accordingly\nexport EKS_CLUSTER_ROLE_NAME=$(aws eks describe-cluster  \n--name \"${EKS_CLUSTER_NAME}\"  \n| jq -r '.cluster.roleArn' | awk -F/ '{print $NF}')\naws iam attach-role-policy  \n--policy-arn arn:aws:iam::aws:policy/AmazonEKSVPCResourceController  \n--role-name \"${EKS_CLUSTER_ROLE_NAME}\" \n Then, as mentioned above, make sure that the version of the AWS VPC CNI\nplugin running in the cluster is up-to-date: \n .. code-block:: shell-session \n kubectl -n kube-system get ds/aws-node  \n-o jsonpath='{.spec.template.spec.containers[0].image}'\n602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni:v1.7.10 \n Next, patch the  kube-system/aws-node  DaemonSet in order to enable security\ngroups for pods: \n .. code-block:: shell-session \n kubectl -n kube-system patch ds aws-node  \n-p '{\"spec\":{\"template\":{\"spec\":{\"initContainers\":[{\"env\":[{\"name\":\"DISABLE_TCP_EARLY_DEMUX\",\"value\":\"true\"}],\"name\":\"aws-vpc-cni-init\"}],\"containers\":[{\"env\":[{\"name\":\"ENABLE_POD_ENI\",\"value\":\"true\"}],\"name\":\"aws-node\"}]}}}}'\nkubectl -n kube-system rollout status ds aws-node \n After the rollout is complete, all nodes in the cluster should have the  vps.amazonaws.com/has-trunk-attached  label set to  true : \n .. code-block:: shell-session \n kubectl get nodes -L vpc.amazonaws.com/has-trunk-attached\nNAME                                            STATUS   ROLES    AGE   VERSION              HAS-TRUNK-ATTACHED\nip-192-168-111-169.eu-west-2.compute.internal   Ready        22m   v1.19.6-eks-49a6c0   true\nip-192-168-129-175.eu-west-2.compute.internal   Ready        22m   v1.19.6-eks-49a6c0   true \n From this moment everything should be in place. For details on how to actually\nassociate security groups to pods, please refer to the  official documentation <https://docs.aws.amazon.com/eks/latest/userguide/security-groups-for-pods.html> _. \n .. include:: next-steps.rst",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/installation/cni-chaining-aws-cni.rst",
  "extracted_at": "2025-09-03T01:13:29.317182Z"
}
{
  "url": "file:///tmp/cilium-repo/Documentation/contributing/release/backports.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n .. _backport_process: \n Backporting process \n .. _backport_criteria: \n Backport Criteria \n Committers may nominate PRs that have been merged into main as candidates for\nbackport into stable releases if they affect the stable production usage\nof community users. \n Backport Criteria for Current Minor Release \n \nCriteria for inclusion into the next stable release of the current latest\nminor version of Cilium, for example in a ``v1.2.z`` release prior to the\nrelease of version ``v1.3.0``:\n\n- All bugfixes\n- Debug tool improvements\n\nBackport Criteria for X.Y-1.Z and X.Y-2.Z\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCriteria for the inclusion into the next stable release of the prior two minor\nversions of Cilium, for example in a ``v1.0.z`` or ``v1.1.z`` release prior to\nthe release of version ``v1.3.0``:\n\n- Security relevant fixes\n- Major bugfixes relevant to the correct operation of Cilium\n- Debug tool improvements\n\n.. _backport_criteria_docs:\n\nBackport Criteria for documentation changes\n \n Changes to Cilium's documentation should generally be subject to backports for\nall supported branches to which they apply (all supported branches containing\nthe parent features to which the modified sections relate). \n The motivation is that users can then simply look at the branch of the\ndocumentation related to the version they are deploying, and find the latest\ncorrect instructions for their version. \n Proposing PRs for backporting \n \nPRs are proposed for backporting by adding a ``needs-backport/X.Y`` label to\nthem. Normally this is done by the author when the PR is created or one of the\nmaintainers when the PR is reviewed. When proposing PRs that have already been\nmerged, also add a comment to the PR to ensure that the backporters are\nnotified.\n\nMarking PRs to be backported by the author\n \n For PRs which need to be backported, but are likely to run into conflicts or\nother difficulties, the author has the option of adding the  backport/author \nlabel. This will exclude the PR from backporting automation, and the author is\nexpected to perform the backport themselves. \n Backporting Guide for the Backporter \n Cilium PRs that are marked with the label  needs-backport/X.Y  need to be\nbackported to the stable branch  X.Y . The following steps summarize the\nprocess for backporting these PRs: \n \n One-time setup \n Preparing PRs for backport \n Cherry-picking commits into a backport branch \n Posting the PR and updating GitHub labels \n \n .. _backport_setup: \n One-time Setup \n \n#. Make sure you have a GitHub developer access token with the ``public_repos``\n   ``workflow``, ``read:user`` scopes available. You can do this directly from\n   https://github.com/settings/tokens or by opening GitHub and then navigating\n   to: User Profile -> Settings -> Developer Settings -> Personal access token\n   -> Generate new token.\n\n#. The scripts referred to below need to be run on Linux, they do not work on\n   macOS. It is recommended to create a container using (``contrib/backporting/Dockerfile``),\n   as it will have all the correct versions of dependencies / libraries.\n\n   .. code-block:: shell-session\n\n      $ export GITHUB_TOKEN=<YOUR_GITHUB_TOKEN>\n\n      $ docker build -t cilium-backport contrib/backporting/.\n\n      $ docker run -e GITHUB_TOKEN -v $(pwd):/cilium -v \"$HOME/.ssh\":/home/user/.ssh \\\n            -it cilium-backport /bin/bash\n\n   .. note::\n\n      If you are running on a mac OS, and see ``/home/user/.ssh/config: line 3:\n      Bad configuration option: usekeychain`` error message while running any of\n      the backporting scripts, comment out the line ``UseKeychain yes``.\n\n#. Once you have a setup ready, you need to configure git to have your name and\n   email address to be used in the commit messages:\n\n   .. code-block:: shell-session\n\n      $ git config --global user.name \"John Doe\"\n      $ git config --global user.email johndoe@example.com\n\n#. Add remotes for the Cilium upstream repository and your Cilium repository fork.\n\n   .. code-block:: shell-session\n\n      $ git remote add johndoe git@github.com:johndoe/cilium.git\n      $ git remote add upstream https://github.com/cilium/cilium.git\n\n#. Skip this step if you have created a setup using the pre-defined Dockerfile.\n   This guide makes use of several tools to automate the backporting process.\n   The basics require ``bash`` and ``git``, but to automate interactions with\n   github, further tools are required.\n\n   +--------------------------------------------------------------+-----------+---------------------------------------------------------+\n   | Dependency                                                   | Required? | Download Command                                        |\n   +==============================================================+===========+=========================================================+\n   | bash                                                         | Yes       | N/A (OS-specific)                                       |\n   +--------------------------------------------------------------+-----------+---------------------------------------------------------+\n   | git                                                          | Yes       | N/A (OS-specific)                                       |\n   +--------------------------------------------------------------+-----------+---------------------------------------------------------+\n   | jq                                                           | Yes       | N/A (OS-specific)                                       |\n   +--------------------------------------------------------------+-----------+---------------------------------------------------------+\n   | python3                                                      | Yes       | `Python Downloads <https://www.python.org/downloads/>`_ |\n   +--------------------------------------------------------------+-----------+---------------------------------------------------------+\n   | `PyGithub <https://pypi.org/project/PyGithub/>`_             | Yes       | ``pip3 install PyGithub``                               |\n   +--------------------------------------------------------------+-----------+---------------------------------------------------------+\n   | `Github hub CLI (>= 2.8.3) <https://github.com/github/hub>`_ | Yes       | N/A (OS-specific)                                       |\n   +--------------------------------------------------------------+-----------+---------------------------------------------------------+\n\n   Verify your machine is correctly configured by running\n\n   .. code-block:: shell-session\n\n      $ go run ./tools/dev-doctor --backporting\n\nPreparation\n~~~~~~~~~~~\n\nPull requests that are candidates for backports to the X.Y stable release are\ntracked through the following links:\n\n* PRs with the needs-backport/X.Y label (\\ |CURRENT_RELEASE|: :github-backport:`GitHub Link<needs-backport>`)\n* PRs with the backport-pending/X.Y label (\\ |CURRENT_RELEASE|: :github-backport:`GitHub Link<backport-pending>`)\n* The X.Y GitHub project (\\ |NEXT_RELEASE|: :github-project:`GitHub Link<>`)\n\nMake sure that the Github labels are up-to-date, as this process will deal with\nall commits from PRs that have the ``needs-backport/X.Y`` label set (for a\nstable release version X.Y).\n\nCreating the Backports Branch\n \n #. Check whether there are any  outstanding backport PRs for the target branch    <https://github.com/cilium/cilium/pulls?q=is%3Aopen+is%3Apr+label%3Akind%2Fbackports> __.\nIf there are already backports for that branch, create a thread in the\n#launchpad channel in  Cilium Slack _ and reach out to the author to\ncoordinate triage, review and merge of the existing PR into the target\nbranch. \n #. Run  contrib/backporting/start-backport  for the release version that\nyou intend to backport PRs for. This will pull the latest repository commits\nfrom the Cilium repository (assumed to be the git remote  origin ), create\na new branch, and runs the  contrib/backporting/check-stable  script to\nfetch the full set of PRs to backport. \n .. code-block:: shell-session \n   $ GITHUB_TOKEN=xxx contrib/backporting/start-backport 1.0\n \n .. note:: \n   This command will leave behind a file in the current directory with a\n  name based upon the release version and the current date in the form\n  ``vRELEASE-backport-YYYY-MM-DD.txt`` which contains a prepared backport\n  pull-request description so you don't need to write one yourself.\n \n #. Cherry-pick the commits using the  main  branch git SHAs listed, starting\nfrom the oldest (top), working your way down and fixing any merge\nconflicts as they appear. Note that for PRs that have multiple\ncommits you will want to check that you are cherry-picking oldest\ncommits first. The  cherry-pick  script accepts multiple arguments,\nin which case it will attempt to apply each commit in the order\nspecified on the command line until one cherry pick fails or every\ncommit is cherry-picked. \n .. code-block:: shell-session \n   $ contrib/backporting/cherry-pick <oldest-commit-sha>\n  ...\n  $ contrib/backporting/cherry-pick <newest-commit-sha>\n \n Conflicts may be resolved by applying changes or backporting other\nPRs to completely avoid conflicts. Backporting entire PRs is preferred if the\nchanges in the dependent PRs are small.  This stackoverflow.com question    <https://stackoverflow.com/questions/17818167/find-a-pull-request-on-github-where-a-commit-was-originally-created> _\ndescribes how to determine the original PR corresponding to a particular\ncommit SHA in the GitHub UI. \n If a conflict is resolved by modifying a commit during backport, describe\nthe changes made in the commit message and collect these to add to the\nbackport PR description when creating the PR below. This helps to direct\nbackport reviewers towards which changes may deviate from the original\ncommits to ensure that the changes are correctly backported. This can be\nfairly simple, for example inside the commit message of the modified commit:: \n    commit f0f09158ae7f84fc8d888605aa975ce3421e8d67\n   Author: Joe Stringer <joe@cilium.io>\n   Date:   Tue Apr 20 16:48:18 2021 -0700\n\n       contrib: Automate digest PR creation\n\n       [ upstream commit 893d0e7ec5766c03da2f0e7b8c548f7c4d89fcd7 ]\n\n       [ Backporter's notes: Dropped conflicts in .github/ issue template ]\n\n       There's still some interactive bits here just for safety, but one less\n       step in the template.\n\n       Signed-off-by: Joe Stringer <joe@cilium.io>\n \n It is the backporter's responsibility to check that the backport commits\nthey are preparing are identical to the original commits . This can be\nachieved by preparing the commits, then running  git show <commit>  for\nboth the original upstream commit and the prepared backport, and read\nthrough the commits side-by-side, line-by-line to check that the changes are\nthe same. If there is any uncertainty about the backport, reach out to the\noriginal author directly to coordinate how to prepare the backport for the\ntarget branch. \n #. For backporting commits that update cilium-builder and cilium-runtime images,\nthe backporter builds new images as described in :ref: update_cilium_builder_runtime_images . \n #. (Optional) If there are any commits or pull requests that are tricky or\ntime-consuming to backport, consider reaching out for help on  Cilium    Slack _. If the commit does not cherry-pick cleanly, please mention the\nnecessary changes in the pull request description in the next section. \n Creating the Backport Pull Request \n \nThe backport pull-request may be created via CLI tools, or alternatively\nyou can use the GitHub web interface to achieve these steps.\n\nVia Command-Line Tools (Recommended)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThese steps require all of the tools described in the :ref:`backport_setup`\nsection above. It pushes the git tree, creates the pull request and updates\nthe labels for the PRs that are backported, based on the\n``vRELEASE-backport-YYYY-MM-DD.txt`` file in the current directory.\n\n   .. code-block:: shell-session\n\n      $ GITHUB_TOKEN=xxx contrib/backporting/submit-backport\n\nThe script takes up to three positional arguments::\n\n      usage: submit-backport [branch version] [pr-summary] [your remote]\n\n- The first parameter is the version of the branch against which the PR should\n  be done, and defaults to the version passed to ``start-backport``.\n- The second one is the name of the file containing the text summary to use for\n  the PR, and defaults to the file created by ``start-backport``.\n- The third one is the name of the git remote of your (forked) repository to\n  which your changes will be pushed. It defaults to the git remote\n  which matches ``github.com/<your github username>/cilium``.\n\nVia GitHub Web Interface\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n#. Push your backports branch to your fork of the Cilium repo.\n\n   .. code-block:: shell-session\n\n      $ git push -u <remote_for_your_fork> HEAD\n\n#. Create a new PR from your branch towards the feature branch you are\n   backporting to. Note that by default Github creates PRs against the\n   ``main`` branch, so you will need to change it. The title and\n   description for the pull request should be based upon the\n   ``vRELEASE-backport-YYYY-MM-DD.txt`` file that was generated by the scripts\n   above.\n\n   .. note::\n\n       The ``vRELEASE-backport-YYYY-MM-DD.txt`` file will include:\n\n          .. code-block:: RST\n\n                Once this PR is merged, a GitHub action will update the labels of these PRs:\n                ```upstream-prs\n                AAA BBB\n                ```\n\n       The ``upstream-prs`` tag `is required\n       <https://github.com/cilium/release/blob/3c5fc2bdc38f8d290349a612a03cc83655f57a51/pkg/github/labels.go#L26>`_,\n       so add it if you manually write the message.\n\n\n#. Label the new backport PR with the backport label for the stable branch such\n   as ``backport/X.Y`` as well as ``kind/backports`` so that it is easy to find\n   backport PRs later.\n\n#. Mark all PRs you backported with the backport pending label\n   ``backport-pending/X.Y`` and clear the ``needs-backport/X.Y`` label. This\n   can be done with the command printed out at the bottom of the output from\n   the ``start-backport`` script above (``GITHUB_TOKEN`` needs to be set for\n   this to work).\n\nRunning the CI Against the Pull Request\n \n To validate a cross-section of various tests against the PRs, backport PRs\nshould be validated in the CI by running all CI targets. This can be triggered\nby adding a comment to the PR with exactly the text  /test , as described in\n:ref: trigger_phrases .\nThe comment must not contain any other characters. \n After the Backports are Merged \n \nAfter the backport PR is merged, the GH workflow \"Call Backport Label Updater\"\nshould take care of marking all backported PRs with the ``backport-done/X.Y``\nlabel and clear the ``backport-pending/X.Y`` label(s).\nVerify that the workflow succeeded by looking `here\n<https://github.com/cilium/cilium/actions/workflows/call-backport-label-updater.yaml>`_.\n\nBackporting Guide for Others\n----------------------------\n\nOriginal Committers and Reviewers\n \n Committers should mark PRs needing backport as  needs-backport/X.Y , based on\nthe  backport criteria <backport_criteria_> _. It is up to the reviewers to\nconfirm that the backport request is reasonable and, if not, raise concerns on\nthe PR as comments. In addition, if conflicts are foreseen or significant\nchanges to the PR are necessary for older branches, consider adding the\n backport/author  label to mark the PR to be backported by the author. \n At some point, changes will be picked up on a backport PR and the committer will\nbe notified and asked to approve the backport commits. Confirm that: \n #. All the commits from the original PR have been indeed backported.\n#. In case of conflicts, the resulting changes look good.",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/contributing/release/backports.rst",
  "extracted_at": "2025-09-03T01:13:28.821645Z"
}
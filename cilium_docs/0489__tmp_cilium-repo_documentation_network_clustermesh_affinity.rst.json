{
  "url": "file:///tmp/cilium-repo/Documentation/network/clustermesh/affinity.rst",
  "content": ".. _gs_clustermesh_service_affinity: \n \n Service Affinity \n \n This tutorial will guide you to enable service affinity across multiple\nKubernetes clusters. \n Prerequisites\n############# \n You need to have a functioning Cluster Mesh with a Global Service, please\nfollow the guide :ref: gs_clustermesh  and :ref: gs_clustermesh_services \nto set it up. \n Enabling Global Service Affinity\n################################ \n Load-balancing across multiple clusters might not be ideal in some cases.\nThe annotation  service.cilium.io/affinity: \"local|remote|none\"  can be used\nto specify the preferred endpoint destination. \n For example, if the value of annotation  service.cilium.io/affinity  is local,\nthe Global Service will load-balance across healthy  local  backends, and only user\nremote endpoints if and only if all of local backends are not available or unhealthy. \n .. code-block:: yaml \n apiVersion: v1\nkind: Service\nmetadata:\nname: rebel-base\nannotations:\nservice.cilium.io/global: \"true\"\n# Possible values:\n# - local\n#    preferred endpoints from local cluster if available\n# - remote\n#    preferred endpoints from remote cluster if available\n# none (default)\n#    no preference. Default behavior if this annotation does not exist\nservice.cilium.io/affinity: \"local\"\nspec:\ntype: ClusterIP\nports:\n- port: 80\nselector:\nname: rebel-base \n \n \n In cluster 1, add  service.cilium.io/affinity=\"local\"  to existing global service \n .. code-block:: shell-session \n kubectl annotate service rebel-base service.cilium.io/affinity=local --overwrite \n \n \n From cluster 1, access the global service: \n .. code-block:: shell-session \n kubectl exec -ti deployment/x-wing -- curl rebel-base \n You will see replies from pods in  cluster 1  only. \n \n \n From cluster 2, access the global service: \n .. code-block:: shell-session \n kubectl exec -ti deployment/x-wing -- curl rebel-base \n You will see replies from pods in both clusters as usual. \n \n \n From cluster 1, check the service endpoints, the local endpoints are marked\nas preferred. \n .. code-block:: shell-session \n kubectl exec -n kube-system -ti ds/cilium -- cilium-dbg service list --clustermesh-affinity \n ID   Frontend            Service Type   Backend\n1    10.96.0.1:443       ClusterIP      1 => 172.18.0.3:6443 (active)\n2    10.96.0.10:53       ClusterIP      1 => 10.244.1.171:53 (active)\n2 => 10.244.2.206:53 (active)\n3    10.96.0.10:9153     ClusterIP      1 => 10.244.1.171:9153 (active)\n2 => 10.244.2.206:9153 (active)\n4    10.96.210.49:2379   ClusterIP      1 => 10.244.2.216:2379 (active)\n5    10.96.173.113:80    ClusterIP      1 => 10.244.2.136:80 (active)\n2 => 10.244.1.61:80 (active) (preferred)\n3 => 10.244.2.31:80 (active) (preferred)\n4 => 10.244.2.200:80 (active) \n \n \n In cluster 1, change  service.cilium.io/affinity  value to  remote  for existing global service \n .. code-block:: shell-session \n kubectl annotate service rebel-base service.cilium.io/affinity=remote --overwrite \n \n \n From cluster 1, access the global service: \n .. code-block:: shell-session \n kubectl exec -ti deployment/x-wing -- curl rebel-base \n This time, the replies are coming from pods in  cluster 2  only. \n \n \n From cluster 1, check the service endpoints, now the remote endpoints are marked\nas preferred. \n .. code-block:: shell-session \n kubectl exec -n kube-system -ti ds/cilium -- cilium-dbg service list --clustermesh-affinity \n ID   Frontend            Service Type   Backend\n1    10.96.0.1:443       ClusterIP      1 => 172.18.0.3:6443 (active)\n2    10.96.0.10:53       ClusterIP      1 => 10.244.1.171:53 (active)\n2 => 10.244.2.206:53 (active)\n3    10.96.0.10:9153     ClusterIP      1 => 10.244.1.171:9153 (active)\n2 => 10.244.2.206:9153 (active)\n4    10.96.210.49:2379   ClusterIP      1 => 10.244.2.216:2379 (active)\n5    10.96.173.113:80    ClusterIP      1 => 10.244.2.136:80 (active) (preferred)\n2 => 10.244.1.61:80 (active)\n3 => 10.244.2.31:80 (active)\n4 => 10.244.2.200:80 (active) (preferred) \n \n \n From cluster 2, access the global service: \n .. code-block:: shell-session \n kubectl exec -ti deployment/x-wing -- curl rebel-base \n You will see replies from pods in both clusters as usual. \n \n \n In cluster 1, remove  service.cilium.io/affinity  annotation for existing global service \n .. code-block:: shell-session \n kubectl annotate service rebel-base service.cilium.io/affinity- --overwrite \n \n \n From either cluster, access the global service: \n .. code-block:: shell-session \n kubectl exec -ti deployment/x-wing -- curl rebel-base\n \n You will see replies from pods in both clusters again.",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/clustermesh/affinity.rst",
  "extracted_at": "2025-09-03T01:13:29.195175Z"
}
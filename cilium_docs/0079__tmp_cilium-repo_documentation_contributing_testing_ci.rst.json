{
  "url": "file:///tmp/cilium-repo/Documentation/contributing/testing/ci.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n .. _ci_gha: \n CI  / GitHub Actions \n The main CI infrastructure is maintained on GitHub Actions (GHA). \n This infrastructure is broadly comprised of smoke tests and platform tests.\nSmoke tests are typically initiated by  pull_request  or\n pull_request_target  triggers automatically when opening or updating a pull\nrequest. Platform tests often require an organization member to manually\ntrigger the test when the pull request is ready to be tested. \n Triggering Smoke Tests \n \nSeveral short-running tests are automatically triggered for all contributor\nsubmissions, subject to GitHub's limitations around first-time contributors.\nIf no GitHub workflows are triggering on your PR, a committer for the project\nshould trigger these within a few days. Reach out in the ``#testing``\nchannel on `Cilium Slack`_ for assistance in running these tests.\n\n.. _trigger_phrases:\n\nTriggering Platform Tests\n \n To ensure that build resources are used judiciously, some tests on GHA are\nmanually triggered via comments. These builds typically make use of cloud\ninfrastructure, such as allocating clusters or VMs in AKS, EKS or GKE. In\norder to trigger these jobs, a member of the GitHub organization must post a\ncomment on the Pull Request with a \"trigger phrase\". \n If you'd like to trigger these jobs, ask in  Cilium Slack _ in the  #testing \nchannel. If you're regularly contributing to Cilium, you can also  become a member <https://github.com/cilium/community/blob/main/CONTRIBUTOR-LADDER.md#organization-member> __\nof the Cilium organization. \n Depending on the PR target branch, a specific set of jobs is marked as required,\nas per the  Cilium CI matrix _. They will be automatically featured in PR checks\ndirectly on the PR page. The  /test  trigger phrase may be used to trigger\nthem all at once. \n More triggers can be found in  ariane-config.yaml <https://github.com/cilium/cilium/blob/main/.github/ariane-config.yaml> _ \n For a full list of GHA, see  GitHub Actions Page <https://github.com/cilium/cilium/actions> _ \n Using GitHub Actions for testing \n \nOn GHA, running a specific set of Ginkgo tests (``conformance-ginkgo.yaml``)\ncan also be accomplished by modifying the files under\n``.github/actions/ginkgo/`` by adding or removing entries.\n\n``main-focus.yaml``:\n\n    This file contains a list of tests to include and exclude. The ``cliFocus``\n    defined for each element in the \"include\" section is expanded to the\n    specific defined ``focus``. This mapping allows us to determine which regex\n    should be used with ``ginkgo --focus`` for each element in the \"focus\" list.\n    See :ref:`ginkgo-documentation` for more information about ``--focus`` flag.\n\n    Additionally, there is a list of excluded tests along with justifications\n    in the form of comments, explaining why each test is excluded based on\n    constraints defined in the ginkgo tests.\n\n    For more information, refer to\n    `GitHub's documentation on expanding matrix configurations <https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs#expanding-or-adding-matrix-configurations>`__\n\n``main-k8s-versions.yaml``:\n\n    This file defines which kernel versions should be run with specific Kubernetes\n    (k8s) versions. It contains an \"include\" section where each entry consists of\n    a k8s version, IP family, Kubernetes image, and kernel version. These details\n    determine the combinations of k8s versions and kernel versions to be tested.\n\n``main-prs.yaml``:\n\n    This file specifies the k8s versions to be executed for each pull request (PR).\n    The list of k8s versions under the \"k8s-version\" section determines the matrix\n    of jobs that should be executed for CI when triggered by PRs.\n\n``main-scheduled.yaml``:\n\n    This file specifies the k8s versions to be executed on a regular basis. The\n    list of k8s versions under the \"k8s-version\" section determines the matrix of\n    jobs that should be executed for CI as part of scheduled jobs.\n\nWorkflow interactions:\n\n    - The ``main-focus.yaml`` file helps define the test focus for CI jobs based on\n      specific criteria, expanding the ``cliFocus`` to determine the relevant\n      ``focus`` regex for ``ginkgo --focus``.\n\n    - The ``main-k8s-versions.yaml`` file defines the mapping between k8s versions\n      and the associated kernel versions to be tested.\n\n    - Both ``main-prs.yaml`` and ``main-scheduled.yaml`` files utilize the\n      \"k8s-version\" section to specify the k8s versions that should be included\n      in the job matrix for PRs and scheduled jobs respectively.\n\n    - These files collectively contribute to the generation of the job matrix\n      for GitHub Actions workflows, ensuring appropriate testing and validation\n      of the defined k8s versions.\n\nFor example, to only run the test under ``f09-datapath-misc-2`` with Kubernetes\nversion 1.26, the following files can be modified to have the following content:\n\n``main-focus.yaml``:\n\n   .. code-block:: yaml\n\n        ---\n        focus:\n        - \"f09-datapath-misc-2\"\n        include:\n          - focus: \"f09-datapath-misc-2\"\n            cliFocus: \"K8sDatapathConfig Check|K8sDatapathConfig IPv4Only|K8sDatapathConfig High-scale|K8sDatapathConfig Iptables|K8sDatapathConfig IPv4Only|K8sDatapathConfig IPv6|K8sDatapathConfig Transparent\"\n\n``main-prs.yaml``:\n\n   .. code-block:: yaml\n\n        ---\n        k8s-version:\n          - \"1.26\"\n\nThe ``main-k8s-versions.yaml`` and ``main-scheduled.yaml`` files can be left\nunmodified and this will result in the execution on the tests under\n``f09-datapath-misc-2`` for the ``k8s-version`` \"``1.26``\".\n\n\nBisect process\n^^^^^^^^^^^^^^\n\nBisecting Ginkgo tests (``conformance-ginkgo.yaml``) can be performed by\nmodifying the workflow file, as well as modifying the files under\n``.github/actions/ginkgo/`` as explained in the previous section. The sections\nthat need to be modified for the ``conformance-ginkgo.yaml`` can be found in\nform of comments inside that file under the ``on`` section and enable the\nevent type of ``pull_request``. Additionally, the following section also needs\nto be modified:\n\n   .. code-block:: yaml\n\n        jobs:\n          check_changes:\n            name: Deduce required tests from code changes\n            [...]\n            outputs:\n              tested: ${{ steps.tested-tree.outputs.src }}\n              matrix_sha: ${{ steps.sha.outputs.sha }}\n              base_branch: ${{ steps.sha.outputs.base_branch }}\n              sha: ${{ steps.sha.outputs.sha }}\n              #\n              # For bisect uncomment the base_branch and 'sha' lines below and comment\n              # the two lines above this comment\n              #\n              #base_branch: <replace with the base branch name, should be 'main', not your branch name>\n              #sha: <replace with the SHA of an existing docker image tag that you want to bisect>\n\nAs per the instructions, the ``base_branch`` needs to be uncommented and\nshould point to the base branch name that we are testing. The ``sha`` must to\npoint to the commit SHA that we want to bisect. **The SHA must point to an\nexisting image tag under the ``quay.io/cilium/cilium-ci`` docker image\nrepository**.\n\nIt is possible to find out whether or not a SHA exists by running either\n``docker manifest inspect`` or ``docker buildx imagetools inspect``.\nThis is an example output for the non-existing SHA ``22fa4bbd9a03db162f08c74c6ef260c015ecf25e``\nand existing SHA ``7b368923823e63c9824ea2b5ee4dc026bc4d5cd8``:\n\n\n   .. code-block:: shell\n\n        $ docker manifest inspect quay.io/cilium/cilium-ci:22fa4bbd9a03db162f08c74c6ef260c015ecf25e\n        ERROR: quay.io/cilium/cilium-ci:22fa4bbd9a03db162f08c74c6ef260c015ecf25e: not found\n\n        $ docker buildx imagetools inspect quay.io/cilium/cilium-ci:7b368923823e63c9824ea2b5ee4dc026bc4d5cd8\n        Name:      quay.io/cilium/cilium-ci:7b368923823e63c9824ea2b5ee4dc026bc4d5cd8\n        MediaType: application/vnd.docker.distribution.manifest.list.v2+json\n        Digest:    sha256:0b7d1078570e6979c3a3b98896e4a3811bff483834771abc5969660df38463b5\n\n        Manifests:\n          Name:      quay.io/cilium/cilium-ci:7b368923823e63c9824ea2b5ee4dc026bc4d5cd8@sha256:63dbffea393df2c4cc96ff340280e92d2191b6961912f70ff3b44a0dd2b73c74\n          MediaType: application/vnd.docker.distribution.manifest.v2+json\n          Platform:  linux/amd64\n\n          Name:      quay.io/cilium/cilium-ci:7b368923823e63c9824ea2b5ee4dc026bc4d5cd8@sha256:0c310ab0b7a14437abb5df46d62188f4b8b809f0a2091899b8151e5c0c578d09\n          MediaType: application/vnd.docker.distribution.manifest.v2+json\n          Platform:  linux/arm64\n\nOnce the changes are committed and pushed into a draft Pull Request, it is\npossible to visualize the test results on the Pull Request's page.\n\nGitHub Test Results\n^^^^^^^^^^^^^^^^^^^\n\nOnce the test finishes, its result is sent to the respective Pull Request's\npage.\n\nIn case of a failure, it is possible to check with test failed by going over the\nsummary of the test on the GitHub Workflow Run's page:\n\n\n.. image:: /images/gha-summary.png\n    :align: center\n\n\nOn this example, the test ``K8sDatapathConfig Transparent encryption DirectRouting Check connectivity with transparent encryption and direct routing with bpf_host``\nfailed. With the ``cilium-sysdumps`` artifact available for download we can\nretrieve it and perform further inspection to identify the cause for the\nfailure. To investigate CI failures, see :ref:`ci_failure_triage`.\n\n.. _test_matrix:\n\nTesting matrix\n^^^^^^^^^^^^^^\n\nUp to date CI testing information regarding k8s - kernel version pairs can\nalways be found in the `Cilium CI matrix`_.\n\n.. _Cilium CI matrix: https://docs.google.com/spreadsheets/d/1TThkqvVZxaqLR-Ela4ZrcJ0lrTJByCqrbdCjnI32_X0\n\n.. _ci_failure_triage:\n\nCI Failure Triage\n~~~~~~~~~~~~~~~~~\n\nThis section describes the process to triage CI failures. We define 3 categories:\n\n+----------------------+-----------------------------------------------------------------------------------+\n| Keyword              | Description                                                                       |\n+======================+===================================================================================+\n| Flake                | Failure due to a temporary situation such as loss of connectivity to external     |\n|                      | services or bug in system component, e.g. quay.io is down, VM race conditions,    |\n|                      | kube-dns bug, ...                                                                 |\n+----------------------+-----------------------------------------------------------------------------------+\n| CI-Bug               | Bug in the test itself that renders the test unreliable, e.g. timing issue when   |\n|                      | importing and missing to block until policy is being enforced before connectivity |\n|                      | is verified.                                                                      |\n+----------------------+-----------------------------------------------------------------------------------+\n| Regression           | Failure is due to a regression, all failures in the CI that are not caused by     |\n|                      | bugs in the test are considered regressions.                                      |\n+----------------------+-----------------------------------------------------------------------------------+\n\nTriage process\n^^^^^^^^^^^^^^\n\n#. Investigate the failure you are interested in and determine if it is a\n   CI-Bug, Flake, or a Regression as defined in the table above.\n\n   #. Search `GitHub issues <https://github.com/cilium/cilium/issues?utf8=%E2%9C%93&q=is%3Aissue+>`_\n      to see if bug is already filed. Make sure to also include closed issues in\n      your search as a CI issue can be considered solved and then re-appears.\n      Good search terms are:\n\n      - The test name, e.g.\n        ::\n\n            k8s-1.7.K8sValidatedKafkaPolicyTest Kafka Policy Tests KafkaPolicies (from (k8s-1.7.xml))\n\n      - The line on which the test failed, e.g.\n        ::\n\n            github.com/cilium/cilium/test/k8s/kafka_policies.go:202\n\n      - The error message, e.g.\n        ::\n\n            Failed to produce from empire-hq on topic deathstar-plan\n\n#. If a corresponding GitHub issue exists, update it with:\n\n   #. A link to the failing GHA build (note that the build information is\n      eventually deleted).\n\n#. If no existing GitHub issue was found, file a `new GitHub issue <https://github.com/cilium/cilium/issues/new>`_:\n\n   #. Attach failure case and logs from failing test\n   #. If the failure is a new regression or a real bug:\n\n      #. Title: ``<Short bug description>``\n      #. Labels ``kind/bug`` and ``needs/triage``.\n\n   #. If failure is a new CI-Bug, Flake or if you are unsure:\n\n      #. Title ``CI: <testname>: <cause>``, e.g. ``CI: K8sValidatedPolicyTest Namespaces: cannot curl service``\n      #. Labels ``kind/bug/CI`` and ``needs/triage``\n      #. Include the test name and whole Stacktrace section to help others find this issue.\n\n   .. note::\n\n      Be extra careful when you see a new flake on a PR, and want to open an\n      issue. It's much more difficult to debug these without context around the\n      PR and the changes it introduced. When creating an issue for a PR flake,\n      include a description of the code change, the PR, or the diff. If it\n      isn't related to the PR, then it should already happen in the ``main``\n      branch, and a new issue isn't needed.\n\n**Examples:**\n\n* ``Flake, quay.io is down``\n* ``Flake, DNS not ready, #3333``\n* ``CI-Bug, K8sValidatedPolicyTest: Namespaces, pod not ready, #9939``\n* ``Regression, k8s host policy, #1111``\n\nDisabling Github Actions Workflows\n \n .. warning::\nDo not use the  GitHub web UI <https://docs.github.com/en/actions/using-workflows/disabling-and-enabling-a-workflow?tool=webui> _\nto disable GitHub Actions workflows. It makes it difficult to find out who\ndisabled the workflows and why. \n Alternatives to Disabling Github Actions Workflows\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \n Before proceeding, consider the following alternatives to disabling an entire\nGitHub Actions workflow. \n \n Skip individual tests. If specific tests are causing the workflow to fail,\ndisable those tests instead of disabling the workflow. When you disable a\nworkflow, all the tests in the workflow stop running. This makes it easier\nto introduce new regressions that would have been caught by these tests\notherwise. \n Remove the workflow from the list of required status checks. This way the\nworkflow still runs on pull requests, but you can still merge them without\nthe workflow succeeding. To remove the workflow from the required status check\nlist, post a message in the  #testing Slack channel <https://cilium.slack.com/archives/C7PE7V806> _\nand @mention people in the  cilium-maintainers team <https://github.com/orgs/cilium/teams/cilium-maintainers> __. \n \n Step 1: Open a GitHub Issue\n^^^^^^^^^^^^^^^^^^^^^^^^^^^ \n Open a GitHub issue to track activities related to fixing the workflow. If there\nare existing test flake GitHub issues, list them in the tracking issue. Find an\nassignee for the tracking issue to avoid the situation where the workflow remains\ndisabled indefinitely because nobody is assigned to actually fix the workflow. \n Step 2: Update the required status check list\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \n If the workflow is in the required status check list, it needs to be removed\nfrom the list. Notify the  cilium-maintainers team <https://github.com/orgs/cilium/teams/cilium-maintainers> __\nby mentioning  @cilium/cilium-maintainers  in the tracking issue and ask them\nto remove the workflow from the required status check list. \n Step 3: Update the workflow configuration\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \n Update the workflow configuration as described in the following sub-steps\ndepending on whether the workflow is triggered by the  /test  comment\nor by the  pull_request  or  pull_request_target  trigger. Open a pull\nrequest with your changes, have it reviewed, then merged. \n .. tabs::\n.. group-tab::  /test  comment trigger \n For those workflows that get triggered by the ``/test`` comment, update\nariane-config.yaml and remove the workflow from ``triggers:/test:workflows``\nsection (`an example <https://github.com/cilium/cilium/pull/29488>`_). Do not\nremove the targeted trigger (``triggers:/ci-e2e`` for example) so that you can\nstill use the targeted trigger to run the workflow when needed.\n \n .. group-tab::  pull_request  or  pull_request_target  trigger \n For those workflows that get triggered by the ``pull_request`` or\n``pull_request_target`` trigger, remove the trigger from the workflow file.\nDo not remove the ``schedule`` trigger if the workflow has it. It is useful\nto be able to see if the workflow has stabilized enough over time when making\nthe decision to re-enable the workflow.",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/contributing/testing/ci.rst",
  "extracted_at": "2025-09-03T01:13:28.834830Z"
}
{
  "url": "file:///tmp/cilium-repo/Documentation/reference-guides/bpf/resources.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _bpf_users:\n\nFurther Reading\n===============\n\nMentioned lists of docs, projects, talks, papers, and further reading\nmaterials are likely not complete. Thus, feel free to open pull requests\nto complete the list.\n\nKernel Developer FAQ\n--------------------\n\nUnder ``Documentation/bpf/``, the Linux kernel provides two FAQ files that\nare mainly targeted for kernel developers involved in the BPF subsystem.\n\n* **BPF Devel FAQ:** this document provides mostly information around patch\n  submission process as well as BPF kernel tree, stable tree and bug\n  reporting workflows, questions around BPF's extensibility and interaction\n  with LLVM and more.\n\n  https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/bpf/bpf_devel_QA.rst\n\n..\n\n* **BPF Design FAQ:** this document tries to answer frequently asked questions\n  around BPF design decisions related to the instruction set, verifier,\n  calling convention, JITs, etc.\n\n  https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/bpf/bpf_design_QA.rst\n\nProjects using BPF\n------------------\n\nThe following list includes a selection of open source projects making\nuse of BPF respectively provide tooling for BPF. In this context the eBPF\ninstruction set is specifically meant instead of projects utilizing the\nlegacy cBPF:\n\n**Tracing**\n\n* **BCC**\n\n  BCC stands for BPF Compiler Collection, and its key feature is to provide\n  a set of easy to use and efficient kernel tracing utilities all based\n  upon BPF programs hooking into kernel infrastructure based upon kprobes,\n  kretprobes, tracepoints, uprobes, uretprobes as well as USDT probes. The\n  collection provides close to hundred tools targeting different layers\n  across the stack from applications, system libraries, to the various\n  different kernel subsystems in order to analyze a system's performance\n  characteristics or problems. Additionally, BCC provides an API in order\n  to be used as a library for other projects.\n\n  https://github.com/iovisor/bcc\n\n..\n\n* **bpftrace**\n\n  bpftrace is a DTrace-style dynamic tracing tool for Linux and uses LLVM\n  as a back end to compile scripts to BPF-bytecode and makes use of BCC\n  for interacting with the kernel's BPF tracing infrastructure. It provides\n  a higher-level language for implementing tracing scripts compared to\n  native BCC.\n\n  https://github.com/ajor/bpftrace\n\n..\n\n* **perf**\n\n  The perf tool which is developed by the Linux kernel community as\n  part of the kernel source tree provides a way to load tracing BPF\n  programs through the conventional perf record subcommand where the\n  aggregated data from BPF can be retrieved and post processed in\n  perf.data for example through perf script and other means.\n\n  https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/perf\n\n..\n\n* **ply**\n\n  ply is a tracing tool that follows the 'Little Language' approach of\n  yore, and compiles ply scripts into Linux BPF programs that are attached\n  to kprobes and tracepoints in the kernel. The scripts have a C-like syntax,\n  heavily inspired by DTrace and by extension awk. ply keeps dependencies\n  to very minimum and only requires flex and bison at build time, only libc\n  at runtime.\n\n  https://github.com/wkz/ply\n\n..\n\n* **systemtap**\n\n  systemtap is a scripting language and tool for extracting, filtering and\n  summarizing data in order to diagnose and analyze performance or functional\n  problems. It comes with a BPF back end called stapbpf which translates\n  the script directly into BPF without the need of an additional compiler\n  and injects the probe into the kernel. Thus, unlike stap's kernel modules\n  this does neither have external dependencies nor requires to load kernel\n  modules.\n\n  https://sourceware.org/git/gitweb.cgi?p=systemtap.git;a=summary\n\n..\n\n* **PCP**\n\n  Performance Co-Pilot (PCP) is a system performance and analysis framework\n  which is able to collect metrics through a variety of agents as well as\n  analyze collected systems' performance metrics in real-time or by using\n  historical data. With pmdabcc, PCP has a BCC based performance metrics\n  domain agent which extracts data from the kernel via BPF and BCC.\n\n  https://github.com/performancecopilot/pcp\n\n..\n\n* **Weave Scope**\n\n  Weave Scope is a cloud monitoring tool collecting data about processes,\n  networking connections or other system data by making use of BPF in combination\n  with kprobes. Weave Scope works on top of the gobpf library in order to load\n  BPF ELF files into the kernel, and comes with a tcptracer-bpf tool which\n  monitors connect, accept and close calls in order to trace TCP events.\n\n  https://github.com/weaveworks/scope\n\n..\n\n**Networking**\n\n* **Cilium**\n\n  Cilium provides and transparently secures network connectivity and load-balancing\n  between application workloads such as application containers or processes. Cilium\n  operates at Layer 3/4 to provide traditional networking and security services\n  as well as Layer 7 to protect and secure use of modern application protocols\n  such as HTTP, gRPC and Kafka. It is integrated into orchestration frameworks\n  such as Kubernetes. BPF is the foundational part of Cilium that operates in\n  the kernel's networking data path.\n\n  https://github.com/cilium/cilium\n\n..\n\n* **Suricata**\n\n  Suricata is a network IDS, IPS and NSM engine, and utilizes BPF as well as XDP\n  in three different areas, that is, as BPF filter in order to process or bypass\n  certain packets, as a BPF based load balancer in order to allow for programmable\n  load balancing and for XDP to implement a bypass or dropping mechanism at high\n  packet rates.\n\n  https://suricata.readthedocs.io/en/suricata-5.0.2/capture-hardware/ebpf-xdp.html\n\n  https://github.com/OISF/suricata\n\n..\n\n* **systemd**\n\n  systemd allows for IPv4/v6 accounting as well as implementing network access\n  control for its systemd units based on BPF's cgroup ingress and egress hooks.\n  Accounting is based on packets / bytes, and ACLs can be specified as address\n  prefixes for allow / deny rules. More information can be found at:\n\n  http://0pointer.net/blog/ip-accounting-and-access-lists-with-systemd.html\n\n  https://github.com/systemd/systemd\n\n..\n\n* **iproute2**\n\n  iproute2 offers the ability to load BPF programs as LLVM generated ELF files\n  into the kernel. iproute2 supports both, XDP BPF programs as well as tc BPF\n  programs through a common BPF loader backend. The tc and ip command line\n  utilities enable loader and introspection functionality for the user.\n\n  https://git.kernel.org/pub/scm/network/iproute2/iproute2.git/\n\n..\n\n* **p4c-xdp**\n\n  p4c-xdp presents a P4 compiler backend targeting BPF and XDP. P4 is a domain\n  specific language describing how packets are processed by the data plane of\n  a programmable network element such as NICs, appliances or switches, and with\n  the help of p4c-xdp P4 programs can be translated into BPF C programs which\n  can be compiled by clang / LLVM and loaded as BPF programs into the kernel\n  at XDP layer for high performance packet processing.\n\n  https://github.com/vmware/p4c-xdp\n\n..\n\n**Others**\n\n* **LLVM**\n\n  clang / LLVM provides the BPF back end in order to compile C BPF programs\n  into BPF instructions contained in ELF files. The LLVM BPF back end is\n  developed alongside with the BPF core infrastructure in the Linux kernel\n  and maintained by the same community. clang / LLVM is a key part in the\n  toolchain for developing BPF programs.\n\n  https://llvm.org/\n\n..\n\n* **libbpf**\n\n  libbpf is a generic BPF library which is developed by the Linux kernel\n  community as part of the kernel source tree and allows for loading and\n  attaching BPF programs from LLVM generated ELF files into the kernel.\n  The library is used by other kernel projects such as perf and bpftool.\n\n  https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/lib/bpf\n\n..\n\n* **bpftool**\n\n  bpftool is the main tool for introspecting and debugging BPF programs\n  and BPF maps, and like libbpf is developed by the Linux kernel community.\n  It allows for dumping all active BPF programs and maps in the system,\n  dumping and disassembling BPF or JITed BPF instructions from a program\n  as well as dumping and manipulating BPF maps in the system. bpftool\n  supports interaction with the BPF filesystem, loading various program\n  types from an object file into the kernel and much more.\n\n  https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/bpf/bpftool\n\n..\n\n* **cilium/ebpf**\n\n  ``cilium/ebpf`` (ebpf-go) is a pure Go library that provides utilities for\n  loading, compiling, and debugging eBPF programs. It has minimal external\n  dependencies and is intended to be used in long-running processes.\n\n  Its ``bpf2go`` utility automates away compiling eBPF C programs and embedding\n  them into Go binaries.\n\n  It implements attaching programs to various kernel hooks, as well as kprobes\n  and uprobes for tracing arbitrary kernel and user space functions. It also\n  features a complete assembler that allows constructing eBPF programs at\n  runtime using Go, or modifying them after they've been loaded from an ELF\n  object.\n\n  https://github.com/cilium/ebpf\n\n..\n\n* **ebpf_asm**\n\n  ebpf_asm provides an assembler for BPF programs written in an Intel-like assembly\n  syntax, and therefore offers an alternative for writing BPF programs directly in\n  assembly for cases where programs are rather small and simple without needing the\n  clang / LLVM toolchain.\n\n  https://github.com/Xilinx-CNS/ebpf_asm\n\n..\n\nXDP Newbies\n-----------\n\nThere are a couple of walk-through posts by David S. Miller to the xdp-newbies\nmailing list (http://vger.kernel.org/vger-lists.html#xdp-newbies), which explain\nvarious parts of XDP and BPF:\n\n4. May 2017,\n     BPF Verifier Overview,\n     David S. Miller,\n     https://www.spinics.net/lists/xdp-newbies/msg00185.html\n\n3. May 2017,\n     Contextually speaking...,\n     David S. Miller,\n     https://www.spinics.net/lists/xdp-newbies/msg00181.html\n\n2. May 2017,\n     bpf.h and you...,\n     David S. Miller,\n     https://www.spinics.net/lists/xdp-newbies/msg00179.html\n\n1. Apr 2017,\n     XDP example of the day,\n     David S. Miller,\n     https://www.spinics.net/lists/xdp-newbies/msg00009.html\n\nBPF Newsletter\n--------------\n\nAlexander Alemayhu initiated a newsletter around BPF roughly once per week\ncovering latest developments around BPF in Linux kernel land and its\nsurrounding ecosystem in user space.\n\nAll BPF update newsletters (01 - 12) can be found here:\n\n     https://cilium.io/blog/categories/technology/5/\n\nAnd for the news on the latest resources and developments in the eBPF world,\nplease refer to the link here:\n\n     https://ebpf.io/blog\n\nPodcasts\n--------\n\nThere have been a number of technical podcasts partially covering BPF.\nIncomplete list:\n\n5. Feb 2017,\n     Linux Networking Update from Netdev Conference,\n     Thomas Graf,\n     Software Gone Wild, Show 71,\n     https://blog.ipspace.net/2017/02/linux-networking-update-from-netdev.html\n     https://www.ipspace.net/nuggets/podcast/Show_71-NetDev_Update.mp3\n\n4. Jan 2017,\n     The IO Visor Project,\n     Brenden Blanco,\n     OVS Orbit, Episode 23,\n     https://ovsorbit.org/#e23\n     https://ovsorbit.org/episode-23.mp3\n\n3. Oct 2016,\n     Fast Linux Packet Forwarding,\n     Thomas Graf,\n     Software Gone Wild, Show 64,\n     https://blog.ipspace.net/2016/10/fast-linux-packet-forwarding-with.html\n     https://www.ipspace.net/nuggets/podcast/Show_64-Cilium_with_Thomas_Graf.mp3\n\n2. Aug 2016,\n     P4 on the Edge,\n     John Fastabend,\n     OVS Orbit, Episode 11,\n     https://ovsorbit.org/#e11\n     https://ovsorbit.org/episode-11.mp3\n\n1. May 2016,\n     Cilium,\n     Thomas Graf,\n     OVS Orbit, Episode 4,\n     https://ovsorbit.org/#e4\n     https://ovsorbit.org/episode-4.mp3\n\nBlog posts\n----------\n\nThe following (incomplete) list includes blog posts around BPF, XDP and related projects:\n\n34. May 2017,\n     An entertaining eBPF XDP adventure,\n     Suchakra Sharma,\n     https://suchakra.wordpress.com/2017/05/23/an-entertaining-ebpf-xdp-adventure/\n\n33. May 2017,\n     eBPF, part 2: Syscall and Map Types,\n     Ferris Ellis,\n     https://ferrisellis.com/posts/ebpf_syscall_and_maps/\n\n32. May 2017,\n     Monitoring the Control Plane,\n     Gary Berger,\n     https://www.firstclassfunc.com/2018/07/monitoring-the-control-plane/\n\n31. Apr 2017,\n     USENIX/LISA 2016 Linux bcc/BPF Tools,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2017-04-29/usenix-lisa-2016-bcc-bpf-tools.html\n\n30. Apr 2017,\n     Liveblog: Cilium for Network and Application Security with BPF and XDP,\n     Scott Lowe,\n     https://blog.scottlowe.org/2017/04/18/black-belt-cilium/\n\n29. Apr 2017,\n     eBPF, part 1: Past, Present, and Future,\n     Ferris Ellis,\n     https://ferrisellis.com/posts/ebpf_past_present_future/\n\n28. Mar 2017,\n     Analyzing KVM Hypercalls with eBPF Tracing,\n     Suchakra Sharma,\n     https://suchakra.wordpress.com/2017/03/31/analyzing-kvm-hypercalls-with-ebpf-tracing/\n\n27. Jan 2017,\n     Golang bcc/BPF Function Tracing,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2017-01-31/golang-bcc-bpf-function-tracing.html\n\n26. Dec 2016,\n     Give me 15 minutes and I'll change your view of Linux tracing,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-12-27/linux-tracing-in-15-minutes.html\n\n25. Nov 2016,\n     Cilium: Networking and security for containers with BPF and XDP,\n     Daniel Borkmann,\n     https://opensource.googleblog.com/2016/11/cilium-networking-and-security.html\n\n24. Nov 2016,\n     Linux bcc/BPF tcplife: TCP Lifespans,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-11-30/linux-bcc-tcplife.html\n\n23. Oct 2016,\n     DTrace for Linux 2016,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-10-27/dtrace-for-linux-2016.html\n\n22. Oct 2016,\n     Linux 4.9's Efficient BPF-based Profiler,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-10-21/linux-efficient-profiler.html\n\n21. Oct 2016,\n     Linux bcc tcptop,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-10-15/linux-bcc-tcptop.html\n\n20. Oct 2016,\n     Linux bcc/BPF Node.js USDT Tracing,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-10-12/linux-bcc-nodejs-usdt.html\n\n19. Oct 2016,\n     Linux bcc/BPF Run Queue (Scheduler) Latency,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-10-08/linux-bcc-runqlat.html\n\n18. Oct 2016,\n     Linux bcc ext4 Latency Tracing,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-10-06/linux-bcc-ext4dist-ext4slower.html\n\n17. Oct 2016,\n     Linux MySQL Slow Query Tracing with bcc/BPF,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-10-04/linux-bcc-mysqld-qslower.html\n\n16. Oct 2016,\n     Linux bcc Tracing Security Capabilities,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-10-01/linux-bcc-security-capabilities.html\n\n15. Sep 2016,\n     Suricata bypass feature,\n     Eric Leblond,\n     https://www.stamus-networks.com/blog/2016/09/28/suricata-bypass-feature\n\n14. Aug 2016,\n     Introducing the p0f BPF compiler,\n     Gilberto Bertin,\n     https://blog.cloudflare.com/introducing-the-p0f-bpf-compiler/\n\n13. Jun 2016,\n     Ubuntu Xenial bcc/BPF,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-06-14/ubuntu-xenial-bcc-bpf.html\n\n12. Mar 2016,\n     Linux BPF/bcc Road Ahead, March 2016,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-03-28/linux-bpf-bcc-road-ahead-2016.html\n\n11. Mar 2016,\n     Linux BPF Superpowers,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-03-05/linux-bpf-superpowers.html\n\n10. Feb 2016,\n     Linux eBPF/bcc uprobes,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-02-08/linux-ebpf-bcc-uprobes.html\n\n9. Feb 2016,\n     Who is waking the waker? (Linux chain graph prototype),\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-02-05/ebpf-chaingraph-prototype.html\n\n8. Feb 2016,\n     Linux Wakeup and Off-Wake Profiling,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-02-01/linux-wakeup-offwake-profiling.html\n\n7. Jan 2016,\n     Linux eBPF Off-CPU Flame Graph,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-01-20/ebpf-offcpu-flame-graph.html\n\n6. Jan 2016,\n     Linux eBPF Stack Trace Hack,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2016-01-18/ebpf-stack-trace-hack.html\n\n1. Sep 2015,\n     Linux Networking, Tracing and IO Visor, a New Systems Performance Tool for a Distributed World,\n     Suchakra Sharma,\n     https://thenewstack.io/comparing-dtrace-iovisor-new-systems-performance-platform-advance-linux-networking-virtualization/\n\n5. Aug 2015,\n     BPF Internals - II,\n     Suchakra Sharma,\n     https://suchakra.wordpress.com/2015/08/12/bpf-internals-ii/\n\n4. May 2015,\n     eBPF: One Small Step,\n     Brendan Gregg,\n     http://www.brendangregg.com/blog/2015-05-15/ebpf-one-small-step.html\n\n3. May 2015,\n     BPF Internals - I,\n     Suchakra Sharma,\n     https://suchakra.wordpress.com/2015/05/18/bpf-internals-i/\n\n2. Jul 2014,\n     Introducing the BPF Tools,\n     Marek Majkowski,\n     https://blog.cloudflare.com/introducing-the-bpf-tools/\n\n1. May 2014,\n     BPF - the forgotten bytecode,\n     Marek Majkowski,\n     https://blog.cloudflare.com/bpf-the-forgotten-bytecode/\n\nBooks\n-----\n\nBPF Performance Tools (Gregg, Addison Wesley, 2019)\n\nTalks\n-----\n\nThe following (incomplete) list includes talks and conference papers\nrelated to BPF and XDP:\n\n46. July 2021,\n     eBPF & Cilium Office Hours episode 13: XDP Hands-on Tutorial, with Liz Rice,\n     https://www.youtube.com/watch?v=YUI78vC4qSQ&t=300s\n\n45. June 2021,\n     eBPF & Cilium Office Hours episode 9: XDP and Load Balancing,\n     with Daniel Borkmann,\n     https://www.youtube.com/watch?v=OIyPm6K4ooY&t=308s\n\n44. May 2017,\n     PyCon 2017, Portland,\n     Executing python functions in the linux kernel by transpiling to bpf,\n     Alex Gartrell,\n     https://www.youtube.com/watch?v=CpqMroMBGP4\n\n43. May 2017,\n     gluecon 2017, Denver,\n     Cilium + BPF: Least Privilege Security on API Call Level for Microservices,\n     Dan Wendlandt,\n     http://gluecon.com/#agenda\n\n42. May 2017,\n     Lund Linux Con, Lund,\n     XDP - eXpress Data Path,\n     Jesper Dangaard Brouer,\n     http://people.netfilter.org/hawk/presentations/LLC2017/XDP_DDoS_protecting_LLC2017.pdf\n\n41. May 2017,\n     Polytechnique Montreal,\n     Trace Aggregation and Collection with eBPF,\n     Suchakra Sharma,\n     https://hsdm.dorsal.polymtl.ca/system/files/eBPF-5May2017%20(1).pdf\n\n40. Apr 2017,\n     DockerCon, Austin,\n     Cilium - Network and Application Security with BPF and XDP,\n     Thomas Graf,\n     https://www.slideshare.net/ThomasGraf5/dockercon-2017-cilium-network-and-application-security-with-bpf-and-xdp\n\n39. Apr 2017,\n     NetDev 2.1, Montreal,\n     XDP Mythbusters,\n     David S. Miller,\n     https://netdevconf.info/2.1/slides/apr7/miller-XDP-MythBusters.pdf\n\n38. Apr 2017,\n     NetDev 2.1, Montreal,\n     Droplet: DDoS countermeasures powered by BPF + XDP,\n     Huapeng Zhou, Doug Porter, Ryan Tierney, Nikita Shirokov,\n     https://netdevconf.info/2.1/slides/apr6/zhou-netdev-xdp-2017.pdf\n\n37. Apr 2017,\n     NetDev 2.1, Montreal,\n     XDP in practice: integrating XDP in our DDoS mitigation pipeline,\n     Gilberto Bertin,\n     https://netdevconf.info/2.1/slides/apr6/bertin_Netdev-XDP.pdf\n\n36. Apr 2017,\n     NetDev 2.1, Montreal,\n     XDP for the Rest of Us,\n     Andy Gospodarek, Jesper Dangaard Brouer,\n     https://netdevconf.info/2.1/slides/apr7/gospodarek-Netdev2.1-XDP-for-the-Rest-of-Us_Final.pdf\n\n35. Mar 2017,\n     SCALE15x, Pasadena,\n     Linux 4.x Tracing: Performance Analysis with bcc/BPF,\n     Brendan Gregg,\n     https://www.slideshare.net/brendangregg/linux-4x-tracing-performance-analysis-with-bccbpf\n\n34. Mar 2017,\n     XDP Inside and Out,\n     David S. Miller,\n     https://raw.githubusercontent.com/iovisor/bpf-docs/master/XDP_Inside_and_Out.pdf\n\n33. Mar 2017,\n     OpenSourceDays, Copenhagen,\n     XDP - eXpress Data Path, Used for DDoS protection,\n     Jesper Dangaard Brouer,\n     http://people.netfilter.org/hawk/presentations/OpenSourceDays2017/XDP_DDoS_protecting_osd2017.pdf\n\n32. Mar 2017,\n     source{d}, Infrastructure 2017, Madrid,\n     High-performance Linux monitoring with eBPF,\n     Alfonso Acosta,\n     https://www.youtube.com/watch?v=k4jqTLtdrxQ\n\n31. Feb 2017,\n     FOSDEM 2017, Brussels,\n     Stateful packet processing with eBPF, an implementation of OpenState interface,\n     Quentin Monnet,\n     https://archive.fosdem.org/2017/schedule/event/stateful_ebpf/\n\n30. Feb 2017,\n     FOSDEM 2017, Brussels,\n     eBPF and XDP walkthrough and recent updates,\n     Daniel Borkmann,\n     http://borkmann.ch/talks/2017_fosdem.pdf\n\n29. Feb 2017,\n     FOSDEM 2017, Brussels,\n     Cilium - BPF & XDP for containers,\n     Thomas Graf,\n     https://archive.fosdem.org/2017/schedule/event/cilium/\n\n28. Jan 2017,\n     linuxconf.au, Hobart,\n     BPF: Tracing and more,\n     Brendan Gregg,\n     https://www.slideshare.net/brendangregg/bpf-tracing-and-more\n\n27. Dec 2016,\n     USENIX LISA 2016, Boston,\n     Linux 4.x Tracing Tools: Using BPF Superpowers,\n     Brendan Gregg,\n     https://www.slideshare.net/brendangregg/linux-4x-tracing-tools-using-bpf-superpowers\n\n26. Nov 2016,\n     Linux Plumbers, Santa Fe,\n     Cilium: Networking & Security for Containers with BPF & XDP,\n     Thomas Graf,\n     https://www.slideshare.net/ThomasGraf5/clium-container-networking-with-bpf-xdp\n\n25. Nov 2016,\n     OVS Conference, Santa Clara,\n     Offloading OVS Flow Processing using eBPF,\n     William (Cheng-Chun) Tu,\n     http://www.openvswitch.org/support/ovscon2016/7/1120-tu.pdf\n\n24. Oct 2016,\n     One.com, Copenhagen,\n     XDP - eXpress Data Path, Intro and future use-cases,\n     Jesper Dangaard Brouer,\n     http://people.netfilter.org/hawk/presentations/xdp2016/xdp_intro_and_use_cases_sep2016.pdf\n\n23. Oct 2016,\n     Docker Distributed Systems Summit, Berlin,\n     Cilium: Networking & Security for Containers with BPF & XDP,\n     Thomas Graf,\n     https://www.slideshare.net/Docker/cilium-bpf-xdp-for-containers-66969823\n\n22. Oct 2016,\n     NetDev 1.2, Tokyo,\n     Data center networking stack,\n     Tom Herbert,\n     https://netdevconf.info/1.2/session.html?tom-herbert\n\n21. Oct 2016,\n     NetDev 1.2, Tokyo,\n     Fast Programmable Networks & Encapsulated Protocols,\n     David S. Miller,\n     https://netdevconf.info/1.2/session.html?david-miller-keynote\n\n20. Oct 2016,\n     NetDev 1.2, Tokyo,\n     XDP workshop - Introduction, experience, and future development,\n     Tom Herbert,\n     https://netdevconf.info/1.2/session.html?herbert-xdp-workshop\n\n19. Oct 2016,\n     NetDev1.2, Tokyo,\n     The adventures of a Suricate in eBPF land,\n     Eric Leblond,\n     https://netdevconf.info/1.2/slides/oct6/10_suricata_ebpf.pdf\n\n18. Oct 2016,\n     NetDev1.2, Tokyo,\n     cls_bpf/eBPF updates since netdev 1.1,\n     Daniel Borkmann,\n     http://borkmann.ch/talks/2016_tcws.pdf\n\n17. Oct 2016,\n     NetDev1.2, Tokyo,\n     Advanced programmability and recent updates with tc’s cls_bpf,\n     Daniel Borkmann,\n     http://borkmann.ch/talks/2016_netdev2.pdf\n     https://netdevconf.info/1.2/papers/borkmann.pdf\n\n16. Oct 2016,\n     NetDev 1.2, Tokyo,\n     eBPF/XDP hardware offload to SmartNICs,\n     Jakub Kicinski, Nic Viljoen,\n     https://netdevconf.info/1.2/papers/eBPF_HW_OFFLOAD.pdf\n\n15. Aug 2016,\n     LinuxCon, Toronto,\n     What Can BPF Do For You?,\n     Brenden Blanco,\n     https://events.static.linuxfound.org/sites/events/files/slides/iovisor-lc-bof-2016.pdf\n\n14. Aug 2016,\n     LinuxCon, Toronto,\n     Cilium - Fast IPv6 Container Networking with BPF and XDP,\n     Thomas Graf,\n     https://www.slideshare.net/ThomasGraf5/cilium-fast-ipv6-container-networking-with-bpf-and-xdp\n\n13. Aug 2016,\n     P4, EBPF and Linux TC Offload,\n     Dinan Gunawardena, Jakub Kicinski,\n     https://de.slideshare.net/Open-NFP/p4-epbf-and-linux-tc-offload\n\n12. Jul 2016,\n     Linux Meetup, Santa Clara,\n     eXpress Data Path,\n     Brenden Blanco,\n     https://www.slideshare.net/IOVisor/express-data-path-linux-meetup-santa-clara-july-2016\n\n11. Jul 2016,\n     Linux Meetup, Santa Clara,\n     CETH for XDP,\n     Yan Chan, Yunsong Lu,\n     https://www.slideshare.net/IOVisor/ceth-for-xdp-linux-meetup-santa-clara-july-2016\n\n10. May 2016,\n     P4 workshop, Stanford,\n     P4 on the Edge,\n     John Fastabend,\n     https://schd.ws/hosted_files/2016p4workshop/1d/Intel%20Fastabend-P4%20on%20the%20Edge.pdf\n\n9. Mar 2016,\n    Performance @Scale 2016, Menlo Park,\n    Linux BPF Superpowers,\n    Brendan Gregg,\n    https://www.slideshare.net/brendangregg/linux-bpf-superpowers\n\n8. Mar 2016,\n    eXpress Data Path,\n    Tom Herbert, Alexei Starovoitov,\n    https://raw.githubusercontent.com/iovisor/bpf-docs/master/Express_Data_Path.pdf\n\n7. Feb 2016,\n    NetDev1.1, Seville,\n    On getting tc classifier fully programmable with cls_bpf,\n    Daniel Borkmann,\n    http://borkmann.ch/talks/2016_netdev.pdf\n    https://netdevconf.info/1.1/proceedings/papers/On-getting-tc-classifier-fully-programmable-with-cls-bpf.pdf\n\n6. Jan 2016,\n    FOSDEM 2016, Brussels,\n    Linux tc and eBPF,\n    Daniel Borkmann,\n    http://borkmann.ch/talks/2016_fosdem.pdf\n\n5. Oct 2015,\n    LinuxCon Europe, Dublin,\n    eBPF on the Mainframe,\n    Michael Holzheu,\n    https://events.static.linuxfound.org/sites/events/files/slides/ebpf_on_the_mainframe_lcon_2015.pdf\n\n4. Aug 2015,\n    Tracing Summit, Seattle,\n    LLTng's Trace Filtering and beyond (with some eBPF goodness, of course!),\n    Suchakra Sharma,\n    https://raw.githubusercontent.com/iovisor/bpf-docs/master/ebpf_excerpt_20Aug2015.pdf\n\n3. Jun 2015,\n    LinuxCon Japan, Tokyo,\n    Exciting Developments in Linux Tracing,\n    Elena Zannoni,\n    https://events.static.linuxfound.org/sites/events/files/slides/tracing-linux-ezannoni-linuxcon-ja-2015_0.pdf\n\n2. Feb 2015,\n    Collaboration Summit, Santa Rosa,\n    BPF: In-kernel Virtual Machine,\n    Alexei Starovoitov,\n    https://events.static.linuxfound.org/sites/events/files/slides/bpf_collabsummit_2015feb20.pdf\n\n1. Feb 2015,\n    NetDev 0.1, Ottawa,\n    BPF: In-kernel Virtual Machine,\n    Alexei Starovoitov,\n    https://netdevconf.info/0.1/sessions/15.html\n\n0. Feb 2014,\n    DevConf.cz, Brno,\n    tc and cls_bpf: lightweight packet classifying with BPF,\n    Daniel Borkmann,\n    http://borkmann.ch/talks/2014_devconf.pdf\n\nFurther Documents\n-----------------\n\n- Dive into BPF: a list of reading material,\n  Quentin Monnet\n  (https://qmonnet.github.io/whirl-offload/2016/09/01/dive-into-bpf/)\n\n- XDP - eXpress Data Path,\n  Jesper Dangaard Brouer\n  (https://prototype-kernel.readthedocs.io/en/latest/networking/XDP/index.html)\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/reference-guides/bpf/resources.rst",
  "extracted_at": "2025-09-03T00:53:44.728058Z"
}
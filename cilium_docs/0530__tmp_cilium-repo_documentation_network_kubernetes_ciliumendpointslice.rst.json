{
  "url": "file:///tmp/cilium-repo/Documentation/network/kubernetes/ciliumendpointslice.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _CiliumEndpointSlice:\n\n***************************\nCiliumEndpointSlice\n***************************\n\n.. note::\n    This is a beta feature. Please provide feedback and file a GitHub issue\n    if you experience any problems.\n\n    The tasks needed for graduating this feature \"Stable\" are documented\n    in :gh-issue:`31904`.\n\nThis document describes CiliumEndpointSlices (CES), which enable batching of\nCiliumEndpoint (CEP) objects in the cluster to achieve better scalability.\n\nWhen enabled, Cilium Operator watches CEP objects and groups/batches slim versions\nof them into CES objects. Cilium Agent watches CES objects to learn about\nremote endpoints in this mode. API-server stress due to remote endpoint info\npropagation should be reduced in this case, allowing for better scalability,\nat the cost of potentially longer delay before identities of new endpoints are\nrecognized throughout the cluster.\n\n.. note::\n\n   CiliumEndpointSlice is a concept that is specific to Cilium and is not\n   related to `Kubernetes' EndpointSlice`_. Although the names are similar, and\n   even though the concept of slices in each feature brings similar\n   improvements for scalability, they address different problems.\n\n   Kubernetes' Endpoints and EndpointSlices allow Cilium to make load-balancing\n   decisions for a particular Service object; Kubernetes' EndpointSlices offer\n   a scalable way to track Service back-ends within a cluster.\n\n   By contrast, CiliumEndpoints and CiliumEndpointSlices are used to make\n   network routing and policy decisions. So CiliumEndpointSlices focus on\n   tracking Pods, batching CEPs to reduce the number of updates to propagate\n   through the API-server on large clusters.\n\n   Enabling one does not affect the other.\n\n.. _Kubernetes' EndpointSlice: https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/\n\nDeploy Cilium with CES\n=======================\n\nCES are disabled by default. This section describes the steps necessary for enabling them.\n\nPre-Requisites\n~~~~~~~~~~~~~~\n\n* Make sure that CEPs are enabled (the ``--disable-endpoint-crd`` flag is not set to ``true``)\n* Make sure you are not relying on the Egress Gateway which is not compatible with CES (see Egress Gateway :ref:`egress-gateway-incompatible-features`)\n\nMigration Procedure\n~~~~~~~~~~~~~~~~~~~\nIn order to minimize endpoint propagation delays, it is recommended to upgrade the Operator first,\nlet it create all CES objects, and then upgrade the Agents afterwards.\n\n#. Enable CES on the Operator by setting the ``ciliumEndpointSlice.enabled`` value to ``true`` in your Helm chart or\n   by directly setting the ``--enable-cilium-endpoint-slice`` flag to ``true`` on the Operator. Re-deploy the Operator.\n\n#. Once the Operator is running, verify that the ``CiliumEndpointSlice`` CRD has been successfully registered:\n\n   .. code-block:: shell-session\n\n      $ kubectl get crd ciliumendpointslices.cilium.io\n      NAME                                         CREATED AT\n      ciliumendpointslices.cilium.io               2021-11-05T05:41:28Z\n\n#. Verify that the Operator has started creating CES objects:\n\n   .. code-block:: shell-session\n\n      $ kubectl get ces\n      NAME                  AGE\n      ces-2fvynpvzn-4ncg9   1m17s\n      ces-2jyqj8pfl-tdfm8   1m20s\n\n#. Let the Operator create CES objects for all existing CEPs in the cluster. This may take some time, depending on the\n   size of the cluster. You can monitor the progress by checking the rate of CES object creation in the cluster, for example by\n   looking at the ``apiserver_storage_objects`` Kubernetes metric or by looking at ``ciliumendpointslices`` resource\n   creation requests in Kubernetes Audit Logs. You can also monitor the metrics emitted by the Operator, such as ``cilium_operator_ces_sync_total``. All CES-related metrics are documented in the :ref:`ces_metrics` section of the metric documentation.\n\n#. Once the metrics have stabilized (in other words, when the Operator has created CES objects for all existing CEPs), upgrade the\n   Cilium Agents on all nodes by setting the ``--enable-cilium-endpoint-slice`` flag to ``true`` and re-deploying them.\n\n\nConfiguration Options\n=====================\n\nSeveral options are available to adjust the performance and behavior of the CES feature:\n\n* You can configure the way CEPs are batched into CES by changing the maximum number of CEPs in a\n  CES (``--ces-max-cilium-endpoints-per-ces``).\n\n* You can also fine-tune rate-limiting settings for the Operator communications with the API-server. Refer to the ``--ces-*`` flags for the ``cilium-operator`` binary.\n\n* You can annotate priority namespaces by setting annotation ``cilium.io/ces-namespace`` to the value “priority”. When dealing with large clusters, the propagation of changes during Network Policy updates can be significantly delayed.\n  When namespace's annotation ``cilium.io/ces-namespace`` is set to \"priority\", the updates from this namespace will be processed before non-priority updates. This allows to quicker enforce updated network policy in critical namespaces.\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/kubernetes/ciliumendpointslice.rst",
  "extracted_at": "2025-09-03T01:13:29.242313Z"
}
{
  "url": "file:///tmp/cilium-repo/Documentation/contributing/docs/docsframework.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n .. _docs_framework: \n \n Documentation framework \n \n This page contains notes on the framework in use for Cilium documentation. Its\nobjective is to help contributors understand the tools and build process for\nthe documentation, and to help maintain it. \n Alas, this sort of document goes quickly out of date. When in doubt of\naccuracy, double-check the codebase to verify information. If you find\ndiscrepancies, please update this page. \n Sphinx \n Cilium relies on  Sphinx _ to generate its documentation. \n .. _Sphinx: https://www.sphinx-doc.org \n Sphinx usage \n Contributors do not usually call Sphinx directly, but rather use the Makefile\ntargets defined in  Documentation/Makefile . For instructions on how to\nquickly render the documentation, see :ref: testing documentation <testing-documentation> . \n Sphinx features \n Here are some specific Sphinx features used in Cilium's documentation: \n \n \n Tab groups _ \n \n \n OpenAPI _ documentation generation \n \n \n Mark-up languages: reStructuredText (rST) and Markdown ( MyST _ flavor) \n \n \n Substitutions, for example: \n \n |SCM_WEB| \n |CHART_VERSION| \n \n \n \n Multiple versions (for all supported branches, plus two aliases:  stable \nand  latest ) \n \n \n .. _OpenAPI: https://github.com/sphinx-contrib/openapi\n.. _Tab groups: https://github.com/executablebooks/sphinx-tabs/\n.. _MyST: https://myst-parser.readthedocs.io \n Sphinx version \n The version of Sphinx in use is defined in\n Documentation/requirements-min/requirements.txt . For more details, see the\n:ref: section on requirements <docs_requirements> . \n Auto-generated contents \n Some contents are automatically generated at build time. File\n Documentation/Makefile  contains the following target, shown here in a\nsimplified version, which regenerates a number of documents and then checks\nthat they are all up-to-date: \n .. code-block:: makefile \n check: builder-image api-flaggen update-cmdref update-crdlist update-helm-values update-codeowners update-redirects\n./check-cmdref.sh\n./check-helmvalues.sh\n$(DOCKER_RUN) ./check-examples.sh # Runs \"cilium policy validate\" and \"yamllint\"\n./check-codeowners.sh\n./check-flaggen.sh\n./check-crdlist.sh\n./check-redirects.sh \n Regeneration happens when the different dependency targets for  check  are\nrun. They are: \n \n \n api-flaggen \n \n Runs  go run tools/apiflaggen \n Generates  Documentation/configuration/api-restrictions-table.rst \n \n \n \n update-cmdref \n \n Runs  ./update-cmdref.sh \n Includes running various binaries with  --cmdref \n Generates  Documentation/cmdref/\\* \n \n \n \n update-crdlist \n \n make -C ../ generate-crd-docs \n Runs  tools/crdlistgen/main.go \n Parses docs to list CRDs \n Generates  Documentation/crdlist.rst \n \n \n \n update-helm-values \n \n Generates from  install/kubernetes \n Generates  Documentation/helm-values.rst \n \n \n \n update-codeowners \n \n ./update-codeowners.sh \n Synchronizes teams description from  CODEOWNERS \n Generates  Documentation/codeowners.rst \n \n \n \n update-redirects \n \n make -C Documentation update-redirects \n Automatically generates redirects based on moved files based on git history. \n Validates that all moved or deleted files have a redirect. \n Generates  Documentation/redirects.txt \n \n \n \n Other auto-generated contents include: \n \n \n OpenAPI reference \n \n YAML generated from the  Makefile  at the root of the repository \n Relies on the contents of  api , linked as  Documentation/_api \n Processed and included via a dedicated add-on, from\n Documentation/api.rst :  .. openapi:: ../api/v1/openapi.yaml \n \n \n \n gRPC API reference \n \n Markdown generated from the main  Makefile  at the root of the repository \n Relies on the contents of  api , linked as  Documentation/_api \n Included from  Documentation/grpcapi.rst \n \n \n \n SDP gRPC API reference \n \n Markdown generated from the main  Makefile  at the root of the repository \n Relies on the contents of  api , linked as  Documentation/_api \n Included from  Documentation/sdpapi.rst \n \n \n \n Build system \n Makefile targets \n Here are the main  Makefile  targets related to documentation to run from the\nroot of the Cilium repository, as well as some indications on what they call: \n \n make  ->  all: ... postcheck  ->  make -C Documentation check :\nBuild Cilium and validate the documentation via the  postcheck  target \n make -C Documentation html :\nRender the documentation as HTML \n make test-docs  ->  make -C Documentation html :\nRender the documentation as HTML \n make -C Documentation live-preview :\nBuild the documentation and start a server for local preview \n make render-docs  ->  make -C Documentation live-preview :\nBuild the documentation and start a server for local preview \n \n Generating documentation \n \n \n The  Makefile  builds the documentation using the  docs-builder  Docker\nimage. \n \n \n The build includes running  check-build.sh . This script: \n a. Runs the linter ( rstcheck ), unless the environment variable\n SKIP_LINT  is set\nb. Runs the spell checker\nc. Builds the HTML version of the documentation\nd. Exits with an error if any unexpected warning or error is found \n \n \n Tweaks and tools \n See also file  Documentation/conf.py . \n Spell checker \n The build system relies on Sphinx's  spell-checker module _ (considered a\n builder _ in Sphinx). \n The spell checker uses a list of known exceptions contained in\n Documentation/spelling_wordlist.txt . Words in the list that are written\nwith lowercase exclusively, or uppercase exclusively, are case-insensitive\nexceptions for spell-checking. Words with mixed case are case-sensitive. Keep\nthis file sorted alphabetically. \n To add new entries to the list, run  Documentation/update-spelling_wordlist.sh . \n To clean-up obsolete entries, first make sure the spell checker reports no\nissue on the current version of the documentation. Then remove all obsolete\nentries from the file, run the spell checker, and re-add all reported\nexceptions. \n Cilium's build framework uses a custom filter for the spell checker, for\nspelling  WireGuard  correctly as  WireGuard , or  wireguard  in some\ncontexts, but never as  Wireguard . This filter is implemented in\n Documentation/_exts/cilium_spellfilters.py  and registered in\n Documentation/conf.py . \n .. _spell-checker module: https://github.com/sphinx-contrib/spelling\n.. _builder: https://www.sphinx-doc.org/en/master/usage/builders \n Redirect checker/builder \n The build system relies on the Sphinx extension  sphinxext-rediraffe _ (considered a\n builder _ in Sphinx) for redirects. \n The redirect checker uses the git history to determine if a file has been moved or deleted in order to validate that a redirect for the file has been created in  Documentation/redirects.txt .\nRedirects are defined as a mapping from the original source file location to the new location within the  Documentation/  directory. The extension uses the  rediraffe_branch  as the git ref to diff against to determine which files have been moved or deleted. Any changes prior to the ref specified by  rediraffe_branch  will not be detected. \n To add new entries to the  redirects.txt , run  make -C Documentation update-redirects . \n If a file has been deleted, or has been moved and is not similar enough to the original source file, then you must manually update  redirects.txt  with the correct mapping. \n .. _sphinxext-rediraffe: https://github.com/wpilibsuite/sphinxext-rediraffe \n :spelling:word: rstcheck \n The documentation framework relies on  rstcheck _ to validate the rST\nformatting. There is a list of warnings to ignore, in part because the linter\nhas bugs. The call to the tool, and this list of exceptions, are configured in\n Documentation/check-build.sh . \n .. _rstcheck: https://rstcheck.readthedocs.io \n Link checker \n The documentation framework has a link checker under\n Documentation/check-links.sh . However, due to some unsolved issues, it does\nnot run in CI. See :gh-issue: 27116  for details. \n Web server for local preview \n Launch a web server to preview the generated documentation locally with  make render-docs . \n For more information on this topic, see :ref: testing documentation <testing-documentation> . \n Custom Sphinx roles \n The documentation defines several custom roles: \n \n git-tree \n github-project \n github-backport \n gh-issue \n prev-docs \n \n Calling these roles helps insert links based on specific URL templates, via the\n extlinks _ extension. They are all configured in  Documentation/conf.py .\nThey should be used wherever relevant, to ensure that formatting for all links\nto the related resources remain consistent. \n .. _extlinks: https://www.sphinx-doc.org/en/master/usage/extensions/extlinks.html \n Custom Sphinx directives \n Cilium's documentation does not implement custom directives as of this writing. \n Custom extensions \n Cilium's documentation uses custom extensions for Sphinx, implemented under\n Documentation/_exts . \n \n One defines the custom filters for the spell checker. \n One patches Sphinx's HTML translator to open all external links in new tabs. \n \n Google Analytics \n The documentation uses Google Analytics to collect metrics. This is configured\nin  Documentation/conf.py . \n Customization \n Here are additional elements of customization for Cilium's documentation\ndefined in the main repository: \n \n \n Some custom CSS; see also class  wrapped-table  in the related CSS file\n Documentation/_static/wrapped-table.css \n \n \n A \"Copy\" button, including a button to copy only commands from console-code\nblocks, implemented in  Documentation/_static/copybutton.js  and\n Documentation/_static/copybutton.css \n \n \n Custom header and footer definitions, for example to make link to Slack\ntarget available on all pages \n \n \n Warning banner on older branches, telling to check out the latest version\n(these may be handled directly in the ReadTheDocs configuration in the\nfuture, see also :gh-issue: 29969 ) \n \n \n Algolia search engine \n \n :spelling:word: Algolia  provides a search engine for the documentation website. See also the\nrepository for the  DocSearch scraper _. \n \n .. _DocSearch scraper: https://github.com/cilium/docsearch-scraper-webhook \n Build set up \n .. _docs_requirements: \n Requirements (dependencies) \n The repository contains two files for requirements: one that declares and pins\nthe core dependencies for the documentation build system, and that maintainers\nuse to generate a second requirement files that includes all sub-dependencies,\nvia a dedicated Makefile target. \n \n The base requirements are defined in\n Documentation/requirements-min/requirements.txt . \n Running  make -C Documentation update-requirements  uses this file as a\nbase to generate  Documentation/requirements.txt . \n \n Dependencies defined in  Documentation/requirements-min/requirements.txt \nshould never be updated in  Documentation/requirements.txt  directly.\nInstead, update the former and regenerate the latter. \n File  Documentation/requirements.txt  is used to build the  docs-builder \nDocker image. \n Dependencies defined in these requirements files include the documentation's\ncustom theme. \n Docker set-up \n The documentation build system relies on a Docker image,  docs-builder , to\nensure the build environment is consistent across different systems. Resources\nrelated to this image include  Documentation/Dockerfile  and the requirement\nfiles. \n Versions of this image are automatically built and published to a registry when\nthe Dockerfile or the list of dependencies is updated. This is handled in CI\nworkflow  .github/workflows/build-images-docs-builder.yaml . \n If a Pull Request updates the Dockerfile or its dependencies, have someone run\nthe two-steps deployment described in this workflow to ensure that the CI picks\nup an updated image. \n ReadTheDocs \n Cilium's documentation is hosted on ReadTheDocs. The main configuration options\nare defined in  Documentation/.readthedocs.yaml . \n Some options, however, are only configurable in the ReadTheDocs web interface.\nFor example: \n \n The location of the configuration file in the repository \n Redirects \n Triggers for deployment \n \n Custom theme \n The online documentation uses a custom theme based on  the ReadTheDocs theme .\nThis theme is defined in its  dedicated sphinx_rtd_theme fork repository . \n .. _the ReadTheDocs theme: https://github.com/readthedocs/sphinx_rtd_theme\n.. _dedicated sphinx_rtd_theme fork repository:\nhttps://github.com/cilium/sphinx_rtd_theme/ \n Do not use the  master  branch of this repository. The commit or branch to\nuse is referenced in  Documentation/requirements.txt , generated from\n Documentation/requirements-min/requirements.txt , in the Cilium repository. \n CI checks \n There are several workflows relating to the documentation in CI: \n \n \n Documentation workflow: \n \n Defined in  .github/workflows/documentation.yaml \n Tests the build, runs the linter, checks the spelling, ensures auto-generated\ncontents are up-to-date \n Runs  ./Documentation/check-builds.sh html  from the  docs-builder \nimage \n \n \n \n Netlify preview: \n \n Hook defined at Netlify, configured in Netlify's web interface \n Checks the build \n Used for previews on Pull Requests, but  not  for deploying the\ndocumentation \n Uses a separate Makefile target ( html-netlify ), runs  check-build.sh \nwith  SKIP_LINT=1 \n \n \n \n Runtime tests: \n \n In the absence of updates to the Dockerfile or documentation dependencies,\nruntime tests are the only workflow that always rebuilds the\n docs-builder  image before generating the docs. \n \n \n \n Image update workflow: \n \n Rebuilds the  docs-builder  image, pushes it to Quay.io, and updates the\nimage reference with the new one in the documentation workflow \n Triggers when requirements or  Documentation/Dockerfile  are updated \n Needs approval from one of the  docs-structure  team members \n \n \n \n Redirects \n Some pages change location or name over time. To improve user experience, there\nis a set of redirects in place. These redirects are configured from the\nReadTheDocs interface. They are a pain to maintain. \n Redirects could possibly be configured from existing, dedicated Sphinx\nextensions, but this option would require research to analyze and implement.",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/contributing/docs/docsframework.rst",
  "extracted_at": "2025-09-03T00:53:44.780069Z"
}
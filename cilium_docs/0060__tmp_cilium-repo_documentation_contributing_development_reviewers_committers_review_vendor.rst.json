{
  "url": "file:///tmp/cilium-repo/Documentation/contributing/development/reviewers_committers/review_vendor.rst",
  "content": ".. only:: not (epub or latex or html)\n\n    WARNING: You are looking at unreleased Cilium documentation.\n    Please use the official rendered version released here:\n    https://docs.cilium.io\n\n.. _review_vendor:\n\n****************************\nReviewing for @cilium/vendor\n****************************\n\nWhat is @cilium/vendor?\n=======================\n\nTeam `@cilium/vendor <vendor_team_>`_ is a GitHub team of Cilium contributors\nwho are responsible for maintaining the good state of Go dependencies for\nCilium and its related projects by reviewing Pull Requests (PRs) that update\nfiles related to dependency declaration:\n\n* `go.mod <go_dot_mod_>`_\n* `go.sum <go_dot_sum_>`_\n* `vendor/ <vendor_slash_>`_\n\nEach time a contributor opens a PR modifying these files, GitHub\nautomatically assigns one member of the team for review.\n\nOpen Pull Requests awaiting reviews from @cilium/vendor are\n`listed here <vendor_to_review_>`_.\n\nTo join the team, you must be a Cilium Reviewer. see `Cilium's Contributor\nLadder <ladder_>`_ for details on the requirements and the application process.\n\nThe team has a dedicated Slack channel in the Cilium Community Slack Workspace\nnamed `#dev-vendor <dev_vendor_slack_>`_, which can be used for starting discussions\nand asking questions in regards to dependency management for Cilium and its related\nprojects.\n\n.. _vendor_team: https://github.com/orgs/cilium/teams/vendor\n.. _go_dot_mod: https://github.com/cilium/cilium/blob/main/go.mod\n.. _go_dot_sum: https://github.com/cilium/cilium/blob/main/go.sum\n.. _vendor_slash: https://github.com/cilium/cilium/blob/main/vendor\n.. _vendor_to_review: https://github.com/pulls?q=is%3Aopen+is%3Apr+team-review-requested%3Acilium%2Fvendor+archived%3Afalse+org%3Acilium+\n.. _ladder: https://github.com/cilium/community/blob/main/CONTRIBUTOR-LADDER.md\n.. _dev_vendor_slack: https://cilium.slack.com/archives/C07GZTL0Z1P\n\nReviewing Pull Requests\n=======================\n\nThis section describes some of the processes and expectations for reviewing PRs\non behalf of @cilium/vendor. Note that :ref:`the generic PR review\nprocess for Committers <review_process>` still applies, even though it is not\nspecific to dependencies.\n\nExisting Dependencies\n---------------------\n\nUpdates to existing dependencies most commonly occur through PRs opened by\n`Renovate <renovate_>`_, which is a 3rd party service used throughout the\nCilium organization. Renovate continually checks repositories for out-of-date\ndependencies and opens new PRs to update any it finds.\n\nWhen reviewing PRs that update an existing dependency, members of the\n@cilium/vendor team are required to ensure that the update does not include\nany breaking changes or licensing issues. These checks are facilitated via\nGitHub Action CI workflows, which are triggered by commenting ``/test`` within\na PR. See :ref:`CI  / GitHub Actions <ci_gha>` for more information on their\nuse.\n\n.. _renovate: https://docs.renovatebot.com\n\nNew Dependencies\n----------------\n\nWhen a new dependency is added as part of a PR, the @cilium/vendor team will\nbe assigned to ensure the new dependency meets the following criteria:\n\n1. The new dependency must add functionality that is not already provided, in\n   order of preference, within Go's standard library, an internal package to the\n   project, or an existing dependency.\n2. The functionality provided by the new dependency must be non-trivial to\n   re-implement manually.\n3. The new dependency must be actively maintained, having new commits and/or\n   releases within the past year.\n4. The new dependency must appear to be of generally good quality, having a\n   strong user base, automated testing with high code coverage, and documentation.\n5. The new dependency must have a license which is allowed by the `CNCF <cncf_>`_,\n   as either one of the `generally approved licenses <allowed_licenses_>`_ or one\n   that is allowed via `exception <license_exceptions_>`_. An automated CI check\n   is in place to help check this requirement, but may need updating as the list\n   of allowable licenses by the CNCF changes and Cilium dependencies change. The\n   source for the license check tool can be found `here <licensecheck_>`_.\n\nThese criteria ensure the long-term success of the project by justifying the\ninclusion of the new dependency into the project's codebase.\n\n.. _cncf: https://www.cncf.io\n.. _allowed_licenses: https://github.com/cncf/foundation/blob/main/allowed-third-party-license-policy.md\n.. _license_exceptions: https://github.com/cncf/foundation/tree/main/license-exceptions\n.. _licensecheck: https://github.com/cilium/cilium/blob/main/tools/licensecheck/allowed.go\n\nCilium Imports\n--------------\n\nA subset of the repositories the @cilium/vendor team is responsible for import\ncode from cilium/cilium as a dependency. A complication in this relationship\nis the usage of `replace directives <replace_directives_>`_ in the\n`cilium/cilium go.mod file <go_dot_mod_>`_. Replace directives are only applied\nto the main module's go.mod file and do not carry over when imported by\nanother module. This creates the need for replace directives used in\nthe cilium/cilium go.mod file to be synced with any module which imports\ncilium/cilium as a dependency.\n\nThe vendor team is therefore responsible for explicitly discouraging the use\nof replace directives where possible, due to the extra maintenance burden that\nthey incur.\n\nA replace directive may be used if a required change to an imported\nlibrary is in the process of being upstreamed and a fork of the upstream library\nis used as a temporary alternative until the upstream library is released with the\nrequired change. The developer introducing the replace directive should ensure\nthat the replace directive will be removed before the next release, even if it\ninvolves creating a fork of the upstream library and modifying import statements\nof the library to point to the fork.\n\nWhen a replace directive is added into the go.mod file, the vendor team is\nresponsible for the following:\n\n1. A comment is added above the replace directive in the go.mod file describing the\n   reason it was added.\n2. An issue is created in the project's repository with a ``release-blocker`` label\n   attached, tracking the removal of the replace directive before the next release\n   of the project. The issue should be assigned to the developer who added the\n   replace directive.\n3. Ensuring that replace directives are synced when reviewing PRs which update the\n   version of a cilium/cilium dependency.\n\nIf a change that is required to be made to an imported library cannot be upstreamed,\nthe library's import in the go.mod file should be changed to directly use a fork of\nthe library containing the change, avoiding the need for a replace directive. For\nan example of this change, see `cilium/cilium#27582 <cilium_cilium_27582_>`_.\n\n.. _replace_directives: https://go.dev/ref/mod#go-mod-file-replace\n.. _cilium_cilium_27582: https://github.com/cilium/cilium/pull/27582\n",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/contributing/development/reviewers_committers/review_vendor.rst",
  "extracted_at": "2025-09-03T00:53:44.753796Z"
}
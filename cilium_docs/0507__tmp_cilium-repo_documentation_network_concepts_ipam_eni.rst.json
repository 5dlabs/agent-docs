{
  "url": "file:///tmp/cilium-repo/Documentation/network/concepts/ipam/eni.rst",
  "content": ".. only:: not (epub or latex or html) \n WARNING: You are looking at unreleased Cilium documentation.\nPlease use the official rendered version released here:\nhttps://docs.cilium.io\n \n .. _ipam_eni: \n #######\nAWS ENI\n####### \n The AWS ENI allocator is specific to Cilium deployments running in the AWS\ncloud and performs IP allocation based on IPs of  AWS Elastic Network Interfaces (ENI) <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html> __ by\ncommunicating with the AWS EC2 API. \n The architecture ensures that only a single operator communicates with the EC2\nservice API to avoid rate-limiting issues in large clusters. A pre-allocation\nwatermark is used to maintain a number of IP addresses to be available for use\non nodes at all time without needing to contact the EC2 API when a new pod is\nscheduled in the cluster. \n Note that Cilium currently does not support IPv6-only ENIs. Cilium support for\nIPv6 ENIs is being tracked in :gh-issue: 18405 , and the related feature of\nassigning IPv6 prefixes in :gh-issue: 19251 . \n \n Architecture \n \n .. image:: eni_arch.png\n:align: center \n The AWS ENI allocator builds on top of the CRD-backed allocator. Each node\ncreates a  ciliumnodes.cilium.io  custom resource matching the node name when\nCilium starts up for the first time on that node. It contacts the EC2 metadata\nAPI to retrieve the instance ID, instance type, and VPC information, then it\npopulates the custom resource with this information. ENI allocation parameters\nare provided as agent configuration option and are passed into the custom\nresource as well. \n The Cilium operator listens for new  ciliumnodes.cilium.io  custom resources\nand starts managing the IPAM aspect automatically. It scans the EC2 instances\nfor existing ENIs with associated IPs and makes them available via the\n spec.ipam.available  field. It will then constantly monitor the used IP\naddresses in the  status.ipam.used  field and automatically create ENIs and\nallocate more IPs as needed to meet the IP pre-allocation watermark. This ensures\nthat there are always IPs available. \n The selection of subnets to use for allocation as well as attachment of\nsecurity groups to new ENIs can be controlled separately for each node. This\nmakes it possible to hand out pod IPs with differing security groups on\nindividual nodes. \n The corresponding datapath is described in section :ref: aws_eni_datapath . \n \n Configuration \n \n \n \n The Cilium agent and operator must be run with the option  --ipam=eni  or\nthe option  ipam: eni   must be set in the ConfigMap. This will enable ENI\nallocation in both the node agent and operator. \n \n \n In most scenarios, it makes sense to automatically create the\n ciliumnodes.cilium.io  custom resource when the agent starts up on a node\nfor the first time. To enable this, specify the option\n --auto-create-cilium-node-resource  or  set\n auto-create-cilium-node-resource: \"true\"  in the ConfigMap. \n \n \n If IPs are limited, run the Operator with option\n --aws-release-excess-ips=true . When enabled, operator checks the number\nof IPs regularly and attempts to release excess free IPs from ENI. \n \n \n It is generally a good idea to enable metrics in the Operator as well with\nthe option  --enable-metrics . See the section :ref: install_metrics  for\nadditional information how to install and run Prometheus including the\nGrafana dashboard. \n \n \n By default, ENIs will be tagged with the cluster name, to allow Cilium\nOperator to garbage collect these ENIs if left dangling. The cluster name is\neither extracted from Cilium's own  cluster-name  flag or from the\n aws:eks:cluster-name  tag on the operator's EC2 instance. If neither\ncluster names are available, a static default cluster name is assumed and\nENI garbage collection will be performed across all such unnamed clusters.\nYou may override this behavior by setting a cluster-specific  --eni-gc-tags \ntag set. \n \n \n Custom ENI Configuration \n Custom ENI configuration can be defined with a custom CNI configuration\n ConfigMap : \n Create a CNI configuration \n Create a  cni-config.yaml  file based on the template below. Fill in the\n subnet-tags  field, assuming that the subnets in AWS have the tags applied\nto them: \n .. code-block:: yaml \n apiVersion: v1\nkind: ConfigMap\nmetadata:\nname: cni-configuration\nnamespace: kube-system\ndata:\ncni-config: |-\n{\n\"cniVersion\":\"0.3.1\",\n\"name\":\"cilium\",\n\"plugins\": [\n{\n\"cniVersion\":\"0.3.1\",\n\"type\":\"cilium-cni\",\n\"eni\": {\n\"subnet-tags\":{\n\"foo\":\"true\"\n}\n}\n}\n]\n} \n Additional parameters may be configured in the  eni  or  ipam  section of\nthe CNI configuration file. See the list of ENI allocation parameters below\nfor a reference of the supported options. \n Deploy the  ConfigMap : \n .. code-block:: shell-session \n kubectl apply -f cni-config.yaml \n Configure Cilium with subnet-tags-filter \n Using the instructions above to deploy Cilium and CNI config, specify the\nfollowing additional arguments to Helm: \n .. code-block:: shell-session \n --set cni.customConf=true  \n--set cni.configMap=cni-configuration \n ENI Allocation Parameters \n The following parameters are available to control the ENI creation and IP\nallocation: \n InstanceType \nThe AWS EC2 instance type \n This field is automatically populated when using  --auto-create-cilium-node-resource \n spec.eni.vpc-id \nThe VPC identifier used to create ENIs and select AWS subnets for IP\nallocation. \n This field is automatically populated when using  --auto-create-cilium-node-resource \n spec.eni.availability-zone \nThe availability zone used to create ENIs and select AWS subnets for IP\nallocation. \n This field is automatically populated when using  --auto-create-cilium-node-resource \n spec.eni.node-subnet-id \nThe subnet ID of the first ENI of a node. Used as a fallback for subnet\nselection in the case where no subnet IDs or tags are configured. \n This field is automatically populated when using  --auto-create-cilium-node-resource \n spec.ipam.min-allocate \nThe minimum number of IPs that must be allocated when the node is first\nbootstrapped. It defines the minimum base socket of addresses that must be\navailable. After reaching this watermark, the PreAllocate and\nMaxAboveWatermark logic takes over to continue allocating IPs. \n If unspecified, no minimum number of IPs is required. \n spec.ipam.max-allocate \nThe maximum number of IPs that can be allocated to the node.\nWhen the current amount of allocated IPs will approach this value,\nthe considered value for PreAllocate will decrease down to 0 in order to\nnot attempt to allocate more addresses than defined. \n If unspecified, no maximum number of IPs will be enforced. \n spec.ipam.pre-allocate \nThe number of IP addresses that must be available for allocation at all\ntimes.  It defines the buffer of addresses available immediately without\nrequiring for the operator to get involved. \n If unspecified, this value defaults to 8. \n spec.ipam.max-above-watermark \nThe maximum number of addresses to allocate beyond the addresses needed to\nreach the PreAllocate watermark.  Going above the watermark can help reduce\nthe number of API calls to allocate IPs, e.g. when a new ENI is allocated, as\nmany secondary IPs as possible are allocated. Limiting the amount can help\nreduce waste of IPs. \n If let unspecified, the value defaults to 0. \n spec.eni.first-interface-index \nThe index of the first ENI to use for IP allocation, e.g. if the node has\n eth0 ,  eth1 ,  eth2  and FirstInterfaceIndex is set to 1, then only\n eth1  and  eth2  will be used for IP allocation,  eth0  will be\nignored for PodIP allocation. \n If unspecified, this value defaults to 0 which means that  eth0  will\nbe used for pod IPs. \n spec.eni.security-group-tags \nThe list tags which will be used to filter the security groups to\nattach to any ENI that is created and attached to the instance. \n If unspecified, the security group ids passed in\n spec.eni.security-groups  field will be used. \n spec.eni.security-groups \nThe list of security group ids to attach to any ENI that is created\nand attached to the instance. \n If unspecified, the security group ids of  eth0  will be used. \n spec.eni.subnet-ids \nThe subnet IDs used to select the AWS subnets for IP allocation. This is an\nadditional requirement on top of requiring to match the availability zone and\nVPC of the instance. This parameter is mutually exclusive and has priority over\n spec.eni.subnet-tags . \n If unspecified, it will let the operator pick any available subnet in the AZ\nwith the most IP addresses available. \n spec.eni.subnet-tags \nThe tags used to select the AWS subnets for IP allocation. This is an\nadditional requirement on top of requiring to match the availability zone and\nVPC of the instance. \n If unspecified, no tags are required. \n spec.eni.exclude-interface-tags \nThe tags used to exclude interfaces from IP allocation. Any ENI attached to\na node which matches this set of tags will be ignored by Cilium and may be\nused for other purposes. This parameter can be used in combination with\n subnet-tags  or  first-interface-index  to exclude additional interfaces. \n If unspecified, no tags are used to exclude interfaces. \n spec.eni.delete-on-termination \nRemove the ENI when the instance is terminated \n If unspecified, this option is enabled. \n \n Operational Details \n \n Cache of ENIs, Subnets, and VPCs \n The operator maintains a list of all EC2 ENIs, VPCs and subnets associated with\nthe AWS account in a cache. For this purpose, the operator performs the\nfollowing three EC2 API operations: \n \n DescribeNetworkInterfaces \n DescribeSubnets \n DescribeVpcs \n \n The cache is updated once per minute or after an IP allocation or ENI creation\nhas been performed. When triggered based on an allocation or creation, the\noperation is performed at most once per second. \n Publication of available ENI IPs \n Following the update of the cache, all CiliumNode custom resources representing\nnodes are updated to publish eventual new IPs that have become available. \n In this process, all ENIs with an interface index greater than\n spec.eni.first-interface-index  are scanned for all available IPs.  All IPs\nfound are added to  spec.ipam.available . Each ENI meeting this criteria is\nalso added to  status.eni.enis . \n If this update caused the custom resource to change, the custom resource is\nupdated using the Kubernetes API methods  Update()  and/or  UpdateStatus() \nif available. \n Determination of ENI IP deficits or excess \n The operator constantly monitors all nodes and detects deficits in available\nENI IP addresses. The check to recognize a deficit is performed on two\noccasions: \n \n When a  CiliumNode  custom resource is updated \n All nodes are scanned in a regular interval (once per minute) \n \n If  --aws-release-excess-ips  is enabled, the check to recognize IP excess\nis performed at the interval based scan. \n When determining whether a node has a deficit in IP addresses, the following\ncalculation is performed: \n .. code-block:: go \n  availableIPs := len(spec.ipam.pool)\n neededIPs = max(spec.ipam.pre-allocate - (availableIPs - len(status.ipam.used)), spec.ipam.min-allocate - availableIPs)\n if spec.ipam.max-allocate > 0 {\n  neededIPs = min(max(spec.ipam.max-allocate - availableIPs, 0), neededIPs)\n }\n \n For excess IP calculation: \n .. code-block:: go \n  availableIPs := len(spec.ipam.pool)\n upperBound := spec.ipam.min-allocate + spec.ipam.max-above-watermark\n switch {\n case availableIPs <= upperBound:\n   excessIPs = 0\n case len(status.ipam.used) <= upperBound && len(status.ipam.used) + spec.ipam.pre-allocate <= upperBound:\n   excessIPs = availableIPs - upperBound\n default:\n   excessIPs = max(availableIPs - len(status.ipam.used) - upperBound, 0)\n }\n \n Upon detection of a deficit, the node is added to the list of nodes which\nrequire IP address allocation. When a deficit is detected using the interval\nbased scan, the allocation order of nodes is determined based on the severity\nof the deficit, i.e. the node with the biggest deficit will be at the front of\nthe allocation queue. Nodes that need to release IPs are behind nodes that need\nallocation. \n The allocation queue is handled on demand but at most once per second. \n IP Allocation \n When performing IP allocation for a node with an address deficit, the operator\nfirst looks at the ENIs which are already attached to the instance represented\nby the CiliumNode resource. All ENIs with an interface index greater than\n spec.eni.first-interface-index  are considered for use. \n .. note:: \n In order to not use  eth0  for IP allocation, set\n spec.eni.first-interface-index  to  1  to skip the first interface in\nline. \n The operator will then pick the first already allocated ENI which meets the\nfollowing criteria: \n \n \n The ENI has addresses associated which are not yet used or the number of\naddresses associated with the ENI is lesser than the instance type specific\nlimit. \n \n \n The subnet associated with the ENI has IPs available for allocation \n \n \n The following formula is used to determine how many IPs are allocated on the ENI: \n .. code-block:: go \n   // surgeAllocate kicks in if numPendingPods is greater than NeededAddresses\n  min(AvailableOnSubnet, min(AvailableOnENI, NeededAddresses + spec.ipam.max-above-watermark + surgeAllocate))\n \n .. note:: \n In scenarios where the pre-allocated number is lower than the number of pending pods on the node, the operator will\npro-actively allocate more than the pre-allocated number of IPs to avoid having to wait for the next allocation\ncycles. \n This means that the number of IPs allocated in a single allocation cycle can be\nless than what is required to fulfill  spec.ipam.pre-allocate . \n In order to allocate the IPs, the method  AssignPrivateIpAddresses  of the\nEC2 service API is called. When no more ENIs are available meeting the above\ncriteria, a new ENI is created. \n IP Release \n When performing IP release for a node with IP excess, the operator scans\nENIs attached to the node with an interface index greater than\n spec.eni.first-interface-index  and selects an ENI with the most free IPs\navailable for release. The following formula is used to determine how many IPs\nare available for release on the ENI: \n .. code-block:: go \n   min(FreeOnENI, (FreeIPs - spec.ipam.pre-allocate - spec.ipam.max-above-watermark))\n \n Operator releases IPs from the selected ENI, if there is still excess free IP\nnot released, operator will attempt to release in next release cycle. \n In order to release the IPs, the method  UnassignPrivateIpAddresses  of the\nEC2 service API is called. There is no limit on ENIs per subnet so ENIs are\nremained on the node. \n ENI Creation \n As long as an instance type is capable allocating additional ENIs, ENIs are\nallocated automatically based on demand. \n When allocating an ENI, the first operation performed is to identify the best\nsubnet. This is done by searching through all subnets and finding a subnet that\nmatches the following criteria: \n \n The VPC ID of the subnet matches  spec.eni.vpc-id \n The Availability Zone of the subnet matches\n spec.eni.availability-zone \n \n If set,  spec.eni.subnet-ids  or  spec.eni.subnet-tags  are used to further\nnarrow down the set of candidate subnets. Any subnet with an ID in\n subnet-ids  is a candidate, whereas a subnet must match all  subnet-tags \nto be candidate. Note that when  subnet-ids  is set,  subnet-tags  are\nignored. If multiple subnets match, the subnet with the most available addresses\nis selected. \n If neither  subnet-ids  nor  subnet-tags  are set, the operator consults\n spec.eni.node-subnet-id , attempting to create the ENI in the same subnet as\nthe primary ENI of the instance. If this is not possible (e.g. if there are not\nenough IPs in said subnet), the operator will look for the subnet in the same\nroute table with the node's subnet. If it's not possible, falls back to allocating\nthe IP in the largest subnet matching VPC and Availability Zone. \n After selecting the subnet, operator will check selected subnets is in the same\nroute table with the node's subnet. It will generate the warning log if there is\nmismatch to prevent the unexpected routing behavior. \n After selecting the subnet, the interface index is determined. For this purpose,\nall existing ENIs are scanned and the first unused index greater than\n spec.eni.first-interface-index  is selected. \n After determining the subnet and interface index, the ENI is created and\nattached to the EC2 instance using the methods  CreateNetworkInterface  and\n AttachNetworkInterface  of the EC2 API. \n The security group ids attached to the ENI are computed in the following order: \n \n The field  spec.eni.security-groups  is consulted first. If this is set\nthen these will be the security group ids attached to the newly created ENI. \n The filed  spec.eni.security-group-tags  is consulted. If this is set then\nthe operator will list all security groups in the account and will attach to\nthe ENI the ones that match the list of tags passed. \n Finally if none of the above fields are set then the newly created ENI will\ninherit the security group ids of  eth0  of the machine. \n \n The description will be in the following format: \n .. code-block:: go \n  \"Cilium-CNI (<EC2 instance ID>)\"\n \n If the ENI tagging feature is enabled then the ENI will be tagged with the provided information. \n ENI Deletion Policy \n ENIs can be marked for deletion when the EC2 instance to which the ENI is\nattached to is terminated. In order to enable this, the option\n spec.eni.delete-on-termination  can be enabled. If enabled, the ENI\nis modified after creation using  ModifyNetworkInterfaceAttribute  to specify this\ndeletion policy. \n Node Termination \n When a node or instance terminates, the Kubernetes apiserver will send a node\ndeletion event. This event will be picked up by the operator and the operator\nwill delete the corresponding  ciliumnodes.cilium.io  custom resource. \n .. _ec2privileges: \n \n Required Privileges \n \n The following EC2 privileges are required by the Cilium operator in order to\nperform ENI creation and IP allocation: \n \n DeleteNetworkInterface \n DescribeNetworkInterfaces \n DescribeSubnets \n DescribeVpcs \n DescribeRouteTables \n DescribeSecurityGroups \n CreateNetworkInterface \n AttachNetworkInterface \n ModifyNetworkInterfaceAttribute \n AssignPrivateIpAddresses \n CreateTags \n \n If ENI GC is enabled (which is the default), and  --cluster-name  and  --eni-gc-tags  are not set to custom values: \n \n DescribeTags \n \n If release excess IP enabled: \n \n UnassignPrivateIpAddresses \n \n If  --instance-tags-filter  is used: \n \n DescribeInstances \n \n \n EC2 instance types ENI limits \n \n The EC2 Instance ENI limits is only fetched from the EC2 API dynamically from 1.18 onwards. \n This requires the EC2 having  DescribeInstanceTypes  IAM permission, which is included in the EKS built-in policy  AmazonEKSWorkerNodePolicy .\nyou can find more details at  AmazonEKSWorkerNodePolicy <https://docs.aws.amazon.com/aws-managed-policy/latest/reference/AmazonEKSWorkerNodePolicy.html> __. \n \n Metrics \n \n The IPAM metrics are documented in the section :ref: ipam_metrics . \n \n Node Configuration \n \n The IP address and routes on ENIs attached to the instance will be\nmanaged by the Cilium agent. Therefore, any system service trying to manage\nnewly attached network interfaces will interfere with Cilium's configuration.\nCommon scenarios are  NetworkManager  or  systemd-networkd  automatically\nperforming DHCP on these interfaces or removing Cilium's IP address when the\ncarrier is temporarily lost. Be sure to disable these services or configure\nyour Linux distribution to not manage the newly attached ENI devices.\nThe following examples configure all Linux network devices named  eth* \nexcept  eth0  as unmanaged. \n .. tabs:: \n .. group-tab:: Network Manager \n     .. code-block:: shell-session\n\n        # cat <<EOF >/etc/NetworkManager/conf.d/99-unmanaged-devices.conf\n        [keyfile]\n        unmanaged-devices=interface-name:eth*,except:interface-name:eth0\n        EOF\n        # systemctl reload NetworkManager\n \n .. group-tab:: systemd-networkd \n     .. code-block:: shell-session\n\n        # cat <<EOF >/etc/systemd/network/99-unmanaged-devices.network\n        [Match]\n        Name=eth[1-9]*\n\n        [Link]\n        Unmanaged=yes\n        EOF\n        # systemctl restart systemd-networkd",
  "item_type": "unknown",
  "module_path": "/tmp/cilium-repo/Documentation/network/concepts/ipam/eni.rst",
  "extracted_at": "2025-09-03T01:13:29.216271Z"
}
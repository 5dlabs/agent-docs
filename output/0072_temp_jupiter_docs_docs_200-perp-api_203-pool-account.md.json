{
  "url": "file://temp_jupiter_docs/docs/200-perp-api/203-pool-account.md",
  "content": "sidebar_label: \"Pool Account\"\ndescription: \"Understand and integrate the Jupiter Perp Program.\"\ntitle: \"Pool Account\" \n\n     Pool Account \n     \n\n This page contains an overview of the  Solana account types  used in the Jupiter Perpetuals Program, and specifically the  Pool  account. \n The  Pool  account is a struct which represents a set of parameters and states associated to the data for JLP pool, including AUM and  Custody  data. \n :::note only one pool account\nThere is only one  Pool  account .\n::: \n :::tip Example Typescript Repository\nThis  repository  contains Typescript code samples on interacting with the Jupiter Perpetuals program IDL with  anchor  and  @solana/web3.js \n You can also find the  Custody Account fields in the repository  or on a  blockchain explorer .\n::: \n Account Details \n Each  Pool  account contains the following data: \n Field Description \n name Type:   string The name for the account. \n custodies Type:   publicKey An array containing the public keys for the custodies (tokens) managed by the JLP pool. \n aumUsd Type:   u128 The current AUM value (USD) for the JLP pool. The  aumUsd  value's calculation can be summarized by getting the USD value of the tokens managed by the pool minus the USD value reserved to pay off trader profits. Refer to the  Custody account  details for more details on AUM calculation. \n limit Type:   Limit Contains values for the pool's limits. \n fees Type:   Fees Sets the fee amounts or percentages for the Jupiter Perpetuals exchange. \n poolApr Type:   PoolApr Contains data related to the pool's APR / APY calculations. \n \n Limit \n Field Description \n maxAumUsd Type:   u128 The max AUM for the JLP pool. This acts as a max cap / ceiling as the JLP will not accept deposits when the cap is hit. \n tokenWeightageBufferBps Type:   u128 The token weightage buffer (in basis points) to calculate the token's maximum or minimum current weightage based on the target weightage. Currently,  tokenWeightageBufferBps  is set to  2000  which means the the current weightage cannot be lower or higher than + / - 20% of the token's target weightage. For example, if SOL's target weightage for the JLP pool is 50%, the current weightage cannot be less than 40% or exceed 60%. The pool will not allow deposits or withdrawals if the action causes the token to exceed its target weightage. \n maxPositionUsd Type:   u64 Sets the maximum position size. The current  maxPositionUsd  value is  2_500_000_000_000  which means a position's max size is $2,500,000. \n \n Fees \n Field Description \n increasePositionBps Type:   string A fixed fee of 6 BPS (0.06%) is charged for opening or increasing a position. \n decreasePositionBps Type:   publicKey A fixed fee of 6 BPS (0.06%) is charged for closing or decreasing a position. \n addRemoveLiquidityBps Type:   u128 Fee charged when adding or removing liquidity to/from the pool. \n swapBps Type:   Limit Swap fee for exchanging non-stablecoin tokens routed through the liquidity pool. swap fee = swapBps ± swapTaxBps \n taxBps Type:   PoolApr Tax fee for non-stablecoins, determined based on the difference between the current and target weightage. A larger difference results in a higher tax fee, encouraging liquidity providers to rebalance the pool to the target weightage. \n stableSwapBps Type:   Limit Swap fee for exchanges involving stablecoins, routed through the liquidity pool. swap fee = stableSwapBps ± stableSwapTaxBps \n stableSwapTaxBps Type:   Fees Tax fee for stablecoin swaps. Similar to taxBps, this fee is determined by the difference between the current and target weightage. \n protocolShareBps Type:   PoolApr Jupiter takes a share of 2500 BPS (25%) from the fees collected by the pool. \n \n PoolApr \n Field Description \n lastUpdated Type:   i64 The UNIX timestamp when the pool's APR data was last updated. \n feeAprBps Type:   u64 The pool's APR in BPS format. The APR is calculated weekly by dividing the pool's realized fees (minus the 25% collected by the protocol) by the total pool value, adjusting for the 1 week time period to annualize the rate. \n realizedFeeUsd Type:   u64 The fees collected by the pool so far. This fee is reinvested back into the pool and is also used to calculate the APR as mentioned above. realizedFeeUsd resets to zero when the fee is reinvested into the pool hence causing the APR value to fluctuate weekly.",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/200-perp-api/203-pool-account.md",
  "extracted_at": "2025-09-03T01:39:45.808514Z"
}
{
  "url": "file://temp_jupiter_docs/Moved/2-limit-order-with-sdk.md",
  "content": "sidebar_label: \"Limit Order with SDK\"\ndescription: Master limit order creation on Solana with Jupiter SDK. Streamline trades and optimize with referral perks.\ntitle: Creating a Limit Order with the SDK \n\n     Jupiter Limit Order SDK Documentation \n     \n\n Program Address \n jupoNjAxXgZ4rjzxzPMP4oxduvQsQtZzyknqvzYNrNu \n Installation \n Our published package can be found here at  NPM . \n yarn add @jup-ag/limit-order-sdk\n \n Usage \n 1. Import the needed libraries \n import { LimitOrderProvider } from \"@jup-ag/limit-order-sdk\";\n \n 2. Load limit order instance with connection \n // This RPC endpoint is only for demonstration purposes so it may not work.\nconst SOLANA_RPC_ENDPOINT =\n  \"https://neat-hidden-sanctuary.solana-mainnet.discover.quiknode.pro/2af5315d336f9ae920028bbb90a73b724dc1bbed/\";\nconst connection = new Connection($SOLANA_RPC_ENDPOINT);\n\nconst limitOrder = new LimitOrderProvider(\n  connection,\n  // referralPubKey and referralName are both optional.\n  // Please provide both to get referral fees.\n  // More details in the section below.\n  // referralPubKey,\n  // referralName\n);\n \n :::info\nAlways make sure that you are using your own RPC endpoint. The RPC endpoint used by the connection object in the above example may not work anymore.\n::: \n Create limit order \n // Base key are used to generate a unique order id\nconst base = Keypair.generate();\n\nconst { tx, orderPubKey } = await limitOrder.createOrder({\n  owner: owner.publicKey,\n  inAmount: new BN(100000), // 1000000 => 1 USDC if inputToken.address is USDC mint\n  outAmount: new BN(100000),\n  inputMint: new PublicKey(inputToken.address),\n  outputMint: new PublicKey(outputToken.address),\n  expiredAt: null, // new BN(new Date().valueOf() / 1000)\n  base: base.publicKey,\n});\n\nawait sendAndConfirmTransaction(connection, tx, [owner, base]);\n \n expiredAt  - Can be either null or Unix timestamp in seconds. \n Query user order and history \n import { ownerFilter } from \"@jup-ag/limit-order-sdk\";\nimport { OrderHistoryItem, TradeHistoryItem } from \"@jup-ag/limit-order-sdk\";\n\nconst openOrder = await limitOrder.getOrders([ownerFilter(owner.publicKey)]);\n\nconst orderHistory: OrderHistoryItem[] = await limitOrder.getOrderHistory({\n  wallet: owner.publicKey.toBase58(),\n  take: 20, // optional, default is 20, maximum is 100\n  // lastCursor: order.id // optional, for pagination\n});\n\nconst orderHistoryCount: number = await limitOrder.getOrderHistoryCount({\n  wallet: owner.publicKey.toBase58(),\n});\n\nconst tradeHistory: TradeHistoryItem[] = await limitOrder.getTradeHistory({\n  wallet: owner.publicKey.toBase58(),\n  take: 20, // optional, default is 20, maximum is 100\n  // lastCursor: order.id // optional, for pagination\n});\n\nconst tradeHistoryCount: number = await limitOrder.getTradeHistoryCount({\n  wallet: owner.publicKey.toBase58(),\n});\n \n Cancel order \n const tx = await limitOrder.cancelOrder({\n  owner: owner.publicKey,\n  orderPubKey: order.publicKey,\n});\n\nawait sendAndConfirmTransaction(connection, tx, [owner]);\n \n Batch cancel order \n const tx = await limitOrder.batchCancelOrder({\n  owner: owner.publicKey,\n  ordersPubKey: batchOrdersPubKey,\n});\n\nawait sendAndConfirmTransaction(connection, tx, [owner]);\n \n :::info\nDue to the transaction size limit, the maximum allowed cancellation order per transaction in a batch is 10.\n::: \n Referral \n Check out the  referral program  for Limit Order.",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/Moved/2-limit-order-with-sdk.md",
  "extracted_at": "2025-09-03T01:39:45.937084Z"
}
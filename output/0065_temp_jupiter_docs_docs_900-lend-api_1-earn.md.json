{
  "url": "file://temp_jupiter_docs/docs/900-lend-api/1-earn.md",
  "content": "sidebar_label: \"Earn (Beta)\"\ndescription: \"Use Jupiter Lend to borrow assets.\"\ntitle: \"Earn (Beta)\" \n\n     Earn (Beta) \n     \n\n :::note \n \n Lite URL:  https://lite-api.jup.ag/quote \n Pro URL:  https://api.jup.ag/swap/v1/quote \n \n To upgrade to Pro or understand our rate limiting, please refer to this section. \n \n API Key Setup \n API Rate Limit \n::: \n \n :::tip API Reference\nTo fully utilize the Lend API, check out the  Lend API Reference .\n::: \n Prerequisite \n \n     \n         \n             \n                 Dependencies \n             \n         \n     \n npm install @solana/web3.js@1 # Using v1 of web3.js instead of v2\nnpm install dotenv # If required for wallet setup\n \n \n \n     \n         \n             \n                 RPC \n             \n         \n     \n Set up RPC \n :::note\nSolana provides a  default RPC endpoint . However, as your application grows, we recommend you to always use your own or provision a 3rd party providerâ€™s RPC endpoint such as  Helius  or  Triton .\n::: \n import { Connection } from \"@solana/web3.js\";\nconst connection = new Connection('https://api.mainnet-beta.solana.com');\n \n \n \n     \n         \n             \n                 Wallet \n             \n         \n     \n Set up Development Wallet \n :::note \n \n You can paste in your private key for testing purposes but this is not recommended for production applications. \n If you want to store your private key in the project directly, you can do it via a  .env  file.\n::: \n \n To set up a development wallet via  .env  file, you can use the following script. \n // index.js\nimport { Keypair } from '@solana/web3.js';\nimport dotenv from 'dotenv';\nrequire('dotenv').config();\n\nconst wallet = Keypair.fromSecretKey(bs58.decode(process.env.PRIVATE_KEY || ''));\n \n # .env\nPRIVATE_KEY=\"\"\n \n To set up a development wallet via a wallet generated via  Solana CLI , you can use the following script. \n import { Keypair } from '@solana/web3.js';\nimport fs from 'fs';\n\nconst privateKeyArray = JSON.parse(fs.readFileSync('/Path/To/.config/solana/id.json', 'utf8').trim());\nconst wallet = Keypair.fromSecretKey(new Uint8Array(privateKeyArray));\n \n \n \n     \n         \n             \n                 Transaction Sending Example \n             \n         \n     \n transaction.sign([wallet]);\nconst transactionBinary = transaction.serialize();\nconsole.log(transactionBinary);\nconsole.log(transactionBinary.length);\nconst blockhashInfo = await connection.getLatestBlockhashAndContext({ commitment: \"finalized\" });\n\nconst signature = await connection.sendRawTransaction(transactionBinary, {\n  maxRetries: 0,\n  skipPreflight: true,\n});\n\nconsole.log(`Transaction sent: https://solscan.io/tx/${signature}`);\n  \ntry {\n  const confirmation = await connection.confirmTransaction({\n    signature,\n    blockhash: blockhashInfo.value.blockhash,\n    lastValidBlockHeight: blockhashInfo.value.lastValidBlockHeight,\n  }, \"confirmed\");\n\n  if (confirmation.value.err) {\n    console.error(`Transaction failed: ${JSON.stringify(confirmation.value.err)}`);\n    console.log(`Examine the failed transaction: https://solscan.io/tx/${signature}`);\n  } else {\n    console.log(`Transaction successful: https://solscan.io/tx/${signature}`);\n  }\n} catch (error) {\n  console.error(`Error confirming transaction: ${error}`);\n  console.log(`Examine the transaction status: https://solscan.io/tx/${signature}`);\n};\n \n \n Deposit and Withdraw \n Using the Deposit or Withdraw endpoint, the user can do so based on the  amount  of assets to be deposited/withdrawn. \n :::note Usage steps \n \n User chooses the token. \n User chooses the amount of assets to deposit or withdraw in the specific token mint. \n Post request to get the transaction. \n User sign and send the transaction to the network. \n The mint authority mints/burns the vault tokens to/from the user.\n::: \n \n const depositTransactionResponse = await (\n    await (\n        await fetch('https://lite-api.jup.ag/lend/v1/earn/deposit', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                asset: mint,\n                amount: '100000',\n                signer: wallet.publicKey,\n            })\n        })\n    )\n);\n \n const withdrawTransactionResponse = await (\n    await (\n        await fetch('https://lite-api.jup.ag/lend/v1/earn/withdraw', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                asset: mint,\n                amount: '100000',\n                signer: wallet.publicKey,\n            })\n        })\n    )\n);\n \n Mint and Redeem \n Using the Mint or Redeem endpoint, the user can do so based on the number  shares  to be minted/redeemed. \n :::note Usage steps \n \n User chooses the token. \n User chooses the number of shares to deposit or withdraw in the specific token mint. \n Post request to get the transaction. \n User sign and send the transaction to the network. \n The mint authority mints/burns the vault tokens to/from the user.\n::: \n \n const mintTransactionResponse = await (\n    await (\n        await fetch('https://lite-api.jup.ag/lend/v1/earn/mint', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                asset: mint,\n                signer: wallet.publicKey,\n                shares: '100000',\n            })\n        })\n    )\n);\n \n const redeemTransactionResponse = await (\n    await (\n        await fetch('https://lite-api.jup.ag/lend/v1/earn/redeem', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                asset: mint,\n                signer: wallet.publicKey,\n                shares: '100000',\n            })\n        })\n    )\n);\n \n \n Build Your Own Transaction \n The Lend API provides 2 ways to interface with the Earn functions in the Jupiter Lend Program. You can either make a post request to directly get the  Transaction , or  Instruction  which can be used for CPI or composing with additional instructions. \n Transaction \n To use the Transaction method, simply request to the endpoints without  -instructions  suffix directly, as shown in the examples above. The API will respond with an unsigned base64 transaction for the signer to sign, then sent to the network for execution. \n Instruction \n In some use cases, you'd prefer to utilize the instructions instead of the serialized transaction, so you can utilize with CPI or compose with other instructions. You can make a post request to  -instructions endpoints instead. \n \n     \n         \n             \n                 Building with Instuctions Code Snippet \n             \n         \n     \nExample code snippet of using `/deposit-instructions` endpoint and building a transaction with the instructions.\n import { Connection, Keypair, PublicKey, TransactionMessage, TransactionInstruction, VersionedTransaction } from '@solana/web3.js';\nimport fs from 'fs';\n\nconst privateKeyArray = JSON.parse(fs.readFileSync('/Path/to/private/key', 'utf8').trim());\nconst wallet = Keypair.fromSecretKey(new Uint8Array(privateKeyArray));\nconst connection = new Connection('insert-your-own-rpc');\n\nconst depositIx = await (\n    await fetch (\n        'https://lite-api.jup.ag/lend/v1/earn/deposit-instructions', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                asset: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n                amount: '1000000',\n                signer: wallet.publicKey,\n            }, null, 2)\n        }\n    )\n).json();\n\nconsole.log(JSON.stringify(depositIx, null, 2));\n\nconst deserializeInstruction = (instruction) => {\n    return new TransactionInstruction({\n    programId: new PublicKey(instruction.programId),\n    keys: instruction.accounts.map((key) => ({\n        pubkey: new PublicKey(key.pubkey),\n        isSigner: key.isSigner,\n        isWritable: key.isWritable,\n    })),\n    data: Buffer.from(instruction.data, 'base64'),\n    });\n};\n\nconst blockhash = (await connection.getLatestBlockhash()).blockhash;\nconst messageV0 = new TransactionMessage({\n    payerKey: wallet.publicKey,\n    recentBlockhash: blockhash,\n    instructions: [\n        ...depositIx.instructions.map(deserializeInstruction)\n    ],\n}).compileToV0Message();\n\nconst transaction = new VersionedTransaction(messageV0);\ntransaction.sign([wallet]);\nconst transactionBinary = transaction.serialize();\nconsole.log(transactionBinary);\nconsole.log(transactionBinary.length);\nconst blockhashInfo = await connection.getLatestBlockhashAndContext({ commitment: \"finalized\" });\n\nconst signature = await connection.sendRawTransaction(transactionBinary, {\n  maxRetries: 0,\n  skipPreflight: true,\n});\n\nconsole.log(`Transaction sent: https://solscan.io/tx/${signature}`);\n  \ntry {\n  const confirmation = await connection.confirmTransaction({\n    signature,\n    blockhash: blockhashInfo.value.blockhash,\n    lastValidBlockHeight: blockhashInfo.value.lastValidBlockHeight,\n  }, \"confirmed\");\n\n  if (confirmation.value.err) {\n    console.error(`Transaction failed: ${JSON.stringify(confirmation.value.err)}`);\n    console.log(`Examine the failed transaction: https://solscan.io/tx/${signature}`);\n  } else {\n    console.log(`Transaction successful: https://solscan.io/tx/${signature}`);\n  }\n} catch (error) {\n  console.error(`Error confirming transaction: ${error}`);\n  console.log(`Examine the transaction status: https://solscan.io/tx/${signature}`);\n};\n \n \n CPI \n \n Refer to https://github.com/jup-ag/jupiter-lend/blob/main/docs/earn/cpi.md for CPI example \n Refer to https://github.com/jup-ag/jupiter-lend/blob/main/target/idl/lending.json for IDL \n \n \n Tokens \n Jupiter Lend provides Earnings for individual tokens, meaning SOL and USDC will be deposited in isolation. To get all token information such as the underlying token, supply, rates and liquidity information. \n const vaults = await (\n    await fetch (\n        'https://lite-api.jup.ag/lend/v1/earn/tokens'\n    )\n).json();\n \n User Data \n Below are the endpoints to aid user to better manage their positions with data of each existing positions, earnings, etc. \n Positions \n Given a user, you are able to get their existing position data such as shares, underlying assets, balance and allowance. \n const userPositions = await (\n    await fetch (\n        'https://lite-api.jup.ag/lend/v1/earn/positions?users={user1},{user2}'\n    )\n).json();\n \n Earnings \n Given a user, you are able to get the rewards of a specific position, for example, the amount earned for USDC token position. \n const userRwards = await (\n    await fetch (\n        'https://lite-api.jup.ag/lend/v1/earn/earnings?user={user1}&positions={position1},{position2}'\n    )\n).json();",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/900-lend-api/1-earn.md",
  "extracted_at": "2025-09-03T01:39:45.793923Z"
}
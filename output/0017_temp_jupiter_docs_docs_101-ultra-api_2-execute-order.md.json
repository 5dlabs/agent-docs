{
  "url": "file://temp_jupiter_docs/docs/101-ultra-api/2-execute-order.md",
  "content": "sidebar_label: \"Execute Order\"\ndescription: \"Start using Jupiter Ultra API by executing a swap order and getting the execution status.\"\ntitle: \"Execute Order\" \n\n     Execute Order \n     \n\n :::note\nLite URL:  https://lite-api.jup.ag/ultra/v1/execute \nDynamic URL:  https://api.jup.ag/ultra/v1/execute \n Dynamic Rate Limits are now applied to Ultra API. \n \n No Pro plans or payment needed. \n Simply generate the universal API Key via  Portal \n Rate limits scale together with your swap volume. \n \n Read more about Ultra API Dynamic Rate Limit .\n::: \n :::tip API Reference\nTo fully utilize the Ultra API, check out the  Ultra API Reference .\n::: \n Sign Transaction \n Using the Solana  web3.js   v1  library, you can sign the transaction as follows: \n \n   \n    Set up imports and wallet for signing\n   \n npm install @solana/web3.js@1 # Using v1 of web3.js instead of v2\nnpm install bs58\nnpm install dotenv # if required for wallet setup\n \n :::note \n \n You can paste in your private key for testing purposes but this is not recommended for production applications. \n If you want to store your private key in the project directly, you can do it via a  .env  file.\n::: \n \n To set up a development wallet via  .env  file, you can use the following script. \n // index.js\nimport { Keypair } from '@solana/web3.js';\nimport dotenv from 'dotenv';\nrequire('dotenv').config();\n\nconst wallet = Keypair.fromSecretKey(bs58.decode(process.env.PRIVATE_KEY || ''));\n \n # .env\nPRIVATE_KEY=\"\"\n \n To set up a development wallet via a wallet generated via  Solana CLI , you can use the following script. \n import { Keypair } from '@solana/web3.js';\nimport fs from 'fs';\n\nconst privateKeyArray = JSON.parse(fs.readFileSync('/Path/To/.config/solana/id.json', 'utf8').trim());\nconst wallet = Keypair.fromSecretKey(new Uint8Array(privateKeyArray));\n \n \n // ... GET /order's response\n\n// Extract the transaction from the order response\nconst transactionBase64 = orderResponse.transaction\n\n// Deserialize the transaction\nconst transaction = VersionedTransaction.deserialize(Buffer.from(transactionBase64, 'base64'));\n\n// Sign the transaction\ntransaction.sign([wallet]);\n\n// Serialize the transaction to base64 format\nconst signedTransaction = Buffer.from(transaction.serialize()).toString('base64');\n \n Execute Order \n By making a post request to the  /execute  endpoint, Jupiter executes the swap transaction on behalf of you/your users. This includes handling of slippage, priority fees, transaction landing and more. \n To make a post request to execute a swap order, you need to pass in the required parameters: \n \n signedTransaction : The signed transaction \n requestId : The order response's request ID \n \n :::info  /execute  parameters\nBoth required parameters are found in the  order response , do note that the  transaction  field is the base64 encoded transaction that  you need to sign  before submitting to the network.\n::: \n const executeResponse = await (\n    await fetch('https://lite-api.jup.ag/ultra/v1/execute', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            signedTransaction: signedTransaction,\n            requestId: orderResponse.requestId,\n        }),\n    })\n).json();\n \n Execute Response \n After making the post request to the  /execute  endpoint, you will receive a response with the status of the swap. \n if (executeResponse.status === \"Success\") {\n    console.log('Swap successful:', JSON.stringify(executeResponse, null, 2));\n    console.log(`https://solscan.io/tx/${executeResponse.signature}`);\n} else {\n    console.error('Swap failed:', JSON.stringify(executeResponse, null, 2));\n    console.log(`https://solscan.io/tx/${executeResponse.signature}`);\n}\n \n Example response of successful swap: \n {\n  \"status\": \"Success\",\n  \"signature\": \"transaction signature\",\n  \"slot\": \"323598314\",\n  \"code\": 0,\n  \"inputAmountResult\": \"9995000\",\n  \"outputAmountResult\": \"1274698\",\n  \"swapEvents\": [\n    {\n      \"inputMint\": \"So11111111111111111111111111111111111111112\",\n      \"inputAmount\": \"9995000\",\n      \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n      \"outputAmount\": \"1274698\"\n    }\n  ]\n}\n \n Example response of failed swap: \n {\n  \"status\": \"Failed\",\n  \"signature\": \"transaction signature\",\n  \"error\": \"custom program error: #6023\",\n  \"code\": 4615026,\n  \"slot\": \"323597963\"\n}\n \n Response Codes \n The following is a list of error codes that can be returned by the  /execute  endpoint. \n Ultra Endpoint Codes \n Code Description Debugging \n 0 Success - \n -1 Missing cached order requestId  not found in cache, likely expired or not found \n -2 Invalid signed transaction signedTransaction  is invalid, likely failed to sign the transaction correctly \n -3 Invalid message bytes signedTransaction  is invalid, likely due to incorrect usage of  transaction  field in the order response \n \n Aggregator Swap Type Codes \n Code Description Debugging \n -1000 Failed to land Transaction failed to land on the network \n -1001 Unknown error - \n -1002 Invalid transaction - \n -1003 Transaction not fully signed - \n -1004 Invalid block height - \n \n RFQ Swap Type Codes \n Code Description Debugging \n -2000 Failed to land - \n -2001 Unknown error - \n -2002 Invalid payload - \n -2003 Quote expired User did not respond in time or RFQ provider did not execute in time \n -2004 Swap rejected User or RFQ provider rejected the swap",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/101-ultra-api/2-execute-order.md",
  "extracted_at": "2025-09-03T01:39:45.484464Z"
}
{
  "url": "file://temp_jupiter_docs/docs/100-swap-api/4-add-fees-to-swap.md",
  "content": "sidebar_label: \"Add Fees To Swap\"\ndescription: \"Jupiter Swap API allows you to add fees.\"\ntitle: \"Add Fees To Swap\" \n\n     Add Fees To Swap \n     \n\n :::info\nAs of January 2025, when integrating the Swap API, you no longer need to use the Referral Program to set up a  referralAccount  and  referralTokenAccount  to collect fees from the swaps you provide to the end users. \n Simply, just pass in any valid token account as the  feeAccount  parameter in the Swap API. \n However, do note that  it is still applicable to the Trigger API .\n::: \n :::note\nYou can still find information about the Referral Program. \n The Referral Program is an open source program by Jupiter to provide referral fees for integrators who are integrating Jupiter Swap and Jupiter Limit Order. You can check out the code  here  to gain a better understanding of how it works.\n::: \n Use Case \n By default, there are  zero  protocol fees on Jupiter Swap. Integrators have the option to introduce a platform fee denoted in basis points, e.g.  20 bps  for  0.2%  of the token input or output. \n Important Notes \n \n Input mint or the output mint  on the swap for ExactIn. \n Input mint ONLY  on the swap for ExactOut. \n Example, if you swap JUP to USDC, you cannot take fees in SOL, it has to be part of the swap. \n It does not support Token2022 tokens. \n Referral Program is no longer required. \n \n \n     \n         \n             \n                 Via Referral Program (Required only for Trigger API) \n             \n         \n     \n Important Notes \n \n The Jupiter Swap project account for the Referral Program is  45ruCyfdRkWpRNGEqWzjCiXRHkZs8WXCLQ67Pnpye7Hp . \n The  referralTokenAccount  can either be:\n \n Input mint or the output mint  on the swap for ExactIn. \n Input mint ONLY  on the swap for ExactOut. \n \n \n You can use the  Dashboard ,  SDK  or  API  to set up the  referralAccount  and  referralTokenAccount  in this guide. \n \n Let’s Get Started \n 1. Set up \n You will need to complete the prerequisites and understanding of  Environment Setup  and  Get Quote and Swap  guide as this is reliant on the Swap API. \n Obtain  referralAccount  and  referralTokenAccount \n There are 3 ways you can set up a referral account. \n \n Use our  referral dashboard  to create them. After creating, remember to find your  Referral Key  on the page and the associated token accounts. \n Use our SDK to create them. You can use the  example scripts  to create. \n Use our API to create them. You can use this  API reference  to create. \n \n Obtain  mintAccount \n As for the mint account, assuming you have an interface where a user swaps, you will know up front what are the input or output mints. For the sake of example, we will use a hardcoded mint public key. \n const referralAccount = new Publickey('ReplaceWithPubkey');\nconst mintAccount = new Publickey('So11111111111111111111111111111111111111112');\n \n 2. Set your referral fee in Quote \n Setting your referral fee is simple, just add  platformFeeBps  parameter to the  /quote  endpoint. \n In this example, we set  platformFeeBps  to  20  which equates to 0.2%. \n const quoteResponse = await (\n    await fetch(\n        'https://lite-api.jup.ag/swap/v1/quote?inputMint=So11111111111111111111111111111111111111112&outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v&amount=100000&slippageBps=50&restrictIntermediateTokens=true&platformFeeBps=20'\n    )\n  ).json();\n  \nconsole.log(JSON.stringify(quoteResponse, null, 2));\n \n 3. Set your referral token account in Swap \n In order to refer and receive fees from all types of tokens, you will need to have already initialize  referralTokenAccount s (owned by your  referralAccount ) for the mint in the swap. By calling the Swap API with the parameter  feeAccount , which is the  referralTokenAccount , you will receive the serialized swap transaction that will set a fee to be taken from the referred and sent to that token account. \n In this code block, we will be using the SDK to try to find the  referralTokenAccount  based on our previously defined  referralAccount  and  mintAccount . \n \n If the token account is found, it will proceed to the Swap API. \n If the token account is not found, it will send a transaction to the network to attempt to initialize one for the mint.  Do note that transactions may fail due to various reasons like Priority Fees. \n \n import { ReferralProvider } from \"@jup-ag/referral-sdk\";\n\nconst { tx, referralTokenAccountPubKey } = await provider.initializeReferralTokenAccount({\n    payerPubKey: wallet.publicKey,\n    referralAccountPubKey: referralAccount,\n    mint: mintAccount,\n});\n\nconst referralTokenAccount = await connection.getAccountInfo(referralTokenAccountPubKey);\n\n// Attempt to initialize a token account\nif (!referralTokenAccount) {\n    const signature = await sendAndConfirmTransaction(connection, tx, [wallet]);\n    console.log({ signature, referralTokenAccountPubKey: referralTokenAccountPubKey.toBase58() });\n\n// Since initialized, it will carry on\n} else {\n    console.log(`referralTokenAccount ${referralTokenAccountPubKey.toBase58()} for mint ${mintAccount.toBase58()} already exists`);\n};\n\nconst feeAccount = referralTokenAccountPubKey;\nconsole.log(feeAccount);\n \n However, if you are confident that the  referralTokenAccount  for specific mints have been created, you can use this method to get it.  Do note that, even if the token account is not intialized, it will return a pubkey as it is a Program Derived Address.  Read more here. \n const [feeAccount] = PublicKey.findProgramAddressSync(\n    [\n        Buffer.from(\"referral_ata\"), // A string that signifies the account type, here \"referral_ata.\"\n        referralAccount.toBuffer(), //  The public key of the referral account converted into a buffer.\n        mintAccount.toBuffer(), // The mint public key, converted into a buffer.\n    ],\n    new PublicKey(\"REFER4ZgmyYx9c6He5XfaTMiGfdLwRnkV4RPp9t9iF3\") // The public key of the Referral Program\n);\n \n Using the above, we will now know the  feeAccount  to be passed in as the parameter in Swap API. You can refer to the  Build Swap Transaction  guide to add any parameters where necessary to help transaction sending, etc. \n const swapResponse = await (\n    await fetch('https://lite-api.jup.ag/swap/v1/swap', {\n        method: 'POST',\n        headers: {\n        'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            quoteResponse,\n            userPublicKey: wallet.publicKey.toBase58(), // Pass in actual referred user in production\n            feeAccount: feeAccount,\n        })\n    })\n).json();\n \n \n 1. Set up \n You will need to complete the prerequisites and understanding of  Environment Setup  and  Get Quote and Swap  guide as this is reliant on the Swap API. \n 2. Set your fee in Quote \n Setting your fee is simple, just add  platformFeeBps  parameter to the  /quote  endpoint. \n In this example, we set  platformFeeBps  to  20  which equates to 0.2%. \n const quoteResponse = await (\n    await fetch(\n        'https://lite-api.jup.ag/swap/v1/quote?inputMint=So11111111111111111111111111111111111111112&outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v&amount=100000&slippageBps=50&restrictIntermediateTokens=true&platformFeeBps=20'\n    )\n  ).json();\n \n 3. Set your feeAccount in Swap \n In the  /swap  endpoint, you will need to pass in the  feeAccount  parameter. The  feeAccount  is any token account that will receive the fees from the swap. Do ensure that the token account is initialized and is the correct mint to receive the fees in. \n const swapResponse = await (\n    await fetch('https://api.jup.ag/swap/v1/swap', {\n        method: 'POST',\n        headers: {\n        'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            quoteResponse,\n            userPublicKey: wallet.publicKey, // Pass in actual referred user in production\n            feeAccount: feeAccount,\n        })\n    })\n).json();\n \n 4. Sign and send transaction \n Finally, the user can sign the transaction and it can be submitted to the network to be executed. You can refer to the  Send Swap Transaction  guide to complete this step. \n Create Token Account \n To create a token account, you can use the following code or refer to  Solana Cookbook . \n \n The code creates the transaction to create the token account and handles the transaction siging and sending. \n If the token account already exists, it will not create and might throw an error such as  Provided owner is not allowed . \n \n import { createAssociatedTokenAccount } from \"@solana/spl-token\";\n\nconst mintPubkey = new PublicKey(\n    \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\",\n);\n\nlet ata = await createAssociatedTokenAccount(\n    connection, // connection\n    wallet, // fee payer\n    mintPubkey, // mint\n    wallet.publicKey, // owner of the token account\n    // confirmOptions, // if you need to skip simulation and send the transaction immediately\n    // programId, // if you need to use a different token program id such as token-2022\n    // associatedTokenProgramId,\n    // allowOwnerOffCurve, // if you need to allow the owner to be off curve\n);\nconsole.log(`ATA: ${ata.toBase58()}`);",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/100-swap-api/4-add-fees-to-swap.md",
  "extracted_at": "2025-09-03T01:39:45.665879Z"
}
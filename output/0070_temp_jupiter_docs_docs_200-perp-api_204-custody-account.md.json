{
  "url": "file://temp_jupiter_docs/docs/200-perp-api/204-custody-account.md",
  "content": "sidebar_label: \"Custody Account\"\ndescription: \"Understand and integrate the Jupiter Perp Program.\"\ntitle: \"Custody Account\" \n\n     Custody Account \n     \n\n This page contains an overview of the  Solana account types  used in the Jupiter Perpetuals Program, and specifically the  Custody  account. \n The  Custody  account is a struct which represents a set of parameters and states associated to custodies (tokens) managed by the JLP pool which consists of the following custodies. \n \n   \n     Custodies \n   \n   \n     SOL \n     ETH \n     BTC \n     USDC \n     USDT \n   \n \n :::tip Example Typescript Repository\nThis  repository  contains Typescript code samples on interacting with the Jupiter Perpetuals program IDL with  anchor  and  @solana/web3.js \n You can also find the  Custody Account fields in the repository  or on a  blockchain explorer .\n::: \n Account Details \n Each  Custody  account contains the following data: \n Field Description \n pool Type:   publicKey The public key for the pool that this custody belongs to (i.e. the JLP pool). \n mint Type:   publicKey The public key for the custody's token mint account. \n tokenAccount Type:   publicKey The associated token account of the custody which holds the tokens under management for the pool. \n decimals Type:   u8 The number of decimals used for the token which is the same as the number of decimals specified in the token mint account. This is stored for convenience. \n isStable Type:   bool A boolean flag indicating if the token in custody is a stable asset. \n oracle Type:   OracleParams Contains data for the price oracle used for the custody. \n pricing Type:   PricingParams Contains data for the custody's price-related logic. \n permissions Type:   Permissions A set of global flags that can be set by the protocol's administrator to enable or disable trade actions which is useful during program upgrades or black swan events. \n targetRatioBps Type:   u64 The target weightage (in basis points) for the custody in the JLP pool. \n assets Type:   Assets Contains data used to calculate PNL, AUM, and core business logic for the program. \n fundingRateState Type:   FundingRateState Contains data used to calculate borrow fees for open positions. \n \n PricingParams \n Field Description \n tradeImpactFeeScalar Type:   u64 Sets the base value when calculating price impact fees when opening or closing positions. \n maxLeverage Type:   u64 Sets the max leverage for this custody's positions. The max leverage for all custodies is 500x at the time of writing. \n maxGlobalLongSizes Type:   u64 The maximum total position size (USD) for long positions. \n maxGlobalShortSizes Type:   u64 The maximum total position size (USD) for short positions. \n \n Assets \n Field Description \n feesReserves Type:   u64 The fees collected by all open positions for the custody.  feesReserves  resets to zero when the fees are distributed to the pool and protocol. \n owned Type:   u64 The number of tokens owned by the pool for the custody. - The owned value is increased either by providing liquidity to the pool or depositing collateral when opening or updating positions. - Conversely, the owned value decreases when liquidity is removed from the pool or collateral is withdrawn from closing positions. \n locked Type:   u64 The number of tokens locked by the pool for the custody to pay off potential profits for open positions. \n guaranteedUsd Type:   u64 This value represents the total amount borrowed in USD (position size - collateral) across all long positions. It is updated whenever traders modify their collateral through deposits or withdrawals. The system uses this aggregated figure to efficiently calculate the total profit and loss (PNL) for all long positions, which in turn is used to calculate the AUM of the JLP pool. \n globalShortSizes Type:   u64 Stores the total amount (USD) position sizes for all short positions. \n globalShortAveragePrices Type:   u64 Stores the average price (USD) for all short positions. This value and  globalShortSizes  are used to calculate the PNL for all short positions efficiently, and is again used to calculate the AUM of the JLP pool. \n \n FundingRateState \n Field Description \n cumulativeInterestRate Type:   u128 Traders are required to pay hourly borrow fees for opening leveraged positions. This fee is calculated based on two primary factors: the size of the trader's position and the current utilization of the pool for the custody. To calculate borrow fees more efficiently, each custody account contains a value called  cumulativeInterestRate . Correspondingly, each position account stores a  cumulativeInterestSnapshot  which captures the value of  cumulativeInterestRate  at the time of the position's last update. Whenever there's a change in either the borrowed assets or the total assets within a custody, the  cumulativeInterestRate  for the custody is updated. The difference between the custody's  cumulativeInterestRate  and the position's  cumulativeInterestSnapshot  is then used to calculate the position's borrow fees. \n lastUpdate Type:   i64 The UNIX timestamp for when the custody's borrow fee data was last updated. \n hourlyFundingDbps Type:   u64 A constant used to calculate the hourly borrow fees for the custody. The Jupiter Perpetuals exchange works with Gauntlet and Chaos Labs to update and fine tune the  hourlyFundingDbps  to respond to traders' feedback and market conditions.",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/200-perp-api/204-custody-account.md",
  "extracted_at": "2025-09-03T01:39:45.804102Z"
}
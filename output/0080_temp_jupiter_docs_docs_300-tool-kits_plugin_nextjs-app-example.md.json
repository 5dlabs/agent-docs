{
  "url": "file://temp_jupiter_docs/docs/300-tool-kits/plugin/nextjs-app-example.md",
  "content": "sidebar_label: \"Next.js App Example\"\ndescription: \"A step-by-step guide to integrating Jupiter Plugin into a Next.js application.\"\ntitle: \"Next.js App Example\" \n\n     Plugin Next.js App Example \n     \n\n In this guide, we'll walk you through from scratch the steps to integrate Jupiter Plugin into a Next.js application. \n Prerequisites \n Before you begin, make sure you have the following installed on your system. \n Node.js and npm : Download and install from  nodejs.org \n Step 1: Create a New Next.js Project \n Head to your preferred directory and create a new Next.js project using  create-next-app  with TypeScript template (you can use other templates or methods to start your project too): \n npx create-next-app@latest plugin-demo --typescript\ncd plugin-demo\nnpm run dev\n \n Step 2: Add TypeScript Support \n Create a type declaration file  plugin.d.ts  in your project's  /src/types  folder: \n declare global {\n  interface Window {\n    Jupiter: JupiterPlugin;\n  }\n};\nexport {};\n \n \n   \n    Full TypeScript Declaration\n   \n declare global {\n    interface Window {\n        Jupiter: JupiterPlugin;\n    }\n}\n\nexport type WidgetPosition = 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right';\nexport type WidgetSize = 'sm' | 'default';\nexport type SwapMode = \"ExactInOrOut\" | \"ExactIn\" | \"ExactOut\";\nexport type DEFAULT_EXPLORER = 'Solana Explorer' | 'Solscan' | 'Solana Beach' | 'SolanaFM';\n\nexport interface FormProps {\n    swapMode?: SwapMode;\n    initialAmount?: string;\n    initialInputMint?: string;\n    initialOutputMint?: string;\n    fixedAmount?: boolean;\n    fixedMint?: string;\n    referralAccount?: string;\n    referralFee?: number;\n}\n\nexport interface IInit {\n    localStoragePrefix?: string;\n    formProps?: FormProps;\n    defaultExplorer?: DEFAULT_EXPLORER;\n    autoConnect?: boolean;\n    displayMode?: 'modal' | 'integrated' | 'widget';\n    integratedTargetId?: string;\n    widgetStyle?: {\n        position?: WidgetPosition;\n        size?: WidgetSize;\n    };\n    containerStyles?: CSSProperties;\n    containerClassName?: string;\n    enableWalletPassthrough?: boolean;\n    passthroughWalletContextState?: WalletContextState;\n    onRequestConnectWallet?: () => void | Promise<void>;\n    onSwapError?: ({\n        error,\n        quoteResponseMeta,\n    }: {\n        error?: TransactionError;\n        quoteResponseMeta: QuoteResponse | null;\n    }) => void;\n    onSuccess?: ({\n        txid,\n        swapResult,\n        quoteResponseMeta,\n    }: {\n        txid: string;\n        swapResult: SwapResult;\n        quoteResponseMeta: QuoteResponse | null;\n    }) => void;\n    onFormUpdate?: (form: IForm) => void;\n    onScreenUpdate?: (screen: IScreen) => void;\n}\n\nexport interface JupiterPlugin {\n    _instance: JSX.Element | null;\n    init: (props: IInit) => void;\n    resume: () => void;\n    close: () => void;\n    root: Root | null;\n    enableWalletPassthrough: boolean;\n    onRequestConnectWallet: IInit['onRequestConnectWallet'];\n    store: ReturnType<typeof createStore>;\n    syncProps: (props: { passthroughWalletContextState?: IInit['passthroughWalletContextState'] }) => void;\n    onSwapError: IInit['onSwapError'];\n    onSuccess: IInit['onSuccess'];\n    onFormUpdate: IInit['onFormUpdate'];\n    onScreenUpdate: IInit['onScreenUpdate'];\n    localStoragePrefix: string;\n}\n\nexport { };\n \n \n Step 3: Embed the Plugin Script \n For Next.js applications, you can add the script in two ways: \n Using App Router (Next.js 13+) \n In your  app/layout.tsx : \n import Script from \"next/script\";\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Script\n          src=\"https://plugin.jup.ag/plugin-v1.js\"\n          strategy=\"beforeInteractive\"\n          data-preload\n          defer\n        />\n      </head>\n      <body>{children}</body>\n    </html>\n  );\n}\n \n Using Pages Router \n In your  pages/_app.tsx : \n import \"@/styles/globals.css\";\nimport type { AppProps } from \"next/app\";\nimport Script from \"next/script\";\n\nexport default function MyApp({ Component, pageProps }: AppProps) {\n  return (\n    <>\n      <Script\n        src=\"https://plugin.jup.ag/plugin-v1.js\"\n        strategy=\"beforeInteractive\"\n        data-preload\n        defer\n      />\n      <Component {...pageProps} />\n    </>\n  );\n}\n \n Step 4: Initialize Plugin \n There are two ways to initialize Jupiter Plugin in a Next.js application: \n Method 1: Using Window Object \n Create a new component for the plugin at  components/plugin.tsx : \n \"use client\";\n\nimport React, { useEffect } from \"react\";\n\nexport default function PluginComponent() {\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      window.Jupiter.init({\n        displayMode: \"widget\",\n        integratedTargetId: \"jupiter-plugin\",\n      });\n    }\n  }, []);\n\n  return (\n    <div>\n      <h1>Jupiter Plugin Demo</h1>\n      <div\n        id=\"jupiter-plugin\"\n      />\n    </div>\n  );\n}\n \n Method 2: Using @jup-ag/plugin Package \n :::warning\nDo note that using this method will require you to maintain its dependencies.\n::: \n \n Install the package: \n \n npm install @jup-ag/plugin\n \n \n Create a new component for the plugin at  components/plugin.tsx : \n \n \"use client\";\n\nimport React, { useEffect } from \"react\";\nimport \"@jup-ag/plugin/css\";\n\nexport default function PluginComponent() {\n  useEffect(() => {\n    import(\"@jup-ag/plugin\").then((mod) => {\n      const { init } = mod;\n      init({\n        displayMode: \"widget\",\n        integratedTargetId: \"jupiter-plugin\",\n      });\n    });\n  }, []);\n\n  return (\n    <div>\n      <h1>Jupiter Plugin Demo</h1>\n      <div id=\"jupiter-plugin\" />\n    </div>\n  );\n}\n \n Step 5: Add the Plugin Component to Your Page \n In your  app/page.tsx  (or  pages/index.tsx  if you're using Pages Router): \n import PluginComponent from '@/components/plugin';\n\nexport default function Home() {\n  return (\n    <div className=\"grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]\">\n      <PluginComponent />\n    </div>\n  );\n}\n \n There you have it! You've successfully integrated Jupiter Plugin into your Next.js application. \n \n Please test the swap functionality and check the transaction. \n If you require more customizations, check out the  Plugin Playground  or the  Customization  documentation. \n If you have any questions or issues, please refer to the  FAQ  or contact us on  Discord .",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/300-tool-kits/plugin/nextjs-app-example.md",
  "extracted_at": "2025-09-03T01:39:45.820520Z"
}
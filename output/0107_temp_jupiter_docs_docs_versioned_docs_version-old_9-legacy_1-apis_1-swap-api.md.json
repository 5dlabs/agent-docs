{
  "url": "file://temp_jupiter_docs/docs_versioned_docs/version-old/9-legacy/1-apis/1-swap-api.md",
  "content": "sidebar_label: \"Swap API\"\ndescription: \"Discover the vintage Jupiter V4 Swap API [Legacy]. Dive into functionalities and uses of this earlier version for developers interested in past crypto technologies.\"\ntitle: \"V4 Swap API\" \n\n     Jupiter V4 Swap API: Exploring Legacy Crypto Technology \n     \n\n :::tip\nWe recommend checking out our v6 API for more reliability, performance and better pricing.\n::: \n We offer an API and an SDK, but, we recommend that integrators use our API. The API offers several benefits: \n \n Language/platform agnostic. \n Avoids NPM SDK dependency issues. Different dependencies will require different versions of the same library making integrating/upgrading more difficult. \n The SDK has a heavy initialization and computation load that is tricky to optimize on mobile or compute-limited devices. \n Offload heavy RPC dependency to the API. \n \n Using the API \n Jupiter API is the easiest way for developers to access liquidity on Solana. Simply pass in the desired pairs, amount, and slippage, and the API will return the serialized transactions needed to execute the swap, which can then be passed into the Solana blockchain with the required signatures. \n Try it out! \n # Copy and paste this into your terminal!\ncurl -s 'https://quote-api.jup.ag/v4/quote?inputMint=So11111111111111111111111111111111111111112&outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v&amount=10000&slippageBps=1' | jq '.data | .[0] | .outAmount'\n \n V4 API Reference \n :::tip V4 uses Versioned Transactions and Address Lookup Tables\nAll Jupiter swaps are now only a single transaction. Not all wallets support Versioned Transactions yet, so if you detect a wallet that does not support versioned transactions you may request a legacy transaction instead from the API.\n::: \n :::info API Documentation\n Swagger \n::: \n Guide \n 1. Install the libraries \n To run this example requires a minimum of  NodeJS 16 . In your command line terminal, install the libraries. \n npm i @solana/web3.js@1\nnpm i cross-fetch\nnpm i bs58\n \n 2. Import from libraries and setup connection \n Next you can copy the following code snippets to a javascript file jupiter-api-example.js. And when you are ready to run the code, just type:  node jupiter-api-example.js \n import { Connection, Keypair, VersionedTransaction } from '@solana/web3.js';\nimport fetch from 'cross-fetch';\nimport bs58 from 'bs58';\n\n// It is recommended that you use your own RPC endpoint.\n// This RPC endpoint is only for demonstration purposes so that this example will run.\nconst connection = new Connection('https://neat-hidden-sanctuary.solana-mainnet.discover.quiknode.pro/2af5315d336f9ae920028bbb90a73b724dc1bbed/');\n \n :::tip\nAlways make sure that you are using your own RPC endpoint. The RPC endpoint used by the connection object in the above example may not work anymore.\n::: \n 3. Setup your wallet \n In this example, you can paste in your private key for testing purposes but this is not recommended for production applications. \n const keypair = Keypair.fromSecretKey(bs58.decode(process.env.PRIVATE_KEY || ''));\n \n 4. Retrieve the route map \n You can retrieve the route map to find out what tokens are listed on Jupiter and what swaps are possible with a particular token. The route map only returns the token mint addresses and not the token metadata. \n // retrieve indexed routed map\nconst indexedRouteMap = await (await fetch('https://quote-api.jup.ag/v4/indexed-route-map')).json();\nconst getMint = (index) => indexedRouteMap[\"mintKeys\"][index];\nconst getIndex = (mint) => indexedRouteMap[\"mintKeys\"].indexOf(mint);\n\n// generate route map by replacing indexes with mint addresses\nvar generatedRouteMap = {};\nObject.keys(indexedRouteMap['indexedRouteMap']).forEach((key, index) => {\n  generatedRouteMap[getMint(key)] = indexedRouteMap[\"indexedRouteMap\"][key].map((index) => getMint(index))\n});\n\n// list all possible input tokens by mint Address\nconst allInputMints = Object.keys(generatedRouteMap);\n\n// list tokens can swap by mint address for SOL\nconst swappableOutputForSol = generatedRouteMap['So11111111111111111111111111111111111111112'];\n// console.log({ allInputMints, swappableOutputForSol })\n \n \n   \n     \n       GET \n       https://quote-api.jup.ag/v4/indexed-route-map \n     \n   \n Retrieve an indexed route map for the possible token pairs you can swap between. \n See Swagger for more details: https://quote-api.jup.ag/v4/docs/oldstatic/index.html \n   \n \n{`\n  .api-method-box {\n    border-radius: 8px;\n    margin: 16px 0;\n    display: inline;\n    padding: 4px;\n    font-weight: 700;\n    margin-right: 8px;\n    font-size: 12px;\n    color: white\n  }\n\n  .get {\n    border: 1px solid #1976F2;\n    background-color: #1976F2 !important;\n  }\n\n  .post {\n    border: 1px solid #018847;\n    background-color: #018847 !important;\n  }\n\n  .api-method-path {\n    font-size: 14px;\n    display: inline;\n  }\n`} \n 5. Get the routes for a swap \n In this example, we try swapping SOL to USDC. \n // swapping SOL to USDC with input 0.1 SOL and 0.5% slippage\nconst { data } = await (\n  await fetch('https://quote-api.jup.ag/v4/quote?inputMint=So11111111111111111111111111111111111111112\\\n&outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\\\n&amount=100000000\\\n&slippageBps=50'\n  )\n).json();\nconst routes = data;\n// console.log(routes)\n \n \n   \n     \n       GET \n       https://quote-api.jup.ag/v4/quote \n     \n   \n Get the top 3 swap routes for a token trade pair sorted by largest output token amount \n See Swagger for more details: https://quote-api.jup.ag/v4/docs/oldstatic/index.html \n Request Parameters \n Parameter Type Required Description \n inputMint Yes input token mint address \n outputMint Yes \n amount Integer Yes The API takes in  amount   in integer and you have to factor in the decimals for each token by looking up the decimals for that token. For example, USDC has 6 decimals and 1 USDC is 1000000 in integer when passing it in into the API. \n swapMode No ( ExactIn  or  ExactOut )  Defaults to  ExactIn .   ExactOut  is for supporting use cases where you need an exact token amount, like payments. In this case the slippage is on the input token \n slippageBps Integer No The slippage % in BPS.  If the output token amount exceeds the slippage then the swap transaction will halt. \n feeBps Integer No If you want to charge the user a fee, you can specify the fee in BPS.  Fee % is taken out of the output token. \n onlyDirectRoutes Integer No Default is false.  Direct Routes limits Jupiter routing to single hop routes only. \n userPublicKey No Public key of the user (only pass in if you want deposit and fee being returned, might slow down query) \n asLegacyTransaction Boolean No Only return routes that can be done in a single legacy transaction. (Routes might be limited) \n \n   \n :::tip Platform Fee\nIf you'd like to charge a fee, pass in feeBps as a parameter in the quote.\n::: \n :::tip Amount\nThe API takes in amount in integer and you have to factor in the decimals for each token by looking up the decimals for that token. For example, USDC has 6 decimals and 1 USDC is 1000000 in integer when passing it in into the API.\n::: \n 6. Get the serialized transactions to perform the swap \n // get serialized transactions for the swap\nconst transactions = await (\n  await fetch('https://quote-api.jup.ag/v4/swap', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      // route from /quote api\n      route: routes[0],\n      // user public key to be used for the swap\n      userPublicKey: keypair.publicKey.toString(),\n      // auto wrap and unwrap SOL. default is true\n      wrapUnwrapSOL: true,\n      // feeAccount is optional. Use if you want to charge a fee.  feeBps must have been passed in /quote API.\n      // This is the ATA account for the output token where the fee will be sent to. If you are swapping from SOL->USDC then this would be the USDC ATA you want to collect the fee.\n      // feeAccount: \"fee_account_public_key\"\n    })\n  })\n).json();\n\nconst { swapTransaction } = transactions;\n \n \n   \n     \n       POST \n       https://quote-api.jup.ag/v4/swap \n     \n   \n Get the serialized swap transactions for the swap route provided. \n See Swagger for more details: https://quote-api.jup.ag/v4/docs/oldstatic/index.html \n Request Parameters \n Parameter Type Required Description \n route Route Yes Route object returned from Quote API. See Swaggar for definition \n userPublicKey Yes public key of the user \n wrapUnwrapSOL Boolean No if true, will automatically wrap/unwrap SOL.  If false it will use wSOL token account. Defaults to true. \n feeAccount No The fee token account for the output token (only pass in if you set a feeBps) \n asLegacyTransaction Boolean No Request a legacy transaction rather than the default versioned transaction, needs to be paired with a quote using   asLegacyTransaction   otherwise the transaction might be too large \n destinationWallet No Public key of the wallet that will receive the output of the swap. This assumes the associated token account exists, and currently adds a token transfer instruction. \n \n   \n 7. Deserialize and sign the transaction \n // deserialize the transaction\nconst swapTransactionBuf = Buffer.from(swapTransaction, 'base64');\nvar transaction = VersionedTransaction.deserialize(swapTransactionBuf);\nconsole.log(transaction);\n\n// sign the transaction\ntransaction.sign([keypair]);\n \n 8. Execute the transaction \n // Execute the transaction\nconst rawTransaction = transaction.serialize()\nconst txid = await connection.sendRawTransaction(rawTransaction, {\n  skipPreflight: true,\n  maxRetries: 2\n});\nawait connection.confirmTransaction(txid);\nconsole.log(`https://solscan.io/tx/${txid}`);\n \n Arbitrage Bot Using the API \n Use the API to build your own arbitrage bot. \n Jupiter API Arbitrage Example checks whether there is an opportunity for USDC => SOL and SOL => USDC, it submits two transactions that do not always promise profit and might incur losses, use it at your own risk. \n API Arbs Example (Using V1 API) \n Clone, Build and Run \n First, fetch the latest version of the example code: \n $ git clone https://github.com/jup-ag/api-arbs-example.git\n$ cd api-arbs-example\n \n Next, follow the steps in the git repository's  README .",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs_versioned_docs/version-old/9-legacy/1-apis/1-swap-api.md",
  "extracted_at": "2025-09-03T01:39:45.868872Z"
}
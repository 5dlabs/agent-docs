{
  "url": "file://temp_jupiter_docs/docs/999-studio-api/2-claim-fee.md",
  "content": "sidebar_label: 'Claim Fee (Beta)'\ndescription: 'Claim creator trading fees via Jupiter Studio API.'\ntitle: 'Claim Fee (Beta)' \n\n     Claim Fee (Beta) \n     \n\n :::note \n \n Lite URL:  https://lite-api.jup.ag/studio/v1 : 100 requests per 5 minutes \n Pro URL:  https://api.jup.ag/studio/v1 : 10 requests per 10 seconds (for all Tiers) \n \n To upgrade to Pro or understand our rate limiting, please refer to this section. \n \n API Key Setup \n API Rate Limit \n::: \n \n :::tip API Reference\nTo fully utilize the Studio API, check out the  Studio API Reference .\n::: \n Prerequisite \n \n     \n         \n             \n                 Dependencies \n             \n         \n     \n npm install @solana/web3.js@1 # Using v1 of web3.js instead of v2\nnpm install dotenv # If required for wallet setup\n \n \n \n     \n         \n             \n                 RPC \n             \n         \n     \n Set up RPC \n :::note\nSolana provides a  default RPC endpoint . However, as your application grows, we recommend you to always use your own or provision a 3rd party providerâ€™s RPC endpoint such as  Helius  or  Triton .\n::: \n import { Connection } from '@solana/web3.js';\nconst connection = new Connection('https://api.mainnet-beta.solana.com');\n \n \n \n     \n         \n             \n                 Wallet \n             \n         \n     \n Set up Development Wallet \n :::note \n \n You can paste in your private key for testing purposes but this is not recommended for production applications. \n If you want to store your private key in the project directly, you can do it via a  .env  file.\n::: \n \n To set up a development wallet via  .env  file, you can use the following script. \n // index.js\nimport { Keypair } from '@solana/web3.js';\nimport dotenv from 'dotenv';\nrequire('dotenv').config();\n\nconst wallet = Keypair.fromSecretKey(bs58.decode(process.env.PRIVATE_KEY || ''));\n \n # .env\nPRIVATE_KEY=''\n \n To set up a development wallet via a wallet generated via  Solana CLI , you can use the following script. \n import { Keypair } from '@solana/web3.js';\nimport fs from 'fs';\n\nconst privateKeyArray = JSON.parse(fs.readFileSync('/Path/To/.config/solana/id.json', 'utf8').trim());\nconst wallet = Keypair.fromSecretKey(new Uint8Array(privateKeyArray));\n \n \n \n     \n         \n             \n                 Transaction Sending Example \n             \n         \n     \n transaction.sign([wallet]);\nconst transactionBinary = transaction.serialize();\nconsole.log(transactionBinary);\nconsole.log(transactionBinary.length);\nconst blockhashInfo = await connection.getLatestBlockhashAndContext({ commitment: 'finalized' });\n\nconst signature = await connection.sendRawTransaction(transactionBinary, {\n  maxRetries: 0,\n  skipPreflight: true,\n});\n\nconsole.log(`Transaction sent: https://solscan.io/tx/${signature}`);\n  \ntry {\n  const confirmation = await connection.confirmTransaction({\n    signature,\n    blockhash: blockhashInfo.value.blockhash,\n    lastValidBlockHeight: blockhashInfo.value.lastValidBlockHeight,\n  }, 'confirmed');\n\n  if (confirmation.value.err) {\n    console.error(`Transaction failed: ${JSON.stringify(confirmation.value.err)}`);\n    console.log(`Examine the failed transaction: https://solscan.io/tx/${signature}`);\n  } else {\n    console.log(`Transaction successful: https://solscan.io/tx/${signature}`);\n  }\n} catch (error) {\n  console.error(`Error confirming transaction: ${error}`);\n  console.log(`Examine the transaction status: https://solscan.io/tx/${signature}`);\n};\n \n \n Pool Address \n Your successfully created token via Jupiter Studio, should have a newly generated token mint. By using the mint, you can get the config key and pool addresses associated to it: Dynamic Bonding Curve pool and Meteora DAMM V2 pool. \n const poolAddressResponse = await (\n    await fetch(\n      `https://lite-api.jup.ag/studio/v1/dbc-pool/addresses/${mint}`,\n    )\n).json();\n \n Fee \n Using the Pool Address, you will be able to get the total and current unclaimed fees in the Dynamic Bonding Curve pool. \n const feeResponse = await (\n    await fetch (\n      'https://lite-api.jup.ag/studio/v1/dbc/fee', \n      {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            poolAddress: poolAddressResponse.data.dbcPoolAddress,\n        }, null, 2)\n    })\n).json();\n \n Claim Fee \n In order to claim fees from a Dynamic Bonding Curve pool, you will need to pass in the pool address into this endpoint and we will create the Claim Fee transaction for you. After receiving the transaction, you will need to sign and submit the transaction to the network on your own ( refer to Transaction Sending Example above ). \n const claimTransaction = await (\n    await fetch (\n      'https://lite-api.jup.ag/studio/v1/dbc/fee/create-tx', \n      {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            ownerWallet: wallet.publicKey.toBase58(),\n            poolAddress: poolAddressResponse.data.dbcPoolAddress,\n            maxQuoteAmount: 1000000, // e.g. 1 USDC (depending on quote mint and decimals)\n        }, null, 2)\n    })\n).json();",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/999-studio-api/2-claim-fee.md",
  "extracted_at": "2025-09-03T01:39:45.718254Z"
}
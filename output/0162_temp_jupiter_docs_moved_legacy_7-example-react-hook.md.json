{
  "url": "file://temp_jupiter_docs/Moved/legacy/7-example-react-hook.md",
  "content": "sidebar_label: \"Example: React Hook\"\ndescription: Integrate Jupiter into your React App. \n Integrate Jupiter into your React App \n Use the React-Hook if you'd like to embed Jupiter into your own React UI. \n Pre-requisites \n Setup your  Wallet Adapter  for your frontend application. \n Installation \n Open your terminal, navigate to your project directory, and run the command below. \n npm i @jup-ag/core @jup-ag/react-hook jsbi\n \n Meanwhile, our published package can be found here  NPM . \n Usage \n import { TOKEN_LIST_URL } from \"@jup-ag/core\";\nimport { JupiterProvider, useJupiter } from \"@jup-ag/react-hook\";\n \n Create a React component \n React \n import React, { useEffect, useState } from \"react\";\n\nconst JupiterApp = () => {\n  return (\n    <>\n      <div style={{ fontWeight: '600', fontSize: 16, marginTop: 24 }}>\n        Hook example\n      </div>\n      <div>Number of tokens:</Text>\n      <div>Number of input tokens</Text>\n      <div>Possible number of routes:</Text>\n      <div>\n        Best quote:\n      </div>\n    </>\n  )\n}\n\nexport default JupiterApp;\n \n React Native \n import React, { useEffect, useState } from \"react\";\nimport { Text } from \"react-native\";\n\nconst JupiterApp = () => {\n  return (\n    <>\n      <Text style={{ fontWeight: '600', fontSize: 16, marginTop: 24 }}>\n        Hook example\n      </Text>\n      <Text>Number of tokens:</Text>\n      <Text>Number of input tokens</Text>\n      <Text>Possible number of routes:</Text>\n      <Text>\n        Best quote:\n      </Text>\n    </>\n  )\n}\nexport default JupiterApp;\n \n Fetch the list of tokens \n \n Declare the interface. \n \n export interface Token {\n  chainId: number; // 101,\n  address: string; // 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n  symbol: string; // 'USDC',\n  name: string; // 'Wrapped USDC',\n  decimals: number; // 6,\n  logoURI: string; // 'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW/logo.png',\n  tags: string[]; // [ 'stablecoin' ]\n}\n \n \n Fetch token list from Jupiter API. \n \n import { TOKEN_LIST_URL } from \"@jup-ag/core\";\n\nconst JupiterApp = () => {\n  const [tokens, setTokens] = useState<Token[]>([])\n  useEffect(() => {\n    // Fetch token list from Jupiter API\n    fetch(TOKEN_LIST_URL[ENV])\n      .then(response => response.json())\n      .then(result => setTokens(result))\n  }, [])\n  // ...\n}\n\nexport default JupiterApp;\n \n \n Then, it's time to look for which token you would like to swap, from the  tokens  array.  In this case, we will swap from  USDC  to  USDT . \n \n import { TOKEN_LIST_URL } from \"@jup-ag/core\";\n\nconst JupiterApp = () => {\n  const [tokens, setTokens] = useState<Token[]>([])\n  console.log(tokens) // Look for tokens\n\n  const [inputMint] = useState<PublicKey>(new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"))\n  const [outputMint] = useState<PublicKey>(new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"))\n  // ...\n}\n \n Attach useJupiter hooks \n import { TOKEN_LIST_URL } from \"@jup-ag/core\";\n\nconst JupiterApp = () => {\n  const [tokens, setTokens] = useState<Token[]>([])\n  const [inputMint] = useState<PublicKey>(new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"))\n  const [outputMint] = useState<PublicKey>(new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"))\n\n  useEffect(() => {\n      // Fetch token list from Jupiter API\n      fetch(TOKEN_LIST_URL[ENV])\n        .then(response => response.json())\n        .then(result => setTokens(result))\n    }, [])\n\n  // Attach Jupiter hook\n  const jupiter = useJupiter({\n    amount: JSBI.BigInt(1 * (10 ** 6)), // raw input amount of tokens\n    inputMint,\n    outputMint,\n    slippage: 1, // 1% slippage\n    debounceTime: 250, // debounce ms time before refresh\n  })\n\n  // ...\n}\n\nexport default JupiterApp;\n \n :::info How do you calculate the amount to pass in?\nEvery token have their own decimals place, in our example, both USDC and USDT pairs have their decimals place at  6 .\nAssuming in the UI, user entered a value of  1 USDC , we can derive the amount to pass into Jupiter to be  1  multiplied by ( 10  exponent of  6 ) \n const inputAmount = 1; // UI input\nconst inputTokenInfo = tokens.find(item => item.address === \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\") // Token info\nconst amount = JSBI.BigInt(inputAmount * (10 ** inputTokenInfo.decimals)) // Amount to send to Jupiter\n \n ::: \n Display the result \n Tab \n Performing a swap \n Once you have acquired all the meaningful information from the Jupiter instance, it is time we perform a swap with the exchange() function. \n :::warning\nYou would need a  wallet  and  connection  instance to perform a swap, the easiest way to interface with your wallet (Phantom, Sollet, Solflare...) would be the use of  @solana/wallet-adapter-react library , visit the  documentation  for more info.\n::: \n Tab \n :::info For advanced developers, custom wallet instance can be used as long as it fulfils the interface requirement of: \n SignerWalletAdapter from '@solana/wallet-adapter-base/lib/signer.d.ts'\n \n Alternatively, \n interface CustomWallet {\n    publicKey: PublicKey\n    sendTransaction(transaction: Transaction, connection: Connection, options?: SendTransactionOptions): Promise<TransactionSignature>;\n    signTransaction(transaction: Transaction): Promise<Transaction>;\n    signAllTransactions(transaction: Transaction[]): Promise<Transaction[]>;\n}\n \n ::: \n Example \n If you need more help, pay a visit to  Example (React, Next.js)  or, just fork and start there.",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/Moved/legacy/7-example-react-hook.md",
  "extracted_at": "2025-09-03T01:39:45.945824Z"
}
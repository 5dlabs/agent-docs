{
  "url": "file://temp_jupiter_docs/guides/8-perpetual-exchange/2-how-it-works.md",
  "content": "title: \"How Perps Trading Works\"\nsidebar_label: \"How It Works\"\ndescription: Explore how Jupiter Perps enables leveraged trading with a LP-based model and integration with Pyth oracles for accuracy. \n\n     Understanding How Jupiter Perps Works: Complete Guide \n     \n\n Jupiter Perps is a  LP-based perpetual exchange  based on oracle prices. \n Our pool consists of 5 tokens,  SOL ,  ETH ,  WBTC ,  USDC , and  USDT . Users acquire JLP by swapping on  Jupiter Swap . Jupiter Swap automatically finds the cheapest way of acquiring JLP, by swapping to the desired asset and depositing that, or purchasing off the market. \n Traders open leveraged positions by putting up collateral and borrowing\nthe rest of the position from the pool. \n Position Management \n Longs \n Traders can open long positions or increase the size for existing positions for SOL, ETH, and wBTC with up to 100x leverage based on the initial margin (collateral). \n Collateral Management \n Traders can deposit or withdraw collateral from the position to manage the position's margin. \n \n When traders deposit collateral, the liquidation price and leverage for the long position decreases as the maintenance margin increases. \n When traders withdraw collateral, the liquidation price and leverage for the long position increases as the maintenance margin decreases. \n \n Underlying Collateral \n The underlying collateral for a long position is the token for the open position, as shown below: \n Position Collateral \n Long SOL SOL \n Long wETH wETH \n Long wBTC wBTC \n \n Profits and collateral withdrawals are disbursed to traders in the token that is being longed.  \n For example, a trader with a profit long SOL position will receive SOL when they close the position. \n Shorts \n Traders can open short positions or decrease the size for existing positions for SOL, ETH, and wBTC with up to 100x leverage based on the initial margin (collateral). \n Collateral Management \n Traders can deposit or withdraw collateral from the position to manage the position's margin. \n \n When traders deposit collateral, the liquidation price and leverage for the short position increases as the maintenance margin increases.  \n When traders withdraw collateral, the liquidation price and leverage for the short position decreases as the maintenance margin decreases. \n \n Underlying Collateral \n The underlying collateral for a short position is either one of the USDC or USDT stablecoin, depending on the stablecoins'  utilization rates  at the time when the position is opened: \n Position Collateral \n Short SOL USDC / USDT \n Short wETH USDC / USDT \n Short wBTC USDC / USDT \n \n Profits and collateral withdrawals are paid out to traders in the stablecoin used as the underlying collateral for the position. \n For example, a trader with a profitable short SOL position with USDC as the underlying collateral will receive USDC when they close the position or withdraw collateral. \n Limit Orders \n Limit Orders operate independently from your existing positions. \n \n They remain active until either triggered at your specified price unless manually cancelled. \n If triggered, they will either:\n \n Open a new position if you have no existing position. \n Increase and combine with your existing position in that market. \n \n \n They stay active even if you close or get liquidated on an existing position. \n \n :::warning Placing LO near Liquidation Price\nJupiter Perps does not enforce First-in, First-out (FIFO), meaning execution order is not strictly based on price priority. Instead, it depends on which transaction - your Limit Order (LO) or the liquidation transaction - gets processed first. \n If you create a Limit Order at a price near your liquidation level, expecting it to save your existing position, the outcome is uncertain: \n \n If the Limit Order executes first = the position may be saved from liquidation \n If the Liquidation executes first = the existing position will be liquidated, but the Limit Order will remain active, potentially opening a new position immediately.\n::: \n \n :::warning Liquidation Price on Order Form\nThe liquidation price on the order form for a Limit Order will be the  simulated liquidation price  based on the position requested at the time when you fill in the order form. \n \n If you have an existing position = liquidation price includes existing position + current requested order \n If you have no existing position = liquidation price based on current requested order \n \n However, the liquidation price on the order form does not represent the liquidation price when the limit order is triggered and the position is opened. \n::: \n :::info Limitation on Limit Orders \n \n The Perps V2 Beta does not support multiple limit orders  on the same pair and side , please cancel the existing limit order before creating a new one. \n When the selected market's utilisation is above 80%, new limit orders cannot be created.\n::: \n \n Limit Price \n When creating a Limit Order, you can set your desired entry price either above or below the current market price. \n Position Type Limit Price Rules Example \n Long Max: 1% less than market Min: 50% of market price Market: 100 Max: 98 Min: 50 \n Short Max: 1% more than market Min: 200% of market price Market: 100 Max: 102 Min: 200 \n \n Take-Profit / Stop-Loss Orders \n An active Associate Token Account (ATA) is needed for TP/SL to be triggered and executed: \n \n ETH ATA for ETH-Long \n wBTC ATA for wBTC-Long \n USDC or USDT ATA for ALL Short positions \n \n An ATA will be automatically created for you when you create a TP/SL. \n Please note that the TP/SL will not be triggered if you close the respective ATA needed. \n In the event of  manually closing a position , the associated trigger orders will be automatically canceled and closed, providing a seamless experience when opening new future positions. \n :::info\nWhile  TP/SL  orders are set, keepers will monitor the mark price, when reaching the specified price level, TP/SL will close the whole position. More info on keepers  here .\n::: \n PnL \n Profit and loss calculations directly corresponds to the size of your  position . Here are two examples to illustrate this: \n \n Long position example:\n \n Position: 1,000 USD long on SOL \n If SOL price increases by 10%: You profit 100 USD \n If SOL price decreases by 10%: You lose 100 USD \n \n \n Short position example:\n \n Position: 1,000 USD short on SOL \n If SOL price decreases by 10%: You profit 100 USD \n If SOL price increases by 10%: You lose 100 USD \n \n \n \n In both cases, the profit or loss is 10% of the  position size , matching the percentage change in SOL's price. \n Calculating realized and unrealized PnL \n // 1) Get the current token price / exit price\n\nexitPrice = currentTokenPrice\n\n// 2) Determine if the position is profitable by checking if the exit price is greater than the position's\n// average price for longs, or if the exit price is less than the position's average price for shorts\n\nIF isLong THEN\n    inProfit = exitPrice > positionAvgPrice\nELSE\n    inProfit = exitPrice < positionAvgPrice\n\n// 3) Calculate the absolute delta between the exit price and the position's average price\n\npriceDelta = |exitPrice - positionAvgPrice|\n\n// 4) Calculate the PnL delta for the closed portion of the position: multiply the size being closed (`tradeSizeUsd`) \n// by the price delta, then divide by the entry price to get the PnL delta\n\npnlDelta = (tradeSizeUsd * priceDelta) / positionAvgPrice\n\n// 5) Calculate the final unrealized PnL depending on whether the position is profitable or not\n\nIF inProfit THEN\n    unrealizedPnl = pnlDelta\nELSE\n    unrealizedPnl = -pnlDelta\n\n// 6) Deduct the outstanding fees from the unrealized PnL to get the final realized PnL\n// Read the `Fee` section below to understand how the fee calculations work\nrealizedPnl = unrealizedPnl - (closeBaseFee + priceImpactFee + borrowFee)\n \n :::info\nThis  code snippet  shows an example of calculating a position's PNL programmatically.\n::: \n :::info\n Read the Jupiter Perpetuals fee breakdown here  for more info on open / close fees, price impact fees, and borrow fees.\n::: \n Managing Leverage \n Leverage \n To allow for leverage, traders borrow assets from the pool to create a larger position. To create a 2x long position SOL-USD, the other 1x SOL will be borrowed from the pool. \n This borrow leads to an  hourly borrow rate  to be paid to the pool. Positions always pay  borrow fees  and are never paid funding. \n This means actual leverage for a position will be slightly lower as the calculation takes into account all fees associated with maintaining the position. \n Auto Closing Positions that Exceed Maximum Leverage \n The maximum allowed leverage is 500x. \n Positions will be liquidated if the trader's collateral, after subtracting fees, adding unrealized profits and subtracting unrealized losses, is less than 0.2% of the position size. \n :::info\nWhen reducing the size of a position, the collateral amount is reduced as well to maintain the leverage for the position. For example, if a position has a 10x leverage, and reduces its size by 50%, the same amount of collateral will be withdrew from the position to maintain the 10x leverage.\n::: \n Liquidation \n The liquidation price for open positions represent the price at which the position will be automatically closed by the system to prevent further losses. \n \n For long positions:\n \n Liquidation occurs when the current token price falls below the liquidation price \n Example: If the liquidation price is $90, the long position will be closed if the token's price drops to $90 or lower. \n \n \n For short positions:\n \n Liquidation occurs when the current token price rises above the liquidation price \n Example: If the liquidation price is $110, the short position will be closed if the token price rises to $110 or higher. \n \n \n \n The liquidation price can be calculated with the following formulas. \n \n \n price : The average price (USD) of the position \n collateral_size : The collateral size (USD) for the position \n close_fee : The fee (USD) charged for closing the position \n borrow_fee : The accumulated borrowing fees (USD) for maintaining a leveraged position \n size : The size (USD) of the position \n max_lev : The maximum allowed leverage ( 500x  is the maximum allowed leverage in the Jupiter Perpetuals exchange for now) \n \n \n For long positions: \n \n For short positions: \n \n :::info\nIt's crucial to note that the liquidation price is subject to change over time, particularly with leverage exceeding 10x and the accumulation of borrow fees over extended position durations. Regularly monitoring your liquidation price is essential. \n To mitigate the risk of liquidation, collateral adjustments and leverage fine-tuning can be performed through the  Edit  button in the position row, offering an avenue to add collateral and enhance the liquidation price.\n::: \n Fees \n There are 4 types of fees on Jupiter Perpetual: \n \n A flat 0.06% (6bps) base fee, applied on notional position size. \n A price impact fee, simulating the orderbook impact given notional size. \n Borrow fee, paid hourly on open positions, based on notional size. \n Transaction & Priority fee to create trade requests. \n \n Base Fee \n A flat rate of  0.06%  of the position amount is charged when opening or closing a position. This base fee is also charged when a position is closed partially. \n To calculate the base open or close for a trade: \n BPS_POWER = 10^4      // 10_000\n\n// 1. Get the base fee (BPS) from the JLP pool account's `fees.increasePositionBps` for open position requests\n// or `fees.decreasePositionBps` for close position requests\n// https://station.jup.ag/guides/perpetual-exchange/onchain-accounts#pool-account\n   baseFeeBps = pool.fees.increasePositionBps\n\n// 2. Convert `baseFeeBps` to decimals\n   baseFeeBpsDecimals = baseFeeBps / BPS_POWER\n\n// 3. Calculate the final open / close fee in USD by multiplying `baseFeeBpsDecimals` against the trade size\n   openCloseFeeUsd = tradeSizeUsd * baseFeeBpsDecimals\n \n :::info\nThis  code snippet  contains an example on calculating open and close base fees programmatically.\n::: \n Price Impact Fee \n Large trades on the Jupiter Perpetuals exchange inherently  incur no price impact  since token prices are sourced from price oracles. While this is favourable for traders, it poses risks to the Jupiter Liquidity Pool (JLP): \n \n Large, profitable trades can negatively impact the liquidity pool's reserves. \n The platform becomes vulnerable to order manipulation. \n \n To address these risks, Jupiter Perpetuals implements a price impact fee. This fee is designed to simulate trading conditions in traditional exchanges, where larger orders typically experience more price slippage due to limited liquidity at each price level. \n \n Benefits of the price impact fee: \n \n Trader incentives:\n \n Encourages traders to consider trade size when placing orders. \n Larger trades incur higher price impact fees. \n Splitting orders exposes traders to potential price changes between oracle updates. \n \n \n Fair compensation for JLP holders:\n \n The liquidity pool receives reasonable trading fees regardless of whether traders open large trades or split them up. \n \n \n Market integrity:\n \n The fee structure mimics traditional order book dynamics, helping to prevent price manipulation. \n \n \n \n This tiered fee structure ensures that costs are more proportional to the potential market impact of each trade, creating a fairer trading environment for both traders and liquidity providers. \n To calculate the price impact fee for an open or close trade: \n USDC_DECIMALS = 10^6  // 1_000_000\nBPS_POWER = 10^4      // 10_000\n\nCalculate Price Impact Fee:\n\n// 1. Get the trade impact fee scalar from the custody account's `pricing.tradeImpactFeeScalar` constant\n// https://station.jup.ag/guides/perpetual-exchange/onchain-accounts#custody-account\n   tradeImpactFeeScalar = custody.pricing.tradeImpactFeeScalar\n\n// 2. Convert trade size to USDC decimal format\n   tradeSizeUsd = tradeSizeUsd * USDC_DECIMALS\n\n// 3. Scale to BPS format for fee calculation\n   tradeSizeUsdBps = tradeSizeUsd * BPS_POWER\n\n// 4. Calculate price impact fee percentage in BPS\n   priceImpactFeeBps = tradeSizeUsdBps / tradeImpactFeeScalar\n\n// 5. Calculate final price impact fee in USD\n   priceImpactFeeUsd = (tradeSizeUsd * priceImpactFeeBps / BPS_POWER) / USDC_DECIMALS\n \n :::info\nThis  code snippet  contains an example on calculating price impact fees programmatically.\n::: \n :::info\nJupiter works with experts like  Gauntlet  to optimize the price impact fee and analyze its impact on the exchange. Consult  Gauntlet's proposal and analysis on the price impact fee here  for additional information on calculating the price impact fee and other useful information.\n::: \n Borrow Fee \n On the Jupiter Perpetuals exchange, traders can open leveraged positions by borrowing assets from the liquidity pool. \n Borrow fees serve two main purposes: \n \n To compensate liquidity providers for the use of their assets. \n To manage the risk associated with leveraged trading. \n \n Unlike other perpetuals exchanges, the Jupiter Perpetuals exchange does not charge funding rates for open positions. Instead, traders pay borrow fees that compound hourly based on the borrowed amount for the leveraged position. \n The borrow fees are reinvested back into the JLP pool to increase the pool's yield and available liquidity. It also acts as an incentive for the token mark price to align with it's market spot price. \n Jupiter's hourly borrow fee is calculated using a dual slope model that adjusts based on the custody's utilization rates. For each custody, the model defines a target utilization level. When utilization is below the target level, the borrow rate is lower which incentivizes traders to borrow from the pool, thus increasing utilization and yield for the JLP. \n Once utilization exceeds the target level, the borrow rate increases aggressively. This higher rate serves two purposes: it incentivizes additional liquidity providers to enter the market, and it drives traders to reduce their positions as the higher borrowing costs outweigh potential returns. This dynamic approach ensures efficient liquidity allocation while preventing excessive leverage and overutilization of the JLP's assets. \n \n Calculating Borrow Rate \n The dual slope model uses four parameters to calculate the borrow rate: \n \n Minimum rate : The lowest borrow rate, applied at 0% utilization \n Maximum rate : The highest borrow rate, applied at 100% utilization \n Target rate : The borrow rate when utilization reaches its target level \n Target utilization : The optimal utilization level for the custody \n \n :::info\nJupiter works with partners like Chaos Labs and Gauntlet to set and optimize the parameters above. The parameters may be adjusted over time as market conditions change.\n::: \n :::info\nThe parameters above can be fetched onchain from the  min_rate_bps ,  max_rate_bps ,  target_rate_bps , and  target_utilization_rate  fields via the  custody account's  jump_rate_state  field . \n The following research posts dive deeper into the methodology and technical details of the dual slope borrow rate model: \n \n https://www.jupresear.ch/t/gauntlet-dual-slope-borrowing-rate-model-implementation-and-recommendations-12-19-24/29072 \n https://www.jupresear.ch/t/chaos-labs-borrowing-rate-jump-rate-model-recommendations/29203\n::: \n \n The borrow rate calculation depends on the current utilization level: \n # First, calculate the slopes for both curves\nlower_slope = (target_rate - minimum_rate) / target_utilization\nupper_slope = (maximum_rate - target_rate) / (1 - target_utilization)\n\n# Calculate the borrow rate based on current utilization\nif utilization < target_utilization:\n    # Below target utilization: Use gentler slope starting from minimum_rate\n    borrow_rate = minimum_rate + (lower_slope * utilization)\nelse:\n    # Above target utilization: Use steeper slope starting from target_rate\n    borrow_rate = target_rate + (upper_slope * (utilization - target_utilization))\n \n :::info\nThe borrow rate is calculated above is expressed as the annual rate (APR). To get the hourly borrow rate, divide the APR by 8,760 hours.\n::: \n Calculating Utilization Rate \n To determine the current utilization rate, access the asset's on-chain account ( as shown here ) and apply the following calculation: \n // Calculate utilization percentage\nif (custody.assets.owned > 0 AND custody.assets.locked > 0) then\n    utilizationPct = custody.assets.locked / custody.assets.owned\nelse\n    utilizationPct = 0\n \n Worked Example \n Assume the borrow rate parameters are as below: \n \n Minimum Rate : 10% \n Max Rate : 230% \n Target Rate : 60% \n Target Utilization : 80% \n \n Based on the formula above, we can obtain the upper slope and lower slope values for the dual slope borrow rate curve: \n \n Lower Slope  = (60% - 10%) / 80% = 62.5% \n Upper Slope  = (230% - 60%) / 20% = 850% \n \n Assume the trader is opening a position with size  $10,000 . \n Scenario 1: 40% Utilization (below target level) \n \n Borrow Rate  = 10% + (62.5% × 40%) = 10% + 25% = 35% \n \n The hourly borrow rate is calculated by dividing the borrow rate by the number of hours in a year: \n \n Hourly Borrow Rate  = 35% / 8760 = ~0.004% \n \n This means the position will accrue a borrow fee of  0.004% * $10,000 = $0.40  every hour. \n Scenario 2: 90% Utilization (above target level) \n Assume the current utilization rate is 85% which is above the target utilization level of 80% from the example above, the calculation is as follows: \n \n Borrow Rate  = 60% + (850% × 10%) = 60% + 85% = 145% \n \n The hourly borrow rate is calculated by dividing the borrow rate by the number of hours in a year: \n \n Hourly Borrow Rate  = 145% / 8760 = ~0.0166% \n \n This means the position will accrue a borrow fee of  0.0166% * $10,000 = $1.66  every hour. \n :::info\nBorrow fees are continuously accrued and deducted from your collateral. This ongoing deduction has two important consequences: \n \n Your effective leverage increases over time as your collateral decreases. \n Your liquidation price moves closer to the current market price. \n \n It's crucial to regularly monitor your borrow fees and liquidation price. Failure to do so may result in unexpected liquidation, especially during periods of high market volatility or extended position duration.\n::: \n How does the Jupiter Perpetuals contract calculate borrow fees? \n Due to Solana's blockchain architecture, calculating funding fees in real-time for each position would be computationally expensive and impractical. Instead, the Jupiter Perpetuals contract uses a counter-based system to calculate borrow fees for open positions. \n The  pool  and  position  accounts maintain two key fields: \n \n The pool account maintains a global cumulative counter through its  fundingRateState.cumulativeInterestRate  field, which accumulates interest rates over time \n Each position account tracks its own  cumulativeInterestSnapshot  field, which captures the global counter's value whenever a trade is made: when the position is opened, when its size is increased, when collateral is deposited or withdrawn, or when the position is closed \n \n To calculate a position's borrow fee, the contract takes the difference between the current global interest rate counter and the position's snapshot, then multiplies this by the position size. This approach enables efficient on-chain calculation of borrow fees over a given time period without needing real-time updates for each position. \n The example below demonstrates the borrow fee calculation: \n // Constants:\nBPS_DECIMALS = 4             // 10^4, for basis points\nDBPS_DECIMALS = 5            // 10^5, decimal basis points for precision\nRATE_DECIMALS = 9            // 10^9, for funding rate calculations\nUSD_DECIMALS = 6             // 10^6, for USD amounts as per the USDC mint's decimals\n\n// Main calculation:\n1. Get the cumulative interest rate from the pool account:\n   cumulativeInterestRate = pool.cumulative_interest_rate\n\n2. Get the position's borrow rate snapshot:\n   borrowRateSnapshot = position.cumulative_interest_snapshot\n\n3. Get the position's borrow rate interval:\n   borrowRate = cumulativeInterestRate - borrowRateSnapshot\n\n4. Calculate final borrow fee (USD):\n   borrowFeeUsd = (borrowRate * position.size_usd) / (10 ^ RATE_DECIMALS) / (10 ^ USD_DECIMALS)\n \n :::info\nThis  code snippet  shows an example of calculating a position's borrow fees programmatically.\n::: \n Funding rate \n There is no funding rate for Jupiter Perpetuals . The Jupiter Perpetuals platform does not behave like a standard futures platform where longs pay shorts (or vice-versa) based on the funding rate, since traders borrow from the JLP which incurs a  borrow fee . \n Transaction & Priority Fee \n Traders will have to pay SOL for submitting transactions onto the Solana chain. Traders also pay priority fees or Jito bundle tips (or both) depending on their settings. \n At the same time, a minor SOL amount will be used for rent to create an escrow account ( PDA ). The SOL rent will be returned to you once you close your position. \n Example Trade \n Suppose a trader wants to open a 2x long SOL position at a position size of $1000 USD by depositing $500 USD worth of SOL as a collateral and borrowing $500 USD worth of SOL from the pool. Assume the hourly borrow rate for SOL is  0.012% . \n Initial Position Value $1000 \n Initial Deposit $500 \n Borrowed Amount $500 \n Leverage 2x \n Initial SOL Price $100 \n Utilization Rate 50% \n Hourly Borrow Rate 0.012% per hour \n Position Opening Fee 0.06% * $1000 = $0.6 \n \n The trader keeps this position open for 2 days, and the price of SOL appreciates by 10%. \n Final Position Value $1100 \n Final SOL Price $110 \n Holding Period 2 days (48 hours) \n Position Closing Fee 0.06% * $1100 = $0.66 \n \n The borrow fee accumulated throughout this period can be calculated as: \n \n Hourly Borrow Fee = Tokens Borrowed/Tokens in the Pool * Hourly Borrow Rate * Position Size \n Total Borrow Fee = 50% * 0.012% * 1000 * 48 = $2.88 USD \n \n The trader's final profit can be calculated as: \n \n Final Profit = Final Position Value - Initial Position Value - Borrow Fee - Opening Fee - Closing Fee \n $1100 - $1000 - $2.88 - $0.6 - $0.66 = $95.86 \n \n The trader gets a final profit of  $95.86 USD  after this trade. \n Oracle \n Jupiter Perps uses a new Oracle Network, Dove Oracle, co-designed by Jupiter and Chaos Labs and audited by Offside Labs. \n The Dove Oracle relies on  Chaos' Edge Pricing Data  and anyone will be able to use it on Solana. \n This oracle was co-designed with Jupiter, with the usage of Jupiter Perps in mind, and comes with key benefits while having an independent team provide the price feed. \n This oracle is extremely compute-efficient, allowing us to update all 5 oracles (SOL, BTC, ETH, USDC, USDT) when opening and closing positions. \n \n Key Benefits \n Benefits Old Oracle Our Oracle \n Reliability User makes a position request, Keepers wait for 45s for the oracle to update, if the oracle doesn't update, the position request fails. User makes a trade, Keepers update the oracle and open the position with the same transaction. \n Latency User makes a request, Keepers have to wait for the oracle before placing the trade. User makes a trade, Keepers immediately process the trade with the oracle. \n Chart Discrepancy between trades placed and the chart. Our oracle powers the trading view chart and all position requests, no discrepancy. \n \n Working Together With Pyth Oracle \n Perp Keepers also utilize Pyth: \n \n As a reference price check (sanity check) against the Dove Oracle, ensuring that the deviation is not too big. \n As a fallback price if our oracle's prices are stale. \n \n This way, Jupiter Perps benefits from the Dove oracle while still being able to rely on the Pyth oracle. \n Oracle Price Accounts and Fetching Oracle Prices \n The Dove Oracle used by the Jupiter Perpetuals platform stores oracle price data in the following onchain accounts: \n Asset Oracle Account \n SOL 39cWjvHrpHNz2SbXv6ME4NPhqBDBd4KsjUYv5JkHEAJU \n ETH 5URYohbPy32nxK1t3jAHVNfdWY2xTubHiFvLrE3VhXEp \n BTC 4HBbPx9QJdjJ7GUe6bsiJjGybvfpDhQMMPXP1UEa7VT5 \n USDC A28T5pKtscnhDo6C1Sz786Tup88aTjt8uyKewjVvPrGk \n USDT AGW7q2a3WxCzh5TB2Q6yNde1Nf41g3HLaaXdybz7cbBU \n \n :::info\nThe code snippet below in the examples repo shows how to fetch and stream onchain price updates from the accounts above: \n https://github.com/julianfssen/jupiter-perps-anchor-idl-parsing/blob/main/src/examples/poll-and-stream-oracle-price-updates.ts\n::: \n Keepers \n Jupiter Perpetual Exchange works based on a keeper model. A typical trader action involves a 2-step process: \n \n Trader  submits a request transaction onto the Solana chain. \n Keeper  monitors the request transaction and executes it as a separate transaction onto the Solana chain. \n \n If the position request fails (e.g. if the oracle price is stale or the oracle price hits the trader slippage), the keeper will close the trader's request and return the SOL rent on the request and collateral (when opening a position) back to the trader. You will see this as a separate transaction on your wallet submitted by our keeper. \n You may also notice multiple failed transactions on your wallet submitted by our keepers. You can safely ignore these failed transactions, they don't alter any state on your wallet. This happens because we have multiple keepers to execute your request in order to make sure that the trader experience is swift. \n :::info\nMore information on Keepers can be found  here .\n:::",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/guides/8-perpetual-exchange/2-how-it-works.md",
  "extracted_at": "2025-09-03T01:39:46.021639Z"
}
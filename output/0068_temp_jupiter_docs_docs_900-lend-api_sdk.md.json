{
  "url": "file://temp_jupiter_docs/docs/900-lend-api/sdk.md",
  "content": "sidebar_label: \"Lend SDK\"\ndescription: \"SDK for Jupiter Lend.\"\ntitle: \"Lend SDK\" \n\n     Jupiter Lend SDK \n     \n\n The Jupiter Lend SDK provides a TypeScript interface for interacting with the Jupiter lending protocol. This documentation covers two main integration approaches: getting instruction objects for direct use and getting account contexts for Cross-Program Invocation (CPI) integrations. \n Installation \n npm install @jup-ag/lend\n \n Setup \n import {\n    Connection,\n    Keypair, \n    PublicKey, \n    TransactionMessage, \n    TransactionInstruction, \n    VersionedTransaction\n} from \"@solana/web3.js\";\nimport {\n  getDepositIx, getWithdrawIx, // get instructions\n  getDepositContext, getWithdrawContext, // get context accounts for CPI\n} from \"@jup-ag/lend/earn\";\nimport { BN } from \"bn.js\";\n\nconst connection = new Connection(\"https://api.mainnet-beta.solana.com\");\nconst signer = Keypair.fromSecretKey(new Uint8Array(privateKey));\n\n// Example asset mints\nconst usdc = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"); // USDC mainnet\n \n \n Instruction \n Get Deposit Instruction \n const depositIx = await getDepositIx({\n    amount: new BN(1000000), // amount in token decimals (1 USDC)\n    asset: new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"), // asset mint address\n    signer: signer.publicKey, // signer public key\n    connection, // Solana connection\n    cluster: \"mainnet\",\n});\n \n Get Withdraw Instruction \n const withdrawIx = await getWithdrawIx({\n    amount: new BN(1000000), // amount in token decimals (1 USDC)\n    asset: new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"), // asset mint address\n    signer: signer.publicKey, // signer public key\n    connection, // Solana connection\n    cluster: \"mainnet\",\n});\n \n Example Instruction Usage \n import {\n    Connection,\n    Keypair, \n    PublicKey, \n    TransactionMessage, \n    Transaction,\n    TransactionInstruction,\n    VersionedTransaction\n} from \"@solana/web3.js\";\nimport {\n    getDepositIx,\n} from \"@jup-ag/lend/earn\";\nimport { BN } from \"bn.js\";\n\nconst signer = Keypair.fromSecretKey(new Uint8Array(privateKey));\nconst connection = new Connection('https://api.mainnet-beta.solana.com');\n\n// Get deposit instruction\nconst depositIx = await getDepositIx({\n    amount: new BN(1000000), // amount in token decimals (1 USDC)\n    asset: new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"), // asset mint address\n    signer: signer.publicKey, // signer public key\n    connection, // Solana connection\n    cluster: \"mainnet\",\n});\n\n// Convert the raw instruction to TransactionInstruction\nconst instruction = new TransactionInstruction({\n    programId: new PublicKey(depositIx.programId),\n    keys: depositIx.keys.map((key) => ({\n        pubkey: new PublicKey(key.pubkey),\n        isSigner: key.isSigner,\n        isWritable: key.isWritable,\n    })),\n    data: Buffer.from(depositIx.data),\n});\n\nconst latestBlockhash = await connection.getLatestBlockhash();\nconst messageV0 = new TransactionMessage({\n    payerKey: signer.publicKey,\n    recentBlockhash: latestBlockhash.blockhash,\n    instructions: [instruction],\n}).compileToV0Message();\n\nconst transaction = new VersionedTransaction(messageV0);\ntransaction.sign([signer]);\nconst serializedTransaction = transaction.serialize();\nconst blockhashInfo = await connection.getLatestBlockhashAndContext({ commitment: \"finalized\" });\n\nconst signature = await connection.sendRawTransaction(serializedTransaction);\nconsole.log(`https://solscan.io/tx/${signature}`);\n \n CPI \n For Anchor programs that need to make CPI calls to Jupiter Lend, use the context methods. \n Deposit Context Accounts \n const depositContext = await getDepositContext({\n    asset: new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"), // asset mint address\n    signer: signer.publicKey, // signer public key\n    connection,\n});\n \n \n     \n         \n             \n                 Deposit Context Accounts Table \n             \n         \n     \n Account Purpose \n signer User's wallet public key \n depositorTokenAccount User's underlying token account (source) \n recipientTokenAccount User's fToken account (destination) \n mint Underlying token mint \n lendingAdmin Protocol configuration PDA \n lending Pool-specific configuration PDA \n fTokenMint fToken mint account \n supplyTokenReservesLiquidity Liquidity protocol token reserves \n lendingSupplyPositionOnLiquidity Protocol's position in liquidity pool \n rateModel Interest rate calculation model \n vault Protocol vault holding deposited tokens \n liquidity Main liquidity protocol PDA \n liquidityProgram Liquidity protocol program ID \n rewardsRateModel Rewards calculation model PDA \n \n \n Withdraw Context Accounts \n const withdrawContext = await getWithdrawContext({\n    asset: new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"), // asset mint address\n    signer: signer.publicKey, // signer public key\n    connection,\n});\n \n \n     \n         \n             \n                 Withdraw Context Accounts Table \n             \n         \n     \nSimilar to deposit context, but includes:\n \n ownerTokenAccount : User's fToken account (source of fTokens to burn) \n claimAccount : Additional account for withdrawal claim processing \n \n Account Purpose \n signer User's wallet public key \n ownerTokenAccount User's underlying token account (source) \n recipientTokenAccount User's fToken account (destination) \n claimAccount Additional account for withdrawal \n mint Underlying token mint \n lendingAdmin Protocol configuration PDA \n lending Pool-specific configuration PDA \n fTokenMint fToken mint account \n supplyTokenReservesLiquidity Liquidity protocol token reserves \n lendingSupplyPositionOnLiquidity Protocol's position in liquidity pool \n rateModel Interest rate calculation model \n vault Protocol vault holding deposited tokens \n liquidity Main liquidity protocol PDA \n liquidityProgram Liquidity protocol program ID \n rewardsRateModel Rewards calculation model PDA \n \n \n Example CPI Usage \n const depositContext = await getDepositContext({\n  asset: usdcMint,\n  signer: userPublicKey,\n});\n\n// Pass these accounts to your Anchor program\nawait program.methods\n  .yourDepositMethod(amount)\n  .accounts({\n    // Your program accounts\n    userAccount: userAccount,\n\n    // Jupiter Lend accounts (from context)\n    signer: depositContext.signer,\n    depositorTokenAccount: depositContext.depositorTokenAccount,\n    recipientTokenAccount: depositContext.recipientTokenAccount,\n    lendingAdmin: depositContext.lendingAdmin,\n    lending: depositContext.lending,\n    fTokenMint: depositContext.fTokenMint,\n    // ... all other accounts from context\n\n    lendingProgram: new PublicKey(\n      \"jup3YeL8QhtSx1e253b2FDvsMNC87fDrgQZivbrndc9\"\n    ),\n  })\n  .rpc();\n \n \n Read Functions \n The Jupiter Lend SDK provides several read functions to query protocol data and user positions, this can be helpful to display on your frontend. \n Get All Lending Tokens \n Retrieves all available lending tokens in the Jupiter Lend Earn protocol. \n :::note\nThe  getLendingTokens  function returns an array of  PublicKey  objects.\n::: \n import { getLendingTokens } from \"@jup-ag/lend/earn\";\n\nconst allTokens = await getLendingTokens({ connection });\n \n [\n    PublicKey,\n    PublicKey,\n    ...\n]\n \n Get Token Details \n Fetches detailed information about a specific lending token. \n import { getLendingTokenDetails } from \"@jup-ag/lend/earn\";\n\nconst tokenDetails = await getLendingTokenDetails({\n    lendingToken: new PublicKey(\"9BEcn9aPEmhSPbPQeFGjidRiEKki46fVQDyPpSQXPA2D\"), // allTokens[x] from the previous example\n    connection,\n});\n \n {\n  id: number; // ID of jlToken, starts from 1\n  address: PublicKey; // Address of jlToken\n  asset: PublicKey; // Address of underlying asset\n  decimals: number; // Decimals of asset (same as jlToken decimals)\n  totalAssets: BN; // Total underlying assets in the pool\n  totalSupply: BN; // Total shares supply\n  convertToShares: BN; // Multiplier to convert assets to shares\n  convertToAssets: BN; // Multiplier to convert shares to assets\n  rewardsRate: BN; // Rewards rate (1e4 decimals, 1e4 = 100%)\n  supplyRate: BN; // Supply APY rate (1e4 decimals, 1e4 = 100%)\n}\n \n Get User Position \n Retrieves a user's lending position for a specific asset: \n import { getUserLendingPositionByAsset } from \"@jup-ag/lend/earn\";\n\nconst userPosition = await getUserLendingPositionByAsset({\n    asset: new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"), // The address of underlying asset or tokenDetails.asset\n    user: signer.publicKey, // User's wallet address\n    connection,\n});\n \n {\n  lendingTokenShares: BN; // User's shares in jlToken\n  underlyingAssets: BN; // User's underlying assets\n  underlyingBalance: BN; // User's underlying balance\n}",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/900-lend-api/sdk.md",
  "extracted_at": "2025-09-03T01:39:45.799339Z"
}
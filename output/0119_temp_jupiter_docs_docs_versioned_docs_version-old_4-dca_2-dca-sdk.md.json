{
  "url": "file://temp_jupiter_docs/docs_versioned_docs/version-old/4-dca/2-dca-sdk.md",
  "content": "sidebar_label: DCA with SDK\ndescription: Integrate Dollar Cost Averaging (DCA) in JS/TS with Jupiter. Streamline trading with our guide and practical code examples.\ntitle: Integrating DCA (JS/TS) \n\n     Integrating Jupiter DCA With Javascript and Typescript \n     \n\n \n Following code is tested to work with \n \n NodeJS v20\n@jup-ag/dca-sdk@2.3.5\n \n To ease integration, you may want to use Jupiter's  DCA SDK \n The following example is for a NodeJS environment. This example can be adapted to work in a frontend browser application. The only difference is in how you sign and send a transaction. \n Code example and description as comments in-line: \n \n Create a project directory and install dependencies: \n \n mkdir dca-bot\ncd dca-bot\nnpm init -y\nnpm i @solana/web3.js@1 @jup-ag/dca-sdk@2.3.5 dotenv\n \n \n Create a Typescript file with the following: \n \n import { CloseDCAParams, DCA, Network, type CreateDCAParamsV2, type DepositParams, type WithdrawParams } from '@jup-ag/dca-sdk';\nimport { Connection, Keypair, PublicKey, sendAndConfirmTransaction } from '@solana/web3.js';\n\nconst connection = new Connection('https://api.mainnet-beta.solana.com');\n\nconst dca = new DCA(connection, Network.MAINNET);\nconst user = Keypair.fromSecretKey(new Uint8Array(JSON.parse(process.env.USER_PRIVATE_KEY))); // create a .env file and include your wallet private key as an array\n\nconst USDC = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v');\nconst BONK = new PublicKey('DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263');\n\nasync function createDCA() {\n  const params: CreateDCAParamsV2 = {\n    payer: user.publickey, // could have a different account pay for the tx (make sure this account is also a signer when sending the tx)\n    user: user.publicKey,\n    inAmount: BigInt(5_000_000), // buy a total of 5 USDC over 5 days\n    inAmountPerCycle: BigInt(1_000_000), // buy using 1 USDC each day\n    cycleSecondsApart: BigInt(86400), // 1 day between each order -> 60 * 60 * 24\n    inputMint: USDC, // sell\n    outputMint: BONK, // buy\n    minOutAmountPerCycle: null,  // effectively allows for a max price. refer to Integration doc\n    maxOutAmountPerCycle: null, // effectively allows for a min price. refer to Integration doc\n    startAt: null, // unix timestamp in seconds\n    userInTokenAccount, // optional: if the inputMint token is not in an Associated Token Account but some other token account, pass in the PublicKey of the token account, otherwise, leave it undefined\n  };\n\n  const { tx, dcaPubKey } = await dca.createDcaV2(params);\n  const txid = await sendAndConfirmTransaction(connection, tx, [user]);\n\n  console.log('Create DCA: ', { txid });\n\n  return dcaPubKey;\n}\n\n// this is for withdrawing from program ATA\nasync function withdraw(dcaPubKey) {\n  // it's possible to withdraw in-tokens only or out-tokens only or both in and out tokens together. See WithdrawParams for more details\n  const params: WithdrawParams = {\n    user: user.publicKey,\n    dca: dcaPubKey,\n    inputMint: USDC,\n    withdrawInAmount: BigInt(1_000_000),\n  };\n\n  const { tx } = await dca.withdraw(params);\n\n  const txid = await sendAndConfirmTransaction(connection, tx, [user]);\n\n  console.log('Withdraw: ', { txid });\n}\n\nasync function closeDCA(dcaPubKey) {\n  const params: CloseDCAParams = {\n    user: user.publicKey,\n    dca: dcaPubKey,\n  };\n\n  const { tx } = await dca.closeDCA(params);\n\n  const txid = await sendAndConfirmTransaction(connection, tx, [user]);\n\n  console.log('Close DCA: ', { txid });\n}\n\nasync function main() {\n  const dcaPubKey = await createDCA();\n  console.log('DCA Pub Key: ', { dcaPubKey });\n\n  const dcaAccount = await dca.fetchDCA(dcaPubKey);\n  console.log('DCA Account Data: ', { dcaAccount });\n\n  const dcaAccounts = await dca.getCurrentByUser(user.publicKey);\n  console.log({ dcaAccounts });\n\n  await dca.getBalancesByAccount(dcaPubKey);\n\n  await withdraw(dcaPubKey);\n\n  await closeDCA(dcaPubKey);\n}\n\nmain();",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs_versioned_docs/version-old/4-dca/2-dca-sdk.md",
  "extracted_at": "2025-09-03T01:39:45.880956Z"
}
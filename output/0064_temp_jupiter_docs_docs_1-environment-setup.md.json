{
  "url": "file://temp_jupiter_docs/docs/1-environment-setup.md",
  "content": "sidebar_label: \"Environment Setup\"\ndescription: \"Get Started with setting up libraries, connection and local wallet to build with Jupiter API.\"\ntitle: \"Environment Setup\" \n\n     Environment Setup \n     \n\n :::note about the documentation\nIn the documentation, we are using the Solana  web3.js  library to set up connection, sign transactions, etc.\n::: \n Useful Libraries \n JavaScript Libraries \n \n @solana/web3.js \n @solana/spl-token \n @jup-ag/referral-sdk \n \n Useful Scripts \n Set up RPC Connection \n :::note\nSolana provides a  default RPC endpoint . However, as your application grows, we recommend you to always use your own or provision a 3rd party providerâ€™s RPC endpoint such as  Helius  or  Triton .\n::: \n const connection = new Connection('https://api.mainnet-beta.solana.com');\n \n Set up Development Wallet \n :::note \n \n You can paste in your private key for testing purposes but this is not recommended for production applications. \n If you want to store your private key in the project directly, you can do it via a  .env  file.\n::: \n \n To set up a development wallet via  .env  file, you can use the following script. \n // index.js\nimport { Keypair } from '@solana/web3.js';\nimport dotenv from 'dotenv';\nrequire('dotenv').config();\n\nconst wallet = Keypair.fromSecretKey(bs58.decode(process.env.PRIVATE_KEY || '')));\n \n // .env\nPRIVATE_KEY=\"\"\n \n To set up a development wallet via a wallet generated via  Solana CLI , you can use the following script. \n import { Keypair } from '@solana/web3.js';\nimport fs from 'fs';\n\nconst privateKeyArray = JSON.parse(fs.readFileSync('/Path/to/.config/solana/id.json', 'utf8').trim());\nconst wallet = Keypair.fromSecretKey(new Uint8Array(privateKeyArray));",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/1-environment-setup.md",
  "extracted_at": "2025-09-03T01:39:45.790987Z"
}
{
  "url": "file://temp_jupiter_docs/docs/300-tool-kits/plugin/react-app-example.md",
  "content": "sidebar_label: \"React App Example\"\ndescription: \"A step-by-step guide to integrating Jupiter Plugin into a React application.\"\ntitle: \"React App Example\" \n\n     Plugin React App Example \n     \n\n In this guide, we'll walk you through from scratch the steps to integrate Jupiter Plugin into a React application. \n Prerequisites \n Before you begin, make sure you have the following installed on your system. \n Node.js and npm : Download and install from  nodejs.org \n Step 1: Create a New React Project \n Head to your preferred directory and create a new React project using  create-react-app  with TypeScript template (you can use other templates or methods to start your project too): \n npx create-react-app plugin-demo --template typescript\ncd plugin-demo\nnpm start\n \n Step 2: Add TypeScript Support \n Create a type declaration file  plugin.d.ts  in your project's  /src/types  folder: \n declare global {\n  interface Window {\n    Jupiter: JupiterPlugin;\n  }\n};\nexport {};\n \n \n   \n    Full TypeScript Declaration\n   \n declare global {\n    interface Window {\n        Jupiter: JupiterPlugin;\n    }\n}\n\nexport type WidgetPosition = 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right';\nexport type WidgetSize = 'sm' | 'default';\nexport type SwapMode = \"ExactInOrOut\" | \"ExactIn\" | \"ExactOut\";\nexport type DEFAULT_EXPLORER = 'Solana Explorer' | 'Solscan' | 'Solana Beach' | 'SolanaFM';\n\nexport interface FormProps {\n    swapMode?: SwapMode;\n    initialAmount?: string;\n    initialInputMint?: string;\n    initialOutputMint?: string;\n    fixedAmount?: boolean;\n    fixedMint?: string;\n    referralAccount?: string;\n    referralFee?: number;\n}\n\nexport interface IInit {\n    localStoragePrefix?: string;\n    formProps?: FormProps;\n    defaultExplorer?: DEFAULT_EXPLORER;\n    autoConnect?: boolean;\n    displayMode?: 'modal' | 'integrated' | 'widget';\n    integratedTargetId?: string;\n    widgetStyle?: {\n        position?: WidgetPosition;\n        size?: WidgetSize;\n    };\n    containerStyles?: CSSProperties;\n    containerClassName?: string;\n    enableWalletPassthrough?: boolean;\n    passthroughWalletContextState?: WalletContextState;\n    onRequestConnectWallet?: () => void | Promise<void>;\n    onSwapError?: ({\n        error,\n        quoteResponseMeta,\n    }: {\n        error?: TransactionError;\n        quoteResponseMeta: QuoteResponse | null;\n    }) => void;\n    onSuccess?: ({\n        txid,\n        swapResult,\n        quoteResponseMeta,\n    }: {\n        txid: string;\n        swapResult: SwapResult;\n        quoteResponseMeta: QuoteResponse | null;\n    }) => void;\n    onFormUpdate?: (form: IForm) => void;\n    onScreenUpdate?: (screen: IScreen) => void;\n}\n\nexport interface JupiterPlugin {\n    _instance: JSX.Element | null;\n    init: (props: IInit) => void;\n    resume: () => void;\n    close: () => void;\n    root: Root | null;\n    enableWalletPassthrough: boolean;\n    onRequestConnectWallet: IInit['onRequestConnectWallet'];\n    store: ReturnType<typeof createStore>;\n    syncProps: (props: { passthroughWalletContextState?: IInit['passthroughWalletContextState'] }) => void;\n    onSwapError: IInit['onSwapError'];\n    onSuccess: IInit['onSuccess'];\n    onFormUpdate: IInit['onFormUpdate'];\n    onScreenUpdate: IInit['onScreenUpdate'];\n    localStoragePrefix: string;\n}\n\nexport { };\n \n \n Step 3: Embed the Plugin Script \n In your  /public/index.html , add the Jupiter Plugin script: \n <head>\n  <script src=\"https://plugin.jup.ag/plugin-v1.js\" data-preload defer></script>\n</head>\n \n Step 4: Initialize Plugin \n There are two ways to initialize Jupiter Plugin in a React application: \n Method 1: Using Window Object \n In your  /src/App.tsx , use the following code to initialize the plugin. \n import React, { useEffect } from 'react';\nimport './App.css';\nimport './types/plugin.d';\n\nexport default function App() {\n  useEffect(() => {\n    // Initialize plugin\n    window.Jupiter.init({\n      displayMode: \"widget\",\n      integratedTargetId: \"jupiter-plugin\",\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Jupiter Plugin Demo</h1>\n      <div id=\"jupiter-plugin\" />\n    </div>\n  );\n}\n \n Method 2: Using @jup-ag/plugin Package \n :::warning\nDo note that using this method will require you to maintain its dependencies.\n::: \n \n Install the package: \n \n npm install @jup-ag/plugin\n \n \n Initialize the plugin: \n \n import React, { useEffect } from \"react\";\nimport \"@jup-ag/plugin/css\";\nimport \"./App.css\";\nimport \"./types/plugin.d\";\n\nexport default function App() {\n  useEffect(() => {\n    import(\"@jup-ag/plugin\").then((mod) => {\n      const { init } = mod;\n      init({\n        displayMode: \"widget\",\n        integratedTargetId: \"jupiter-plugin\",\n      });\n    });\n  }, []);\n\n  return (\n    <div>\n      <h1>Jupiter Plugin Demo</h1>\n      <div id=\"jupiter-plugin\" />\n    </div>\n  );\n}\n \n There you have it! You've successfully integrated Jupiter Plugin into your Next.js application. \n \n Please test the swap functionality and check the transaction. \n If you require more customizations, check out the  Plugin Playground  or the  Customization  documentation. \n If you have any questions or issues, please refer to the  FAQ  or contact us on  Discord .",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/300-tool-kits/plugin/react-app-example.md",
  "extracted_at": "2025-09-03T01:39:45.813566Z"
}
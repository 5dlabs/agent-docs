{
  "url": "file://temp_jupiter_docs/docs/102-trigger-api/1-create-order.md",
  "content": "description: \"Use the Jupiter Trigger API to create orders.\"\ntitle: \"Create Order\" \n\n     Create Order \n     \n\n :::warning New Paths\nThe  /limit/v2  path will be deprecated soon, please update your API calls to use the  /trigger/v1  path immediately. \n When updating to the new path, please refer to the documentation as there are some breaking changes. \n \n /execute  endpoint is introduced. \n /createOrder  endpoint now includes an additional  requestId  parameter to be used with the  /execute  endpoint. \n /cancelOrder  endpoint only builds the transaction for 1 order, while  /cancelOrders  endpoint builds the transaction for multiple orders. \n The  tx  field in the responses are now  transaction  or  transactions . \n /getTriggerOrders  endpoint is introduced to get either active or historical orders (based on the query parameters) in a new format.\n::: \n \n :::note \n \n Lite URL:  https://lite-api.jup.ag/trigger/v1/createOrder \n Pro URL:  https://api.jup.ag/trigger/v1/createOrder \n \n To upgrade to Pro or understand our rate limiting, please refer to this section. \n \n API Key Setup \n API Rate Limit \n::: \n \n Create Order \n This is a POST request to  /createOrder  endpoint, where you pass in the necessary parameters and our backend will create the transaction for you to sign and send to the network seamlessly. \n :::tip Optional Parameters\nDo note that there are a few optional parameters that you can use, such as: \n \n Adding slippage to the order: This corresponds to the \"Ultra\" mode on jup.ag frontend. Higher slippage increases execution success rate but may result in less favorable prices. Omitting this parameter (or setting it to 0) corresponds to \"Exact\" mode.  Learn more about UI modes vs API implementation . \n Setting an expiry date on the order. \n Adding fees through our referral program, please ensure that your  feeAccount  has the necessary  referralTokenAccount s of the output mint of the limit order for it to work, you can learn more about creating them dynamically in the  Add Fees To Swap  guide. (Note that the fees are transferred only after the trigger order has been executed.)\n::: \n \n Create a POST request to the  /createOrder  endpoint. \n const createOrderResponse = await (\n    await fetch('https://api.jup.ag/trigger/v1/createOrder', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            inputMint: inputMint.toString(),\n            outputMint: outputMint.toString(),\n            maker: \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n            payer: \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n            params: {\n                makingAmount: \"1000000\",\n                takingAmount: \"300000\",\n                // slippageBps: \"\", // Optional, by nature, trigger orders execute with 0 slippage\n                // expiredAt: \"\", // In unix seconds (e.g. Date.now()/1_000) or optional\n                // feeBps: \"\", // Requires referral account or optional\n            },\n            computeUnitPrice: \"auto\",\n            // feeAccount: \"\", // Optional but if specified it is the referral token account of the output mint\n            // wrapAndUnwrapSol: true, // Default true or optional\n        })\n    })\n).json();\n\nconsole.log(createOrderResponse);\n \n Now that you have the order transaction, you can sign and send to the network. There are 2 methods, after signing the transaction, you can either send it to the network yourself or use the Trigger API's  /execute  endpoint to do it for you. \n Let's execute the order \n Create Order Response \n Success Example Response \n {\n  \"order\": \"CFG9Bmppz7eZbna96UizACJPYT3UgVgps3KkMNNo6P4k\",\n  \"transaction\": \"AQAAAAAAAAAAAAAAAAAAAAAA......AgAKCAkBAQsPAAADBAEMCwcKCQkIBg0LIoVuSq9wn/WfdskdmHlfUulAQg8AAAAAAICpAwAAAAAAAAAJAwEAAAEJAA==\",\n  \"requestId\": \"370100dd-1a85-421b-9278-27f0961ae5f4\"\n}\n \n Failed Example Response \n {\n  \"error\": \"invalid create order request\",\n  \"cause\": \"input mint making amount must be at least 5 USD, received: 2\",\n  \"code\": 400\n}",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/102-trigger-api/1-create-order.md",
  "extracted_at": "2025-09-03T01:39:45.552626Z"
}
{
  "url": "file://temp_jupiter_docs/docs/200-perp-api/201-position-account.md",
  "content": "sidebar_label: \"Position Account\"\ndescription: \"Understand and integrate the Jupiter Perp Program.\"\ntitle: \"Position Account\" \n\n     Position Account \n     \n\n This page contains an overview of the  Solana account types  used in the Jupiter Perpetuals Program, and specifically the  Position  account. \n The  Position  account is a struct which represents a set of parameters and states associated to trade position data for a given token. \n :::note  Position  account derivation\nThe  Position  account's address is derived from the trader's wallet address / public key, the custody account, the collateral custody account, and a few other constant seeds. This means traders will always have the same Position account address for their open positions. \n This also means that traders only have nine positions available at one time: \n \n Long SOL \n Long wETH \n Long wBTC \n Short SOL (USDC as collateral) \n Short SOL (USDT as collateral) \n Short wETH (USDC as collateral) \n Short wETH (USDT as collateral) \n Short wBTC (USDC as collateral) \n Short wBTC (USDT as collateral) \n \n This is an example  Position  account .\n::: \n :::tip Example Typescript Repository\nThis  repository  contains Typescript code samples on interacting with the Jupiter Perpetuals program IDL with  anchor  and  @solana/web3.js \n You can also find the  Custody Account fields in the repository  or on a  blockchain explorer .\n::: \n Account Details \n Each  Position  account contains the following data: \n Field Description \n owner Type:   publicKey The public key of the trader's account. \n pool Type:   publicKey The public key of the  JLP pool account . \n custody Type:   publicKey The public key of the position's  custody  account . \n collateralCustody Type:   publicKey The public key of the position's collateral custody account. Like the  custody  account, a  collateralCustody  account contains information for the token that's used as collateral for the position (SOL / wETH / wBTC for long positions, USDC / USDT for short positions). The borrow rates for the position will also be calculated based on the position's  collateralCustody . \n openTime Type:   i64 The open time of the position in UNIX timestamp format. \n updateTime Type:   i64 The last updated time of the position in UNIX timestamp format. \n side Type:   Side The position's side, either  long  or  short . \n price Type:   u64 The entry price of the position when it was opened. The entry price is an integer in the atomic value (before decimals), a USDC (6 decimals) value of  158225872  is equivalent to $158.22. \n sizeUsd Type:   u64 The position size after leverage in USD in the atomic value (before decimals). A position with  sizeUsd = 0  is treated as a closed position. \n collateralUsd Type:   u64 The position's collateral size after fees in USD in the atomic value (before decimals). \n realisedPnlUsd Type:   i64 The position's realized PNL when closing the position partially. When a position is closed completely, the position's  realisedPnlUsd  will be  0  as the position is considered closed (as described in  sizeUsd ). \n cumulativeInterestSnapshot Type:   u128 Stores the position's interest rate snapshot when it was last updated. - The  collateralCustody  account for the respective collateral token stores a monotonically increasing counter in  collateralCustody .fundingRateState .cumulativeInterestRate . The difference between the  collateralCustody .fundingRateState .cumulativeInterestRate  and the position's  cumulativeInterestSnapshot  is used to calculate the borrow fees for the position. \n lockedAmount Type:   u64 The amount of tokens (SOL / wETH / wBTC for long positions, USDC / USDT for short positions) locked to pay off the position's max potential profit. It acts as a cap on the maximum potential profit of the position. This amount is locked in the collateral custody to ensure the platform has sufficient tokens to pay out profitable trades. \n bump Type:   u8 The bump seed used to derive the PDA for the  Position  account.",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/200-perp-api/201-position-account.md",
  "extracted_at": "2025-09-03T01:39:45.806134Z"
}
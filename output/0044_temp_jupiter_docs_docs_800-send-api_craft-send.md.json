{
  "url": "file://temp_jupiter_docs/docs/800-send-api/craft-send.md",
  "content": "sidebar_label: \"Craft Send (Beta)\"\ndescription: \"Use the Jupiter Send API to gift, pay, or onboard anyone in seconds.\"\ntitle: \"Craft Send (Beta)\" \n\n     Craft Send (Beta) \n     \n\n :::note \n \n Lite URL:  https://lite-api.jup.ag/send/v1 \n Pro URL:  https://api.jup.ag/send/v1 \n \n To upgrade to Pro or understand our rate limiting, please refer to this section. \n \n API Key Setup \n API Rate Limit \n::: \n \n Overview \n \n Create invite code. \n From utils, derive the secret key - a deterministic 64-byte Solana secret key (32 bytes private + 32 bytes public key). \n Create Solana Keypair instance from the secret key. \n Post request to get Send transaction. \n Sign with both sender and recipient keypair, then send transaction and wait for confirmation. \n \n :::note\n Please ensure that you have set up the prerequisites .\n::: \n \n     \n        Full Code Snippet\n     \n import { create_invite_code, invite_code_to_priv_key } from \"./utils.js\";\nimport {\n  Connection,\n  Keypair,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport fs from \"fs\";\n\nconst connection = new Connection('insert-rpc');\nconst senderPrivateKey = JSON.parse(fs.readFileSync('/Path/to/sender/id.json', 'utf8').trim());\nconst sender = Keypair.fromSecretKey(new Uint8Array(senderPrivateKey));\n\n// STEP 1: Create 12-character invite code\nconst invite_code = await create_invite_code();\n\n// STEP 2: Derive secret key (public and private key)\nconst secret_key = invite_code_to_priv_key(invite_code);\n\n// STEP 3: Use secret key to create Solana Keypair instance\nconst recipient = Keypair.fromSecretKey(secret_key);\n\n// STEP 4: Post request for a Send transaction\nconst craftSendTransaction = await (\n    await fetch ('https://lite-api.jup.ag/send/v1/craft-send', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            inviteSigner: recipient.publicKey.toBase58(),\n            sender: sender.publicKey.toBase58(),\n            amount: \"10000000\", // atomic amount before decimals\n            // mint: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\", // Defaults to SOL if `mint` is not provided\n        }, null, 2)\n    })\n).json();\n\n// STEP 5: Use sender and receipient keypair to sign and send to network\nconst transaction = VersionedTransaction.deserialize(Buffer.from(craftSendTransaction.tx, 'base64'));\ntransaction.sign([sender, recipient]); // SIGN with both SENDER and RECIPIENT keypair\nconst transactionBinary = transaction.serialize();\nconst blockhashInfo = await connection.getLatestBlockhashAndContext({ commitment: \"confirmed\" });\n\nconst signature = await connection.sendRawTransaction(transactionBinary, {\n  maxRetries: 0,\n  skipPreflight: true,\n});\n\n// Log the signature immediately after sending, before confirmation\nconsole.log(`Transaction sent: https://solscan.io/tx/${signature}`);\n  \ntry {\n  const confirmation = await connection.confirmTransaction({\n    signature,\n    blockhash: blockhashInfo.value.blockhash,\n    lastValidBlockHeight: blockhashInfo.value.lastValidBlockHeight,\n  }, \"confirmed\");\n\n  if (confirmation.value.err) {\n    console.error(`Transaction failed: ${JSON.stringify(confirmation.value.err)}`);\n    console.log(`Examine the failed transaction: https://solscan.io/tx/${signature}`);\n  } else {\n    console.log(`Transaction successful: https://solscan.io/tx/${signature}`);\n  };\n} catch (error) {\n  console.error(`Error confirming transaction: ${error}`);\n  console.log(`Examine the transaction status: https://solscan.io/tx/${signature}`);\n};\n \n \n Imports \n import { create_invite_code, invite_code_to_priv_key } from \"./utils.js\";\nimport {\n  Connection,\n  Keypair,\n} from \"@solana/web3.js\";\nimport fs from \"fs\";\n\nconst connection = new Connection('insert-rpc');\nconst senderPrivateKey = JSON.parse(fs.readFileSync('/Path/to/sender/id.json', 'utf8').trim());\nconst sender = Keypair.fromSecretKey(new Uint8Array(senderPrivateKey));\n \n Create Invite Code \n // STEP 1: Create 12-character invite code\nconst invite_code = await create_invite_code();\n\n// STEP 2: Derive secret key (public and private key)\nconst secret_key = invite_code_to_priv_key(invite_code);\n\n// STEP 3: Use secret key to create Solana Keypair instance\nconst recipient = Keypair.fromSecretKey(secret_key);\n \n Craft Send \n :::note API Params \n \n The  amount  is in its atomic value before applying decimals, e.g. 1 USDC is 1_000_000. \n The  mint  defaults to SOL if not provided, if provided it can be any token mint.\n::: \n \n :::note Signing and sending \n \n After getting the transaction, you need to sign with  both sender and recipient  keypair. \n You can send the transaction to the network via any method.\n::: \n \n // STEP 4: Post request for a Send transaction\nconst craftSendTransaction = await (\n    await fetch ('https://lite-api.jup.ag/send/v1/craft-send', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            inviteSigner: recipient.publicKey.toBase58(),\n            sender: sender.publicKey.toBase58(),\n            amount: \"10000000\",\n            // mint: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n        }, null, 2)\n    })\n).json();",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/800-send-api/craft-send.md",
  "extracted_at": "2025-09-03T01:39:45.699068Z"
}
{
  "url": "file://temp_jupiter_docs/docs/999-studio-api/1-create-token.md",
  "content": "sidebar_label: 'Create Token (Beta)'\ndescription: 'Create and launch tokens on Jupiter Studio via API.'\ntitle: 'Create Token (Beta)' \n\n     Create Token (Beta) \n     \n\n :::note \n \n Lite URL:  https://lite-api.jup.ag/studio/v1 : 100 requests per 5 minutes \n Pro URL:  https://api.jup.ag/studio/v1 : 10 requests per 10 seconds (for all Tiers) \n \n To upgrade to Pro or understand our rate limiting, please refer to this section. \n \n API Key Setup \n API Rate Limit \n::: \n \n :::tip API Reference\nTo fully utilize the Studio API, check out the  Studio API Reference .\n::: \n Prerequisite \n \n     \n         \n             \n                 Dependencies \n             \n         \n     \n npm install @solana/web3.js@1 # Using v1 of web3.js instead of v2\nnpm install dotenv # If required for wallet setup\n \n \n \n     \n         \n             \n                 Wallet \n             \n         \n     \n Set up Development Wallet \n :::note \n \n You can paste in your private key for testing purposes but this is not recommended for production applications. \n If you want to store your private key in the project directly, you can do it via a  .env  file.\n::: \n \n To set up a development wallet via  .env  file, you can use the following script. \n // index.js\nimport { Keypair } from '@solana/web3.js';\nimport dotenv from 'dotenv';\nrequire('dotenv').config();\n\nconst wallet = Keypair.fromSecretKey(bs58.decode(process.env.PRIVATE_KEY || ''));\n \n # .env\nPRIVATE_KEY=''\n \n To set up a development wallet via a wallet generated via  Solana CLI , you can use the following script. \n import { Keypair } from '@solana/web3.js';\nimport fs from 'fs';\n\nconst privateKeyArray = JSON.parse(fs.readFileSync('/Path/To/.config/solana/id.json', 'utf8').trim());\nconst wallet = Keypair.fromSecretKey(new Uint8Array(privateKeyArray));\n \n \n Create Transaction \n This endpoint helps you create a few key components to launch your token on Studio. \n \n transaction : A base64-encoded unsigned transaction. \n mint : The mint of the token that is being created. \n imagePresignedUrl : A  PUT  request endpoint to upload your token image. \n metadataPresignedUrl : A  PUT  request endpoint to upload your token metadata. \n imageUrl : The token's static image url to be used in the metadata. \n \n :::tip Presets\nOn https://jup.ag/studio, you can find a few different presets to get you started. \n \n     \n         \n             \n                 Meme \n             \n         \n     \n**Great for memes, similar profile to traditional meme launches.**\n- People begin buying your token at 16K Market Cap (MC) in USDC.\n- It graduates to a Meteora pool at 69K MC.\n- Your pool raises ~17.94K USDC before graduation.\n buildCurveByMarketCapParam: {\n    quoteMint: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    initialMarketCap: 16000,\n    migrationMarketCap: 69000,\n    tokenQuoteDecimal: 6,\n    lockedVestingParam: {\n        totalLockedVestingAmount: 0,\n        cliffUnlockAmount: 0,\n        numberOfVestingPeriod: 0,\n        totalVestingDuration: 0,\n        cliffDurationFromMigrationTime: 0,\n    },\n},\nantiSniping: false,\nfee: {\n    feeBps: 100,\n},\nisLpLocked: true,\ntokenName: '',\ntokenSymbol: '',\ntokenImageContentType: 'image/jpeg',\ncreator: wallet.publicKey.toBase58(),\n \n \n \n     \n         \n             \n                 Indie \n             \n         \n     \n**For projects ready to take it up a notch. More capital required to bond, but you'll have deeper liquidity and more LP fees when you graduate.**\n- People begin buying your token at 32k Market Cap (MC) in USDC.\n- It graduates to a Meteora pool at 240k MC.\n- Your pool raises ~57.78K USDC before graduation.\n- 10% of total supply will be vested daily over 12 months.\n buildCurveByMarketCapParam: {\n    quoteMint: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    initialMarketCap: 32000,\n    migrationMarketCap: 240000,\n    tokenQuoteDecimal: 6,\n    lockedVestingParam: {\n        totalLockedVestingAmount: 100000000,\n        cliffUnlockAmount: 0,\n        numberOfVestingPeriod: 365,\n        totalVestingDuration: 31536000,\n        cliffDurationFromMigrationTime: 0,\n    },\n},\nantiSniping: true,\nfee: {\n    feeBps: 100,\n},\nisLpLocked: true,\ntokenName: '',\ntokenSymbol: '',\ntokenImageContentType: 'image/jpeg',\ncreator: wallet.publicKey.toBase58(),\n \n \n \n     \n         \n             \n                 Custom \n             \n         \n     \nJust pass in the parameters you need!\n \n:::\n const createTransaction = await (\n    await fetch (\n      'https://lite-api.jup.ag/studio/v1/dbc-pool/create-tx', \n      {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            buildCurveByMarketCapParam: {\n                quoteMint: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v', // or SOL or JUP\n                initialMarketCap: 16000, // This means 16_000 USDC\n                migrationMarketCap: 69000, // This means 69_000 USDC\n                tokenQuoteDecimal: 6,\n                lockedVestingParam: {\n                    totalLockedVestingAmount: 0,\n                    cliffUnlockAmount: 0,\n                    numberOfVestingPeriod: 0,\n                    totalVestingDuration: 0,\n                    cliffDurationFromMigrationTime: 0,\n                },\n            },\n            antiSniping: true,\n            fee: {\n                feeBps: 100,\n            },\n            isLpLocked: true,\n            tokenName: '',\n            tokenSymbol: '',\n            tokenImageContentType: 'image/jpeg',\n            creator: wallet.publicKey.toBase58(),\n        }, null, 2)\n    })\n).json();\n \n Token Metadata \n The following 2 steps, are to upload your token image and metadata to the  static URL , which will be the URI in the onchain metadata of your token. \n Example \n \n URI/ Off-chain Metadata:  https://static-create.jup.ag/metadata/{mint}.json \n Image:  https://static-create.jup.ag/images/{mint} \n \n You can refer to this to understand Token Metadata on Solana: https://developers.metaplex.com/token-metadata \n Upload Image \n From the response of the  create-tx  endpoint, we will need the  imagePresignedUrl  to make a  PUT  request  to the url provided, in order to upload the token image. \n const imageResponse = await fetch(createTransaction.imagePresignedUrl, {\n    method: 'PUT',\n    headers: {\n        'Content-Type': 'image/jpeg', // Adjust based on the image type passed in previously\n    },\n    body: fs.readFileSync('./token.jpeg'), // Assuming the image file is located in the same folder\n});\n \n Upload Metadata \n From the response of the  create-tx  endpoint, we will need the  metadataPresignedUrl  to make a  PUT  request  to the url provided, in order to upload the token metadata. \n const metadataResponse = await fetch(createTransaction.metadataPresignedUrl, {\n    method: 'PUT',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        name: '',\n        symbol: '',\n        description: '',\n        image: createTransaction.imageUrl,\n        website: '',\n        twitter: '',\n        telegram: '',\n    }, null, 2),\n});\n \n Submit Transaction \n After you have uploaded your token image and token metadata, you can proceed to signing and making a post request to the  submit  endpoint - this will allow Jupiter Studio to complete the transaction and submit it to the network on your behalf. \n :::note \n \n Do note that the endpoint expects the  requestBody 's  content  to be in  multipart/form-data  format . \n Ensure the file types and size of the image file is manageable.\n::: \n \n :::note\nThe  content  and  headerImage  refers to the Studio dedicated page's token description and header image of the page, they are not on-chain metadata. This is meant for you to customize the Studio dedicated page as you wish - to include lore, story or just a nice looking banner! \n The  content  and  headerImage  are stored off-chain for our frontend to ingest and display. \n Do not confuse this with the uploading of token metadata, they are done separately. \n::: \n import { VersionedTransaction } from '@solana/web3.js';\nimport fs from 'fs';\n\nconst transaction = VersionedTransaction.deserialize(Buffer.from(createTransaction.transaction, 'base64'));\ntransaction.sign([wallet]);\nconst signedTransaction = Buffer.from(transaction.serialize()).toString('base64');\n\nconst formData = new FormData();\nformData.append('transaction', signedTransaction);\nformData.append('owner', wallet.publicKey.toBase58());\nformData.append('content', '');\nformData.append(\n    'headerImage',\n    new File(\n        [fs.readFileSync('/Path/to/header.jpeg')],\n        'header.jpeg',\n        { type: 'image/jpeg' },\n    )\n);\n\nconst result = await (\n    await fetch (\n      'https://lite-api.jup.ag/studio/v1/dbc-pool/submit', \n      {\n        method: 'POST',\n        body: formData,\n    })\n).json();",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/999-studio-api/1-create-token.md",
  "extracted_at": "2025-09-03T01:39:45.732713Z"
}
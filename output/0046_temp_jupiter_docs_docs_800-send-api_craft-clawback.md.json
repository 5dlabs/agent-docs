{
  "url": "file://temp_jupiter_docs/docs/800-send-api/craft-clawback.md",
  "content": "sidebar_label: \"Craft Clawback (Beta)\"\ndescription: \"Use the Jupiter Send API to gift, pay, or onboard anyone in seconds.\"\ntitle: \"Craft Clawback (Beta)\" \n\n     Craft Clawback (Beta) \n     \n\n :::note \n \n Lite URL:  https://lite-api.jup.ag/send/v1 \n Pro URL:  https://api.jup.ag/send/v1 \n \n To upgrade to Pro or understand our rate limiting, please refer to this section. \n \n API Key Setup \n API Rate Limit \n::: \n \n Overview \n \n Load invite code. \n Load public key from invite. \n Find the  Program Derived Address (PDA)  of the invite.\n \n Uses  \"invite\"  and the public key of recipient at seed. \n \n \n Post request to get Clawback transaction. \n Sign with sender keypair, then send transaction and wait for confirmation. \n \n :::note\n Please ensure that you have set up the prerequisites .\n::: \n \n     \n        Full Code Snippet\n     \n import { invite_code_to_priv_key } from \"./utils.js\";\nimport {\n  Connection,\n  Keypair,\n  PublicKey,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport fs from \"fs\";\n\nconst connection = new Connection('insert-rpc');\nconst senderPrivateKey = JSON.parse(fs.readFileSync('/Path/to/sender/id.json', 'utf8').trim());\nconst sender = Keypair.fromSecretKey(new Uint8Array(senderPrivateKey));\nprocess.loadEnvFile('.env');\n\n// STEP 1: Load invite code\nconst invite_code = process.env.INVITE_CODE;\n\n// STEP 2: Load the public key from the invite code\nconst secret_key = invite_code_to_priv_key(invite_code);\nconst pubkey = Keypair.fromSecretKey(secret_key).publicKey;\n\n// STEP 3: Find the Program Derived Address (PDA) for the invite\n// Uses `\"invite\"` as seed + the public key\n// PDAs are deterministic addresses owned by the program\nconst invite_pda = PublicKey.findProgramAddressSync(\n    [Buffer.from(\"invite\"), pubkey.toBuffer()],\n    new PublicKey(\"inv1tEtSwRMtM44tbvJGNiTxMvDfPVnX9StyqXfDfks\")\n  )[0];\n\n// STEP 4: Post request for a Clawback transaction\nconst craftClawbackTransaction = await (\n    await fetch ('https://lite-api.jup.ag/send/v1/craft-clawback', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            invitePDA: invite_pda.toBase58(),\n            sender: sender.publicKey.toBase58(),\n        }, null, 2)\n    })\n).json();\n\n// STEP 5: Use sender keypair to sign and send to network\nconst transaction = VersionedTransaction.deserialize(Buffer.from(craftClawbackTransaction.tx, 'base64'));\ntransaction.sign([sender]); // SIGN with SENDER\nconst transactionBinary = transaction.serialize();\nconst blockhashInfo = await connection.getLatestBlockhashAndContext({ commitment: \"confirmed\" });\n\nconst signature = await connection.sendRawTransaction(transactionBinary, {\n  maxRetries: 0,\n  skipPreflight: true,\n});\n\n// Log the signature immediately after sending, before confirmation\nconsole.log(`Transaction sent: https://solscan.io/tx/${signature}`);\n  \ntry {\n  const confirmation = await connection.confirmTransaction({\n    signature,\n    blockhash: blockhashInfo.value.blockhash,\n    lastValidBlockHeight: blockhashInfo.value.lastValidBlockHeight,\n  }, \"confirmed\");\n\n  if (confirmation.value.err) {\n    console.error(`Transaction failed: ${JSON.stringify(confirmation.value.err)}`);\n    console.log(`Examine the failed transaction: https://solscan.io/tx/${signature}`);\n  } else {\n    console.log(`Transaction successful: https://solscan.io/tx/${signature}`);\n  }\n} catch (error) {\n  console.error(`Error confirming transaction: ${error}`);\n  console.log(`Examine the transaction status: https://solscan.io/tx/${signature}`);\n}\n \n \n Imports \n import { invite_code_to_priv_key } from \"./utils.js\";\nimport {\n  Connection,\n  Keypair,\n  PublicKey,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport fs from \"fs\";\n\nconst connection = new Connection('insert-rpc');\nconst senderPrivateKey = JSON.parse(fs.readFileSync('/Path/to/sender/id.json', 'utf8').trim());\nconst sender = Keypair.fromSecretKey(new Uint8Array(senderPrivateKey));\nprocess.loadEnvFile('.env');\n \n Invite Code and Public Key \n // STEP 1: Load invite code\nconst invite_code = process.env.INVITE_CODE;\n\n// STEP 2: Load the public key from the invite code\nconst secret_key = invite_code_to_priv_key(invite_code); // Follow the utils.js guide\nconst pubkey = Keypair.fromSecretKey(secret_key).publicKey;\n \n Invite PDA \n // STEP 3: Find the Program Derived Address (PDA) for the invite\n// Uses `\"invite\"` as seed + the public key\n// PDAs are deterministic addresses owned by the program\nconst invite_pda = PublicKey.findProgramAddressSync(\n    [Buffer.from(\"invite\"), pubkey.toBuffer()],\n    new PublicKey(\"inv1tEtSwRMtM44tbvJGNiTxMvDfPVnX9StyqXfDfks\")\n  )[0];\n \n Craft Clawback \n :::note\nThe clawback will return the full amount including leftover transaction fees and/or rent back to the sender.\n::: \n // STEP 4: Post request for a Clawback transaction\nconst craftClawbackTransaction = await (\n    await fetch ('https://lite-api.jup.ag/send/v1/craft-clawback', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            invitePDA: invite_pda.toBase58(),\n            sender: sender.publicKey.toBase58(),\n        }, null, 2)\n    })\n).json();",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/800-send-api/craft-clawback.md",
  "extracted_at": "2025-09-03T01:39:45.704373Z"
}
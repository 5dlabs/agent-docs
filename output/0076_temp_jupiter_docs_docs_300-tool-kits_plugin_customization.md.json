{
  "url": "file://temp_jupiter_docs/docs/300-tool-kits/plugin/customization.md",
  "content": "sidebar_label: \"Customizing Plugin\"\ndescription: \"Learn how to customize Jupiter Plugin's appearance and behavior.\"\ntitle: \"Customizing Plugin\" \n\n     Customizing Plugin \n     \n\n Try out the  Plugin Playground  to experience the full swap features and see the different customization options with code snippets. \n For the full customization options, you can refer to the  repository . \n If you are using TypeScript, you can use the type declaration file to get the full type definitions for the Plugin. \n \n   \n    Full TypeScript Declaration\n   \n declare global {\n    interface Window {\n        Jupiter: JupiterPlugin;\n    }\n}\n\nexport type WidgetPosition = 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right';\nexport type WidgetSize = 'sm' | 'default';\nexport type SwapMode = \"ExactInOrOut\" | \"ExactIn\" | \"ExactOut\";\nexport type DEFAULT_EXPLORER = 'Solana Explorer' | 'Solscan' | 'Solana Beach' | 'SolanaFM';\n\nexport interface FormProps {\n    swapMode?: SwapMode;\n    initialAmount?: string;\n    initialInputMint?: string;\n    initialOutputMint?: string;\n    fixedAmount?: boolean;\n    fixedMint?: string;\n    referralAccount?: string;\n    referralFee?: number;\n}\n\nexport interface IInit {\n    localStoragePrefix?: string;\n    formProps?: FormProps;\n    defaultExplorer?: DEFAULT_EXPLORER;\n    autoConnect?: boolean;\n    displayMode?: 'modal' | 'integrated' | 'widget';\n    integratedTargetId?: string;\n    widgetStyle?: {\n        position?: WidgetPosition;\n        size?: WidgetSize;\n    };\n    containerStyles?: CSSProperties;\n    containerClassName?: string;\n    enableWalletPassthrough?: boolean;\n    passthroughWalletContextState?: WalletContextState;\n    onRequestConnectWallet?: () => void | Promise<void>;\n    onSwapError?: ({\n        error,\n        quoteResponseMeta,\n    }: {\n        error?: TransactionError;\n        quoteResponseMeta: QuoteResponse | null;\n    }) => void;\n    onSuccess?: ({\n        txid,\n        swapResult,\n        quoteResponseMeta,\n    }: {\n        txid: string;\n        swapResult: SwapResult;\n        quoteResponseMeta: QuoteResponse | null;\n    }) => void;\n    onFormUpdate?: (form: IForm) => void;\n    onScreenUpdate?: (screen: IScreen) => void;\n}\n\nexport interface JupiterPlugin {\n    _instance: JSX.Element | null;\n    init: (props: IInit) => void;\n    resume: () => void;\n    close: () => void;\n    root: Root | null;\n    enableWalletPassthrough: boolean;\n    onRequestConnectWallet: IInit['onRequestConnectWallet'];\n    store: ReturnType<typeof createStore>;\n    syncProps: (props: { passthroughWalletContextState?: IInit['passthroughWalletContextState'] }) => void;\n    onSwapError: IInit['onSwapError'];\n    onSuccess: IInit['onSuccess'];\n    onFormUpdate: IInit['onFormUpdate'];\n    onScreenUpdate: IInit['onScreenUpdate'];\n    localStoragePrefix: string;\n}\n\nexport { };\n \n \n Display Modes \n Jupiter Plugin offers three distinct display modes to suit different use cases: \n 1. Integrated Mode \n The integrated mode embeds the swap form directly into your application's layout. This is ideal for creating a seamless swap experience within your dApp. \n {\n  displayMode: \"integrated\";\n  integratedTargetId: string; // Required: ID of the container element\n  containerStyles?: {\n    width?: string;\n    height?: string;\n    borderRadius?: string;\n    overflow?: string;\n  };\n  containerClassName?: string\n}\n \n 2. Widget Mode \n The widget mode creates a floating swap form that can be positioned in different corners of the screen. Perfect for quick access to swaps without taking up too much space. \n {\n  displayMode: \"widget\";\n  widgetStyle?: {\n    position?: \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\";\n    size?: \"sm\" | \"default\";\n  };\n}\n \n 3. Modal Mode \n The modal mode displays the swap form in a popup overlay. This is useful when you want to keep the swap form hidden until needed. \n {\n  displayMode: \"modal\";\n}\n \n Form Props Configuration \n The  formProps  object allows you to customize the initial state and behavior of the swap form! This can be useful for use cases like fixed token swaps for memecoin communities or fixed amount payments. \n {\n  displayMode: \"modal\";\n  formProps?: {\n    swapMode?: SwapMode; // Set the swap mode to \"ExactIn\", \"ExactOut\", or default to \"ExactInOrOut\"\n\n    initialAmount?: string; // Pre-fill the swap amount (e.g. \"100\")\n    initialInputMint?: string; // Pre-select the input token by its mint address\n    initialOutputMint?: string; // Pre-select the output token by its mint address\n\n    fixedAmount?: boolean; // When true, users cannot change the swap amount\n    fixedMint?: string; // Lock one side of the swap to a specific token by its mint address\n\n    referralAccount?: string; // Set the referral account for the swap\n    referralFee?: number; // Set the referral fee for the swap\n  }\n}\n \n Wallet Integration \n Jupiter Plugin supports third-party wallet integration through the  enableWalletPassthrough  prop. This allows your application to pass through an existing wallet provider's connection in your application to Plugin. If you do not have an existing wallet provider, Plugin will provide a wallet adapter and connection - powered by  Unified Wallet Kit . \n {\n  // When true, wallet connection are handled by your dApp,\n  // and use `syncProps()` to syncronise wallet state with Plugin.\n  enableWalletPassthrough?: boolean;\n\n  // Optional, if wallet state is ready, \n  // you can pass it in here, or just use `syncProps()`\n  passthroughWalletContextState?: WalletContextState;\n  \n  // When enableWalletPassthrough is true, this allows Plugin \n  // to callback your app's wallet connection flow\n  onRequestConnectWallet?: () => void | Promise<void>;\n}\n \n Event Handling \n Jupiter Plugin provides event handlers to track swap operations: \n {\n  onSuccess: ({ txid, swapResult, quoteResponseMeta }) => {\n    // Handle successful swap\n    console.log(\"Swap successful:\", txid);\n  };\n  onSwapError: ({ error, quoteResponseMeta }) => {\n    // Handle swap errors\n    console.error(\"Swap failed:\", error);\n  }\n}\n \n Branding \n Jupiter Plugin supports branding through the  branding  prop. This allows you to customize the Plugin's logo and name to include your own branding. \n {\n  branding?: {\n    logoUri?: string;\n    name?: string;\n  };\n}\n \n Color Theme \n Jupiter Plugin supports a simplified way to customize the color theme. This allows you to match the appearance of the Plugin to your brand. \n /* In your global CSS file */\n:root {\n  --jupiter-plugin-primary: 199, 242, 132;\n  --jupiter-plugin-background: 0, 0, 0;\n  --jupiter-plugin-primaryText: 232, 249, 255;\n  --jupiter-plugin-warning: 251, 191, 36;\n  --jupiter-plugin-interactive: 33, 42, 54;\n  --jupiter-plugin-module: 16, 23, 31;\n}\n \n Examples \n Fixed SOL Swap \n window.Jupiter.init({\n  displayMode: \"integrated\";\n  integratedTargetId: \"jupiter-plugin\";\n  formProps: {\n    initialInputMint: \"So11111111111111111111111111111111111111112\"; // SOL\n    initialOutputMint: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"; // USDC\n    fixedMint: \"So11111111111111111111111111111111111111112\";\n  };\n});\n \n Payment Integration \n window.Jupiter.init({\n  displayMode: \"modal\";\n  formProps: {\n    swapMode: \"ExactOut\";\n    initialAmount: \"10\";\n    fixedAmount: true;\n    initialOutputMint: \"YOUR_TOKEN_MINT\";\n    fixedMint: \"YOUR_TOKEN_MINT\";\n  };\n});\n \n Floating Widget \n window.Jupiter.init({\n  displayMode: \"widget\";\n  widgetStyle: {\n    position: \"bottom-right\";\n    size: \"sm\";\n  };\n});",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/300-tool-kits/plugin/customization.md",
  "extracted_at": "2025-09-03T01:39:45.815416Z"
}
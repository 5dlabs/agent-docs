{
  "url": "file://temp_jupiter_docs/docs/103-recurring-api/1-create-order.md",
  "content": "description: \"Use the Jupiter Recurring API to create orders.\"\ntitle: \"Create Order\" \n\n     Create Order \n     \n\n :::note \n \n Lite URL:  https://lite-api.jup.ag/recurring/v1/createOrder \n Pro URL:  https://api.jup.ag/recurring/v1/createOrder \n \n To upgrade to Pro or understand our rate limiting, please refer to this section. \n \n API Key Setup \n API Rate Limit \n::: \n \n Create Order \n This is a POST request to  /createOrder  endpoint, where you pass in the necessary parameters and our backend will create the transaction for you to sign and send to the network seamlessly. \n :::info\nThe Recurring API supports both Time-based and Price-based (DEPRECATED) strategies. \n The  createOrder  endpoint is used to create both types of orders based on the parameters you pass in.\n::: \n Time-based Order \n Pass in the  time  object in the  params  field. \n :::note\nSome notes to help you understand the parameters. \n \n The amount to be spent per cycle is calculated based on your input amount and the total number of orders. \n \n Amount to be spent per cycle = inAmount / numberOfOrders\ne.g. 1_000 USDC / 10 orders = 100 USDC per order\n \n \n The total time to complete is definite as the amount to be spent per cycle is fixed. \n \n Total time to complete = numberOfOrders * interval\ne.g. 10 orders * 86_400 seconds = 864_000 seconds = 10 days\n \n ::: \n const createOrderResponse = await (\n    await fetch('https://lite-api.jup.ag/recurring/v1/createOrder', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            user: wallet.publicKey,\n            inputMint: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n            outputMint: \"So11111111111111111111111111111111111111112\",\n            params: {\n                time: {\n                    inAmount: 104000000, // Raw amount of input token to deposit now (before decimals)\n                    numberOfOrders: 2, // Total number of orders to execute\n                    interval: 86400, // Time between each order in unix seconds\n                    minPrice: null, // Minimum price or null\n                    maxPrice: null, // Maximum price or null\n                    startAt: null, // Unix timestamp of start time or null - null starts immediately\n                },\n            },\n        }),\n    })\n).json();\n \n Price-based Order (DEPRECATED) \n Pass in the  price  object in the  params  field. \n :::caution\nPrice-based orders via API is deprecated.\n::: \n :::note\nSome notes to help you understand the parameters. \n \n Price-based orders are opened indefinitely until the user closes them. \n Once low on funds, the order will not be closed and can continue to execute if the user deposits more into the order. Refer to the  Deposit Price Order  endpoint to deposit more funds into the order. \n Alternatively, the user can also withdraw funds from the order without closing it. Refer to the  Withdraw Price Order  endpoint to withdraw funds from the order. \n Do note that the price-based orders auto withdraws the output tokens to the user's wallet every time the order is executed. \n The total time to use up all funds is not definite as the amount to be spent per cycle is variable based on the USDC value of the input token.\n::: \n \n const createOrderResponse = await (\n    await fetch('https://lite-api.jup.ag/recurring/v1/createOrder', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            user: wallet.publicKey,\n            inputMint: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n            outputMint: \"So11111111111111111111111111111111111111112\",\n            params: {\n                price: {\n                    depositAmount: 110000000, // Raw amount of input token to deposit now (before decimals)\n                    incrementUsdcValue: 10000000, // Raw amount of USDC to increment per cycle (before decimals)\n                    interval: 86400, // Time between each cycle in unix seconds\n                    startAt: null, // Unix timestamp of start time or null - null starts immediately\n                },\n            },\n        }),\n    })\n).json();\n \n Now that you have the order transaction, you can sign and send to the network. There are 2 methods, after signing the transaction, you can either send it to the network yourself or use the Recurring API's  /execute  endpoint to do it for you. \n Let's execute the order ! \n Create Order Response \n The response from the  createOrder  endpoint is as follows. \n :::info\nDo note that both time-based and price-based orders will return the same response structure.\n::: \n Successful Example Response \n {\n  \"requestId\": \"1d1f3586-eb72-4337-8c7e-1bbb9870ee4b\",\n  \"transaction\": \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAgNRL7cu4ZNuxh1wI9W7GVURyr3A06dH348HDpIQzcAJ4o8bJlCl2Wc6MzpcvkV0INcJ7u23GV89soNJ/8i5QPLuk+NOvCjbAbTzOyNoSWuhO5fYq+hNGrGQ2JdDy82Gw0bv28tkzlck1LrvR2ACB/vAL7AIssgVYeCOBbHfYskycnT/icRrhr4nbjk0DzDqAkM4ntju8NXHrILEpE0TUKNKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwZGb+UhFzL/7K26csOb57yM5bvF9xJrLEObOkAAAAAGm4hX/quBhPtof2NGGMA12sQ53BrrO1WYoPAAAAAAAQbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCpjJclj04kifG7PRApFI4NgwtaE5na/xCEBI572Nvp+FmwdagGY3nKb+NwN/8MKNVUpuTWNtnoUYz+brrpP1I2/rUn1F1kDj7BX2FdWw4jpUqWuD8Lggv3BjXyQ0rGQMwExvp6877brTo9ZfNqq8l0MbG75MLS9uDkfKYCA0UvXWG7njQ5EK9zaEM059+IQanso4m+YzpvFchLCtBxOCdR5QcGAAUCGSwAAAYACQNADQMAAAAAAAkGAAMABwUIAQEFAgADDAIAAAAAwusLAAAAAAgBAwERCw0EAAAHDAMBAgUICQoLK453K22iNAuxgF7IZwAAAAAAwusLAAAAAADh9QUAAAAALAEAAAAAAAAAAAAIBAMAAAABCQ==\"\n}\n \n Failed Example Response \n {\n  \"code\": 400,\n  \"error\": \"Order is valued at 2.99 USDC, minimum is 100.00 USDC\",\n  \"status\": \"Bad Request\"\n}",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/103-recurring-api/1-create-order.md",
  "extracted_at": "2025-09-03T01:39:45.785062Z"
}
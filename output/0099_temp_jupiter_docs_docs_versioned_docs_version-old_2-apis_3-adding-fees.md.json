{
  "url": "file://temp_jupiter_docs/docs_versioned_docs/version-old/2-apis/3-adding-fees.md",
  "content": "sidebar_label: Adding Fees\ndescription: Enhance your platform revenue by adding customizable fees to Jupiter swap using the Jupiter API. Learn how to implement it effortlessly!\ntitle: Adding Your Own Fee To Jupiter Swap \n\n     Add Fees to Jupiter API: Enhance Your Platform Revenue Seamlessly \n     \n\n \n{`\n  .api-method-box {\n    border-radius: 8px;\n    margin: 16px 0;\n    display: inline;\n    padding: 4px;\n    font-weight: 700;\n    margin-right: 8px;\n    font-size: 12px;\n    color: white\n  }\n\n.get {\n  border: 1px solid #018847;\n  background-color: #018847 !important;\n}\n\n.post {\n  border: 1px solid #eaba0c;\n  background-color: #eaba0c !important;\n}\n\n  .api-method-path {\n    font-size: 14px;\n    display: inline;\n  }\n`} \n \n :::warning No need to use referral program\nAs of January 2025, you do not need to use the Referral program to add fees to your Jupiter Swap. \n You can simply pass in  any  token account to the  feeAccount  parameter in  /swap  endpoint to indicate which mint and token account to send the fees to. (You still need to add  platformFeeBps  in  /quote ) \n \n For Exact In, both input or output mint of the swap can be used to take fees. \n For Exact Out, only the input mint can be used to take fees. \n It does not support Token2022.\n::: \n \n The Referral Program is an open source program by Jupiter to provide referral fees for integrators who are integrating Jupiter Swap and Jupiter Limit Order. You can check out the code  here  to gain a better understanding of how it works. \n By default, there are no protocol fees on Jupiter. Integrators have the option to introduce a platform fee on swaps. The platform fee is provided in basis points, e.g.  20 bps  for  0.2%  of the token input or output. If a platform fee is set by an integrator, Jupiter  will take 2.5%  of the platform fee charged by the integrators. It doesn't support Token2022 tokens. \n Usage \n Jupiter API \n 1. Obtain a referral account \n Go to the  referral dashboard  to create your referral account. After creating your referral account, remember to find your  Referral Key  on the page. This is your referral account public key. You'll need this to gather platform fees. \n 2. Set your referral fee \n Setting your referral fee with the Jupiter API is simple. You just add in the  platformFeeBps  parameter to the  GET /quote  endpoint: \n \n   \n     \n       GET \n       https://quote-api.jup.ag/v6/quote \n     \n   \n Parameters in use in the below code example: \n \n inputMint : The mint address of the input token. \n outputMint : The mint address of the output token. \n amount : The amount of input tokens to be swapped. \n slippage : The maximum allowable slippage for the swap. \n platformFeeBps : Basis points of the fee to be added. \n \n curl -G \"https://quote-api.jup.ag/v6/quote\" \\\n     --data-urlencode \"inputMint=So11111111111111111111111111111111111111112\" \\\n     --data-urlencode \"outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\" \\\n     --data-urlencode \"amount=100000000\" \\\n     --data-urlencode \"slippageBps=50\" \\\n     --data-urlencode \"platformFeeBps=20\"\n \n \n // Function to swap SOL to USDC with input 0.1 SOL and 0.5% slippage\nasync function getQuote() {\n  try {\n    // Create a new URL object for the quote API endpoint\n    const url = new URL(\"https://quote-api.jup.ag/v6/quote\");\n\n    // Append query parameters to the URL\n    // inputMint: The mint address of the input token (SOL)\n    url.searchParams.append(\n      \"inputMint\",\n      \"So11111111111111111111111111111111111111112\"\n    );\n\n    // outputMint: The mint address of the output token (USDC)\n    url.searchParams.append(\n      \"outputMint\",\n      \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\n    );\n\n    // amount: The amount of input tokens to be swapped (0.1 SOL in lamports, where 1 SOL = 1,000,000,000 lamports)\n    url.searchParams.append(\"amount\", 100000000);\n\n    // slippageBps: The maximum allowable slippage for the swap (0.5% expressed in basis points)\n    url.searchParams.append(\"slippageBps\", 50);\n\n    // platformFeeBps: The platform fee to be added (20 basis points)\n    url.searchParams.append(\"platformFeeBps\", 20);\n\n    // Perform the fetch request to the constructed URL\n    const response = await fetch(url.toString());\n\n    // Check if the response is not OK (status code is not in the range 200-299)\n    if (!response.ok) {\n      // Throw an error with the status text from the response\n      throw new Error(`Error fetching quote: ${response.statusText}`);\n    }\n\n    // Parse the response body as JSON\n    const quoteResponse = await response.json();\n\n    // Log the parsed response to the console\n    console.log({ quoteResponse });\n  } catch (error) {\n    // Catch any errors that occur during the fetch request or JSON parsing\n    // Log the error to the console\n    console.error(\"Failed to get quote:\", error);\n  }\n}\n\n// Call the function to get the quote\ngetQuote();\n \n 3. Set your fee token account \n On the  POST /swap  endpoint, remember to add your  feeAccount  parameter. \n \n   \n     \n       POST \n       https://station.jup.ag/v6/swap \n     \n   \n Parameters in use in the below code example: \n \n quoteResponse : The response object from the  /quote  API. \n userPublicKey : The public key of the user initiating the swap. \n wrapAndUnwrapSol : Auto wrap and unwrap SOL. Default is true. \n feeAccount : The fee account associated with the swap. \n platformFeeBps : Basis points of the fee to be added. \n \n # Example being constructed in code below\ncurl -X POST \"https://quote-api.jup.ag/v6/swap\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"quoteResponse\": { /* The quote response from the /quote API */ },\n           \"userPublicKey\": \"YourUserPublicKey\",\n           \"wrapAndUnwrapSol\": true,\n           \"feeAccount\": \"YourFeeAccountPublicKey\"\n         }'\n \n \n // Function to find the fee account and get serialized transactions for the swap\nasync function getFeeAccountAndSwapTransaction(\n  referralAccountPubkey,\n  mint,\n  quoteResponse,\n  wallet\n) {\n  try {\n    // Find the fee account program address synchronously\n    // Parameters:\n    // - Buffer.from(\"referral_ata\"): A buffer containing the string \"referral_ata\"\n    // - referralAccountPubkey.toBuffer(): The buffer representation of the referral account public key\n    // - mint.toBuffer(): The buffer representation of the token mint\n    // - new PublicKey(\"REFER4ZgmyYx9c6He5XfaTMiGfdLwRnkV4RPp9t9iF3\"): The public key of the Referral Program\n    const [feeAccount] = await PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(\"referral_ata\"),\n        referralAccountPubkey.toBuffer(),\n        mint.toBuffer(),\n      ],\n      new PublicKey(\"REFER4ZgmyYx9c6He5XfaTMiGfdLwRnkV4RPp9t9iF3\")\n    );\n\n    // Construct the request body for the swap API\n    const requestBody = {\n      quoteResponse, // The quote response from the /quote API\n      userPublicKey: wallet.publicKey.toString(), // The user's public key\n      wrapAndUnwrapSol: true, // Auto wrap and unwrap SOL (default is true)\n      feeAccount, // The fee account obtained from findProgramAddressSync\n    };\n\n    // Perform the fetch request to the swap API\n    const response = await fetch(\"https://quote-api.jup.ag/v6/swap\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(requestBody), // Convert the request body to a JSON string\n    });\n\n    // Check if the response is not OK (status code is not in the range 200-299)\n    if (!response.ok) {\n      // Throw an error with the status text from the response\n      throw new Error(`Error performing swap: ${response.statusText}`);\n    }\n\n    // Parse the response body as JSON to get the swap transaction\n    const { swapTransaction } = await response.json();\n\n    // Log the swap transaction to the console\n    console.log({ swapTransaction });\n\n    return swapTransaction; // Return the swap transaction\n  } catch (error) {\n    // Catch any errors that occur during the fetch request or JSON parsing\n    // Log the error to the console\n    console.error(\"Failed to get fee account and swap transaction:\", error);\n  }\n}\n\n// Example usage of the function\n// Assuming you have defined referralAccountPubkey, mint, quoteResponse, and wallet elsewhere\ngetFeeAccountAndSwapTransaction(\n  referralAccountPubkey,\n  mint,\n  quoteResponse,\n  wallet\n);\n \n :::note\nThe fee token account, it can either be the input mint or the output mint on the swap for ExactIn. For ExactOut, the fee is being taken as the same mint as the input mint. Also, make sure that the fee token account has been created. You can create the fee token account on the referral dashboard. It doesn't support Token2022 tokens.\n::: \n Referral Javascript SDK \n You can check out the Referral Javascript SDK  here . For a list of methods that you can use, check out the source code  here . \n There are also examples on how to use the SDK  here . \n :::note\nThe Jupiter Swap's project account for the Referral Program is  45ruCyfdRkWpRNGEqWzjCiXRHkZs8WXCLQ67Pnpye7Hp .\n:::",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs_versioned_docs/version-old/2-apis/3-adding-fees.md",
  "extracted_at": "2025-09-03T01:39:45.855332Z"
}
{
  "url": "file://temp_jupiter_docs/docs/101-ultra-api/5-add-fees-to-ultra.md",
  "content": "sidebar_label: \"Add Fees To Ultra\"\ndescription: \"Jupiter Ultra API allows you to add fees.\"\ntitle: \"Add Fees To Ultra\" \n\n     Add Fees To Ultra \n     \n\n In this guide, we will be walking through the steps to create the necessary accounts for adding fees to your Ultra transaction. \n Important Notes \n Note Description \n Referral Dashboard UI Use the  Referral Dashboard  to create referral accounts through a user-friendly interface. This is the recommended approach for most users before proceeding with the SDK setup below. \n Additional required accounts It is required to have a valid  referral account  and  referral token accounts  for the specific token mints. These accounts are initalized with the Referral Program under the  \"Jupiter Ultra\" Referral Project . \n Fee mint In the  /order  response, you will see the  feeMint  field which is the token mint we will collect the fees in for that particular order. Since Jupiter will always dictate which token mint to collect the fees in, you must ensure that you have the valid referral token account created for the specific fee mint. If it is not initialized, the order will still return and can be executed without your fees. This is to ensure success rates and the best experience with Jupiter Ultra. \n Jupiter fees By default, Jupiter Ultra incurs a 0.05% or 0.1% fee based on token mint. When you add a referral fee, Jupiter will take a flat 20% of your integrator fees, for example, if you plan to take 100bps, Jupiter will take 20bps from it. \n Integrator fees You can configure  referralFee  to be between 50bps to 255bps. The  /order  response will show the total fee in  feeBps  field which should be exactly what you specified in  referralFee . Do note that, the referral token account has to be created before calling  /order  because during the request, we will check if the token account is initialized before applying your referral fee (if it is not applied, we will only apply our default fees). \n Limitations Currently, we do not support fees for Token2022 tokens. Setting up the referral accounts and token accounts can only be done via the SDK (the scripts provided in this guide), and not via the Referral Dashboard. \n \n Step-by-step \n \n Install additional dependencies. \n Create  referralAccount . \n Create  referralTokenAccount  for each token mint. \n Add  referralAccount  and  referralFee  to Ultra  /order  endpoint. \n Sign and send the transaction via Ultra  /execute  endpoint. \n Verify transaction and fees. \n \n \n     \n        Full Code Example\n     \n```ts\nimport { ReferralProvider } from \"@jup-ag/referral-sdk\";\nimport { Connection, Keypair, PublicKey, sendAndConfirmTransaction, sendAndConfirmRawTransaction } from \"@solana/web3.js\";\nimport fs from 'fs';\n const connection = new Connection(\"https://api.mainnet-beta.solana.com\");\nconst privateKeyArray = JSON.parse(fs.readFileSync('/Path/to/.config/solana/id.json', 'utf8').trim());\nconst wallet = Keypair.fromSecretKey(new Uint8Array(privateKeyArray)); \n const provider = new ReferralProvider(connection);\nconst projectPubKey = new PublicKey('DkiqsTrw1u1bYFumumC7sCG2S8K25qc2vemJFHyW2wJc'); \n async function initReferralAccount() {\nconst transaction = await provider.initializeReferralAccountWithName({\npayerPubKey: wallet.publicKey,\npartnerPubKey: wallet.publicKey,\nprojectPubKey: projectPubKey,\nname: \"insert-name-here\",\n}); \n const referralAccount = await connection.getAccountInfo(\ntransaction.referralAccountPubKey,\n); \n if (!referralAccount) {\nconst signature = await sendAndConfirmTransaction(connection, transaction.tx, [wallet]);\nconsole.log('signature:',  https://solscan.io/tx/${signature} );\nconsole.log('created referralAccountPubkey:', transaction.referralAccountPubKey.toBase58());\n} else {\nconsole.log(\n referralAccount ${transaction.referralAccountPubKey.toBase58()} already exists ,\n);\n}\n} \n async function initReferralTokenAccount() {\nconst mint = new PublicKey(\"So11111111111111111111111111111111111111112\"); // the token mint you want to collect fees in \n const transaction = await provider.initializeReferralTokenAccountV2({\npayerPubKey: wallet.publicKey,\nreferralAccountPubKey: new PublicKey(\"insert-referral-account-pubkey-here\"), // you get this from the initReferralAccount function\nmint,\n}); \n const referralTokenAccount = await connection.getAccountInfo(\n  transaction.tokenAccount,\n);\n\nif (!referralTokenAccount) {\n  const signature = await sendAndConfirmTransaction(connection, transaction.tx, [wallet]);\n  console.log('signature:', `https://solscan.io/tx/${signature}`);\n  console.log('created referralTokenAccountPubKey:', transaction.tokenAccount.toBase58());\n  console.log('mint:', mint.toBase58());\n} else {\n  console.log(\n    `referralTokenAccount ${transaction.tokenAccount.toBase58()} for mint ${mint.toBase58()} already exists`,\n  );\n}\n \n } \n async function claimAllTokens() {\nconst transactions = await provider.claimAllV2({\npayerPubKey: wallet.publicKey,\nreferralAccountPubKey: new PublicKey(\"insert-referral-account-pubkey-here\"),\n}) \n // Send each claim transaction one by one.\nfor (const transaction of transactions) {\ntransaction.sign([wallet]); \n const signature = await sendAndConfirmRawTransaction(connection, transaction.serialize(), [wallet]);\nconsole.log('signature:', `https://solscan.io/tx/${signature}`);\n \n }\n} \n // initReferralAccount(); // you should only run this once\n// initReferralTokenAccount();\n// claimAllTokens(); \n </details>\n\n### Dependencies\n\n```bash\nnpm install @jup-ag/referral-sdk\nnpm install @solana/web3.js@1 # Using v1 of web3.js instead of v2\nnpm install bs58\nnpm install dotenv # if required for wallet setup\n \n \n     \n        RPC Connection and Wallet Setup\n     \n**Set up RPC Connection**\n :::note\nSolana provides a  default RPC endpoint . However, as your application grows, we recommend you to always use your own or provision a 3rd party providerâ€™s RPC endpoint such as  Helius  or  Triton .\n::: \n import { Connection } from \"@solana/web3.js\";\n\nconst connection = new Connection('https://api.mainnet-beta.solana.com');\n \n Set up Development Wallet \n :::note \n \n You can paste in your private key for testing purposes but this is not recommended for production applications. \n If you want to store your private key in the project directly, you can do it via a  .env  file.\n::: \n \n To set up a development wallet via  .env  file, you can use the following script. \n // index.js\nimport { Keypair } from '@solana/web3.js';\nimport dotenv from 'dotenv';\nrequire('dotenv').config();\n\nconst wallet = Keypair.fromSecretKey(bs58.decode(process.env.PRIVATE_KEY || ''));\n \n # .env\nPRIVATE_KEY=\"\"\n \n To set up a development wallet via a wallet generated via  Solana CLI , you can use the following script. \n import { Keypair } from '@solana/web3.js';\nimport fs from 'fs';\n\nconst privateKeyArray = JSON.parse(fs.readFileSync('/Path/To/.config/solana/id.json', 'utf8').trim());\nconst wallet = Keypair.fromSecretKey(new Uint8Array(privateKeyArray));\n \n \n Create  referralAccount \n \n You should only need to create the referral account once. \n After this step, you need to  create the referral token accounts for each token mint . \n \n import { ReferralProvider } from \"@jup-ag/referral-sdk\";\nimport { Connection, Keypair, PublicKey, sendAndConfirmTransaction } from \"@solana/web3.js\";\n\nconst connection = new Connection(\"https://api.mainnet-beta.solana.com\");\nconst privateKeyArray = JSON.parse(fs.readFileSync('/Path/to/.config/solana/id.json', 'utf8').trim());\nconst wallet = Keypair.fromSecretKey(new Uint8Array(privateKeyArray));\nconst provider = new ReferralProvider(connection);\nconst projectPubKey = new PublicKey('DkiqsTrw1u1bYFumumC7sCG2S8K25qc2vemJFHyW2wJc'); // Jupiter Ultra Referral Project\n\nasync function initReferralAccount() {\n  const transaction = await provider.initializeReferralAccountWithName({\n    payerPubKey: wallet.publicKey,\n    partnerPubKey: wallet.publicKey,\n    projectPubKey: projectPubKey,\n    name: \"insert-name-here\",\n  });\n\n  const referralAccount = await connection.getAccountInfo(\n    transaction.referralAccountPubKey,\n  );\n\n  if (!referralAccount) {\n    const signature = await sendAndConfirmTransaction(connection, transaction.tx, [wallet]);\n    console.log('signature:', `https://solscan.io/tx/${signature}`);\n    console.log('created referralAccountPubkey:', transaction.referralAccountPubKey.toBase58());\n  } else {\n    console.log(\n      `referralAccount ${transaction.referralAccountPubKey.toBase58()} already exists`,\n    );\n  }\n}\n \n Create  referralTokenAccount \n \n You need to  create the  referralAccount  first . \n You need to create a  referralTokenAccount  for each token mint you want to collect fees in. \n We don't recommend creating a token account for  every  token mint, as it costs rent and most tokens might not be valuable, instead created token accounts for top mints to begin with (you can always add more later). \n \n import { ReferralProvider } from \"@jup-ag/referral-sdk\";\nimport { Connection, Keypair, PublicKey, sendAndConfirmTransaction } from \"@solana/web3.js\";\n\nconst connection = new Connection(\"https://api.mainnet-beta.solana.com\");\nconst privateKeyArray = JSON.parse(fs.readFileSync('/Path/to/.config/solana/id.json', 'utf8').trim());\nconst wallet = Keypair.fromSecretKey(new Uint8Array(privateKeyArray));\nconst provider = new ReferralProvider(connection);\n\nasync function initReferralTokenAccount() {\n  const mint = new PublicKey(\"So11111111111111111111111111111111111111112\"); // the token mint you want to collect fees in\n  \n  const transaction = await provider.initializeReferralTokenAccountV2({\n    payerPubKey: wallet.publicKey,\n    referralAccountPubKey: new PublicKey(\"insert-referral-account-pubkey-here\"),\n    mint,\n  });\n  \n    const referralTokenAccount = await connection.getAccountInfo(\n      transaction.tokenAccount,\n    );\n  \n    if (!referralTokenAccount) {\n      const signature = await sendAndConfirmTransaction(connection, transaction.tx, [wallet]);\n      console.log('signature:', `https://solscan.io/tx/${signature}`);\n      console.log('created referralTokenAccountPubKey:', transaction.tokenAccount.toBase58());\n      console.log('mint:', mint.toBase58());\n    } else {\n      console.log(\n        `referralTokenAccount ${transaction.tokenAccount.toBase58()} for mint ${mint.toBase58()} already exists`,\n      );\n    }\n}\n \n Usage in Ultra \n \n After creating the necessary accounts, you can now add the  referralAccount  and  referralFee  to the Ultra  /order  endpoint. \n From the order response, you should see the  feeMint  field, which is the token mint we will collect the fees in for that particular order. \n From the order response, you should see the  feeBps  field, which is the total fee in bps, which should be exactly what you specified in  referralFee . \n Then, you can sign and send the transaction via the Ultra  /execute  endpoint. \n \n :::danger\nDo note that, during your request to  /order , we will check if the specific fee mint's referral token account is initialized. If it is not, the order will still return and can be executed without your fees. This is to ensure success rates and the best experience with Jupiter Ultra. \n Hence, please verify the transaction when testing with a new referral token account, and always create the referral token account before calling  /order .\n::: \n import { Keypair, VersionedTransaction } from \"@solana/web3.js\";\nimport fs from 'fs';\n\nconst privateKeyArray = JSON.parse(fs.readFileSync('/Path/to/.config/solana/id.json', 'utf8').trim());\nconst wallet = Keypair.fromSecretKey(new Uint8Array(privateKeyArray));\n\nconst orderResponse = await (\n  await fetch(\n      'https://lite-api.jup.ag/ultra/v1/order?' + \n      'inputMint=So11111111111111111111111111111111111111112&' +\n      'outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v&' +\n      'amount=100000000&' +\n      'taker=jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3&' +\n      'referralAccount=&' + // insert referral account public key here\n      'referralFee=50' // insert referral fee in basis points (bps)\n  )\n).json();\n\nconsole.log(JSON.stringify(orderResponse, null, 2));\n\nconst transactionBase64 = orderResponse.transaction // Extract the transaction from the order response\nconst transaction = VersionedTransaction.deserialize(Buffer.from(transactionBase64, 'base64')); // Deserialize the transaction\ntransaction.sign([wallet]); // Sign the transaction\nconst signedTransaction = Buffer.from(transaction.serialize()).toString('base64'); // Serialize the transaction to base64 format\n\nconst executeResponse = await (\n    await fetch('https://lite-api.jup.ag/ultra/v1/execute', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            signedTransaction: signedTransaction,\n            requestId: orderResponse.requestId,\n        }),\n    })\n).json();\n\nif (executeResponse.status === \"Success\") {\n    console.log('Swap successful:', JSON.stringify(executeResponse, null, 2));\n    console.log(`https://solscan.io/tx/${executeResponse.signature}`);\n} else {\n    console.error('Swap failed:', JSON.stringify(executeResponse, null, 2));\n    console.log(`https://solscan.io/tx/${executeResponse.signature}`);\n}\n \n Claim All Fees \n \n The  claimAllV2  method will return a list of transactions to claim all fees and are batched by 5 claims for each transaction. \n The code signs and sends the transactions one by one - you can also Jito Bundle to send multiple at once, if preferred. \n When claiming fees, the transaction will include the transfer of the fees to both your referral account and Jupiter's (20% of your integrator fees). \n \n import { ReferralProvider } from \"@jup-ag/referral-sdk\";\nimport { Connection, Keypair, PublicKey, sendAndConfirmRawTransaction } from \"@solana/web3.js\";\n\nconst connection = new Connection(\"https://api.mainnet-beta.solana.com\");\nconst privateKeyArray = JSON.parse(fs.readFileSync('/Path/to/.config/solana/id.json', 'utf8').trim());\nconst wallet = Keypair.fromSecretKey(new Uint8Array(privateKeyArray));\nconst provider = new ReferralProvider(connection);\n\nasync function claimAllTokens() {\n  const transactions = await provider.claimAllV2({\n    payerPubKey: wallet.publicKey,\n    referralAccountPubKey: new PublicKey(\"insert-referral-account-pubkey-here\"),\n  })\n\n  // Send each claim transaction one by one.\n  for (const transaction of transactions) {\n    transaction.sign([wallet]);\n\n    const signature = await sendAndConfirmRawTransaction(connection, transaction.serialize(), [wallet]);\n    console.log('signature:', `https://solscan.io/tx/${signature}`);\n  }\n}",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs/101-ultra-api/5-add-fees-to-ultra.md",
  "extracted_at": "2025-09-03T01:39:45.487490Z"
}
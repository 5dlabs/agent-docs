{
  "url": "file://temp_jupiter_docs/docs_versioned_docs/version-old/3-limit-order/2-limit-order-api.md",
  "content": "sidebar_label: Limit Order v2 API\ndescription: Limit Order v2 API reference list\ntitle: Limit Order v2 API\nslug: ./limit-order-api \n Create limit order \n Sends a POST request to the Jupiter Limit Order API to get the unsigned transactions needed to create an order. \n \n   \n     \n       POST \n       https://api.jup.ag/limit/v2/createOrder \n     \n   \n Parameters in use in the below code example: \n \n inputMint : The mint address of the input token (required). \n outputMint : The mint address of the output token (required). \n maker : The wallet address of the user who wants to create an order (required). \n payer : The wallet address of who is paying to open an order (usually  maker ) (required). \n makingAmount : Amount of input mint to sell (required). \n takingAmount : Amount of output mint to buy (required). \n expiredAt : Unix time in seconds that determines when an order should automatically close. \n feeBps : Amount of fee that the  referral  collects. (Requires  referral ). \n computeUnitPrice : Used to determine a transaction's prioritization fee. Defaults to  auto . \n referral : The public key where fees get sent to (Requires  feeBps ). \n inputTokenProgram : Defaults to  TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA \n outputTokenProgram : Defaults to  TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA \n wrapAndUnwrapSol : Defaults to  true , if either input or output mints are raw SOL \n \n Create limit order request body and response \n   type CreateOrder = {\n    inputMint: string;\n    outputMint: string;\n    maker: string;\n    payer: string;\n    params: {\n      makingAmount: string;\n      takingAmount: string;\n      // In unix seconds (e.g. Date.now()/1_000)\n      expiredAt?: string | undefined;\n      \n      // Requires `referral`\n      feeBps?: string | undefined;\n    };\n    computeUnitPrice: string | \"auto\";\n    referral?: string | undefined;\n  \n    // Default: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\n    inputTokenProgram?: string | undefined;\n    outputTokenProgram?: string | undefined;\n    \n    // Default: true\n    // Determines if SOL needs to be wrapped and unwrapped\n    wrapAndUnwrapSol?: boolean | undefined;\n  };\n  \n  type CreateOrderResponse = {\n    order: string;\n    tx: string;\n  };\n \n Example response \n {\n  \"order\": \"EWxFUCUAzvo2siM9gYVPWkaouvCfemwnwkfdVw2ib7JH\",\n  \"tx\": \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAQAJDgljyvLecNltZyLKJwcNk/0wjQipK4AUImvf2FZSxHIzDYJ0JdiFdLKUD0/uyu862mvKMrRGcmeB0hacZldr91rI1D6IwBADhxzCinLz0WuLrIJDCWIg/AajAnWXFcf8wi6Dlq1U1ClYCNsR8Xj0JlqSi9FGU0GP64HMzvBB8o/7Pc01wNmmSKitJONFP3gmdGbtde+pcSLhy7GOlMkI03UDBkZv5SEXMv/srbpyw5vnvIzlu8X3EmssQ5s6QAAAAIyXJY9OJInxuz0QKRSODYMLWhOZ2v8QhASOe9jb6fhZBpuIV/6rgYT7aH9jRhjANdrEOdwa6ztVmKDwAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCpCsNKlsFmcVpgwSM+yiWKDfMLHshY4HRcc2oSYmZjSyIQiYnNzGGPBnZ0rGd+KZqtsSj+INnM2CjlCMnxv5sw68b6evO+2606PWXzaqvJdDGxu+TC0vbg5HymAgNFL11hkn9sh+xDEAWX2S7IDh4PwuUsi7/8dQ+DB2YEV+4zsuGS8LiUcikk5FUuAM3vpZjsAmrMZL3FPOcH2v4SeX3/fwQFAAUCoAMCAAUACQNd9AgAAAAAAAYGAAEABwgJAQEKDwAAAgMECwoMBwkJCAYNCiKFbkqvcJ/1n9vKKe2gGX+OAOH1BQAAAACA8PoCAAAAAAAAAA==\"\n}\n \n \n Cancel limit order \n Sends a POST request to the Jupiter Limit Order API to get the unsigned transactions needed to cancel order(s). \n \n   \n     \n       POST \n       https://api.jup.ag/limit/v2/cancelOrders \n     \n   \n Parameters in use in the below code example: \n \n maker : The wallet address of the user associated to the order(s) that are being cancelled (required)`. \n computeUnitPrice : Used to determine a transaction's prioritization fee. Defaults to  auto . \n orders : The public keys for orders that are intended to be cancelled. If not specified, this will generate the transaction(s) to close all orders associated to the  maker . \n \n Cancel order(s) request body and response \n type CancelOrders = {\n  maker: string;\n\n  // \"auto\" sets the priority fee based on network congestion\n  // and it will be capped at 500,000\n  computeUnitPrice: string | \"auto\";\n\n  // Specific order account public keys to cancel/close\n  orders?: string[] | undefined;\n};\n\ntype CancelOrdersResponse = {\n  txs: string[];\n};\n \n :::warning\nIf no orders are specified, the API would return the unsigned transactions to cancel ALL open orders, batched in groups of 5 orders.\n::: \n Example response \n {\n  \"txs\": [\n    \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAQAFCAljyvLecNltZyLKJwcNk/0wjQipK4AUImvf2FZSxHIzhJKWtj2HSC7RNPJa8OnDC9WWH6trCbp1C6qA4BUMaQ0ye0cXKemx6Yc1OP5dEP1Nac45/1jWuZvS7iawRDbqZgMGRm/lIRcy/+ytunLDm+e8jOW7xfcSayxDmzpAAAAACsNKlsFmcVpgwSM+yiWKDfMLHshY4HRcc2oSYmZjSyIGm4hX/quBhPtof2NGGMA12sQ53BrrO1WYoPAAAAAAAQbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCpkn9sh+xDEAWX2S7IDh4PwuUsi7/8dQ+DB2YEV+4zsuG+7bRt16L/qXhIqNGmwpgUHcNL0fQRKYOGfN2TfXujaQMDAAUCoIwAAAMACQMIQAkAAAAAAAQJAAABAgQFBgcECF+B7fAIMd+EAA==\",\n    \"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAQAFCAljyvLecNltZyLKJwcNk/0wjQipK4AUImvf2FZSxHIzhJKWtj2HSC7RNPJa8OnDC9WWH6trCbp1C6qA4BUMaQ0ye0cXKemx6Yc1OP5dEP1Nac45/1jWuZvS7iawRDbqZgMGRm/lIRcy/+ytunLDm+e8jOW7xfcSayxDmzpAAAAACsNKlsFmcVpgwSM+yiWKDfMLHshY4HRcc2oSYmZjSyIGm4hX/quBhPtof2NGGMA12sQ53BrrO1WYoPAAAAAAAQbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCpkn9sh+xDEAWX2S7IDh4PwuUsi7/8dQ+DB2YEV+4zsuEWFbUelyswY5BEVZJ4BDbpIlxW2qs0WTxU97RD4F2/iQMDAAUCoIwAAAMACQNaTggAAAAAAAQJAAABAgQFBgcECF+B7fAIMd+EAA==\"\n  ]\n}\n \n \n View open orders \n This proxies the  getProgramAccounts  RPC method and returns all order (accounts) associated to the specified wallet. \n \n   \n     \n       GET \n       https://api.jup.ag/limit/v2/openOrders \n     \n   \n Parameters in use in the below code example: \n \n wallet : The wallet address to filter open orders by (required). \n inputMint : The mint address of the input token. \n outputMint : The mint address of the output token. \n \n Example response \n [\n  {\n    \"account\": {\n      \"borrowMakingAmount\": \"0\",\n      \"createdAt\": \"2024-10-22T11:49:27.000Z\",\n      \"expiredAt\": null,\n      \"makingAmount\": \"50000000\",\n      \"oriMakingAmount\": \"50000000\",\n      \"oriTakingAmount\": \"100000000\",\n      \"takingAmount\": \"100000000\",\n      \"uniqueId\": \"3697202764802760127\",\n      \"updatedAt\": \"1729597767\",\n      \"feeAccount\": \"APWoLnZc8g8iXLA8qLdHJ4w42ybRrq2Vm8UGQhH7TJ3r\",\n      \"inputMint\": \"So11111111111111111111111111111111111111112\",\n      \"inputMintReserve\": \"4Q4Qv1KT1qrpHPydQcoPVoCD9FuCCPPbD211CTW43RVF\",\n      \"inputTokenProgram\": \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n      \"maker\": \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n      \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n      \"outputTokenProgram\": \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n      \"feeBps\": 10,\n      \"bump\": 255\n    },\n    \"publicKey\": \"9vWTg8y4UvrLM49rqvJ2mtmpxicPytNs7FD78352g9Kr\"\n  }\n]\n \n \n View order history \n Returns a list of all orders and the trades that filled them. The paginated response returns 10 orders at a time and indicates if there are more orders via  hasMoreData  boolean and the current page via  page  in the response. \n \n   \n     \n       GET \n       https://api.jup.ag/limit/v2/orderHistory \n     \n   \n Parameters in use in the below code example: \n \n wallet : The wallet address to filter open orders by (required). \n page : Results are paginated in groups of 10, starting from page 1. \n \n Example response \n {\n  \"orders\": [\n    {\n      \"userPubkey\": \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n      \"orderKey\": \"E7EtgGdsdhSkkzAsSLxqWsG5Edc3n4FUL2SXWwPeN3hQ\",\n      \"inputMint\": \"So11111111111111111111111111111111111111112\",\n      \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n      \"makingAmount\": \"0.05\",\n      \"takingAmount\": \"100\",\n      \"remainingMakingAmount\": \"0.05\",\n      \"remainingTakingAmount\": \"100\",\n      \"expiredAt\": null,\n      \"createdAt\": \"2024-10-22T07:48:06Z\",\n      \"updatedAt\": \"2024-10-22T07:53:02Z\",\n      \"status\": \"Cancelled\",\n      \"openTx\": \"4c1vMT1NBs5jNqanjenshNq8LXsLV68KY4mbiizDuRn9rFGEjU8g8cerUTrsmzhu4aYebtp6NyuQgqwUSNpsexYw\",\n      \"closeTx\": \"4engV35gYcKSDDM57hB4n6ZT3pLKshWSMckNh2tdHrbyKcJm6DUfBAFzufCei8sKWLHDc43dTLejHmkxvKseDW7a\",\n      \"programVersion\": \"j1o2qRpjcyUwEvwtcfhEQefh773ZgjxcVRry7LDqg5X\",\n      \"trades\": []\n    },\n    {\n      \"userPubkey\": \"jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3\",\n      \"orderKey\": \"8xZdAtCMNXXy7ijUfxFhNTzJBdUrC4DgmBWCwviJrgPG\",\n      \"inputMint\": \"So11111111111111111111111111111111111111112\",\n      \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n      \"makingAmount\": \"0.05\",\n      \"takingAmount\": \"100\",\n      \"remainingMakingAmount\": \"0.05\",\n      \"remainingTakingAmount\": \"100\",\n      \"expiredAt\": null,\n      \"createdAt\": \"2024-10-22T07:48:05Z\",\n      \"updatedAt\": \"2024-10-22T07:53:02Z\",\n      \"status\": \"Cancelled\",\n      \"openTx\": \"Pm98oGGxVwaBN5TaoadVArmr6eHRuWpjYUzws5PERbvmufHfAFevaisi17XXmfTSoMW2LUdn9RYmPknzp2ft8kM\",\n      \"closeTx\": \"4engV35gYcKSDDM57hB4n6ZT3pLKshWSMckNh2tdHrbyKcJm6DUfBAFzufCei8sKWLHDc43dTLejHmkxvKseDW7a\",\n      \"programVersion\": \"j1o2qRpjcyUwEvwtcfhEQefh773ZgjxcVRry7LDqg5X\",\n      \"trades\": []\n    },\n  ],\n  \"hasMoreData\": false,\n  \"page\": 1\n}",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs_versioned_docs/version-old/3-limit-order/2-limit-order-api.md",
  "extracted_at": "2025-09-03T01:39:45.883215Z"
}
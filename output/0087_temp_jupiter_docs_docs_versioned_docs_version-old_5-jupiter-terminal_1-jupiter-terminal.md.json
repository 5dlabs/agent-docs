{
  "url": "file://temp_jupiter_docs/docs_versioned_docs/version-old/5-jupiter-terminal/1-jupiter-terminal.md",
  "content": "sidebar_label: \"Overview\"\ndescription: Explore Jupiter Terminal for seamless DApp integration with a feature-rich API. Start now with easy templates and guides. Visit our demo!\ntitle: Jupiter Terminal Docs \n\n     Jupiter Terminal Docs: Elevate Your DApp Integration \n     \n\n import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport ModalModeImgUrl from './modal-mode.jpg';\nimport IntegratedModeImgUrl from './integrated-mode.jpg';\nimport WidgetModeImgUrl from './widget-mode.jpg'; \n \n Jupiter Terminal is an open-sourced, lite version of Jupiter. This terminal provides end-to-end swap flow functionality by linking it in your HTML with just a few lines of code. Terminal runs on the v3 swap protocol supporting Instant Routing, Smart Token Filtering, Ecosystem Token List support. \n Provided with the code are several templates to get you started and auto generated code snippets. \n \n   \n     \n       It is as easy as this! \n     \n   \n Copy paste this into a  .html  file and change your directory to that file. \n Using for example  npx http-server  and you can view in your localhost \n <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Jupiter Terminal Integration</title>\n  <!-- Preload script -->\n  <script src=\"https://terminal.jup.ag/main-v2.js\" data-preload></script>\n</head>\n<body>\n  <!-- Container for the terminal -->\n  <div id=\"jupiter-terminal\"></div>\n\n  <!-- Initialize the widget -->\n  <script>\n    window.addEventListener('DOMContentLoaded', () => {\n      window.Jupiter.init({\n        containerId: 'jupiter-terminal', // ID of the container div\n        endpoint: 'https://api.mainnet-beta.solana.com', // Solana RPC endpoint\n      });\n    });\n  </script>\n</body>\n</html>\n\n \n \n :::tip Jupiter Terminal Links \n \n Demo: https://terminal.jup.ag/ \n Repo: https://github.com/jup-ag/terminal \n Detailed implementation guide:  Get a step-by-step walkthrough \n::: \n \n Core Features \n \n \n main-v2.js  bundle (~73.6Kb gzipped) \n \n app bundle (~952Kb gzipped) are loaded on-demand when  init()  is called \n alternatively, preload app bundle with  data-preload  attributes \n \n \n \n Agnostic \n \n Work with any dApp,  Integrated  or as a standalone  Widget , or  Modal \n Any framework, React, Plain HTML, and other frameworks. \n Responsive on any screen size \n \n \n \n Form customisation \n \n From Full swap experience, Payment Flow, to Ape-ing tokens \n Fixed input/output amount, or mint \n ExactIn, and ExactOut (e.g. Payment) swap mode \n \n \n \n Built-in Wallets \n \n Wallet Standard \n Passthrough Wallet from your dApp \n Powered by  Unified Wallet Kit \n \n \n \n Lite, but powerful \n \n Jupiter v6 API with Metis  (New✨) \n State sharing with syncProps()  (New✨) \n Price API integration, with high decimal/precision support to trade meme tokens \n ExactOut (e.g Payment) \n \n \n \n Fees Support \n \n Customisable fees \n Track fees with  Jupiter Referral Dashboard \n \n \n \n Getting Started \n \n Demo + Auto Code Gen \n TLDR Example \n \n 1. Setup HTML \n Terminal is designed to work anywhere the web runs, including React, Plain HTML/JS, and many other frameworks. \n <!-- Attach the loading script in your <head /> -->\n<script src=\"https://terminal.jup.ag/main-v2.js\" />\n\n<!-- Optionally, preload for better experience, or integrated mode -->\n<script src=\"https://terminal.jup.ag/main-v2.js\" data-preload />\n \n 2. Initialize Jupiter Terminal \n Scenario 1: Terminal as part of your dApp (Passthrough Wallet) \n Your dApp already has a  <WalletProvider /> . \n window.Jupiter.init({ enableWalletPassthrough: true });\n \n Then, synchronise wallet state between your dApp and Jupiter Terminal with  syncProps() \n import { useWallet } from '@solana/wallet-adapter-react'; // Or @jup-ag/wallet-adapter;\n\nconst passthroughWalletContextState = useWallet();\nuseEffect(() => {\n  if (!window.Jupiter.syncProps) return;\n  window.Jupiter.syncProps({ passthroughWalletContextState });\n}, [passthroughWalletContextState.connected, props]);\n \n Scenario 2: Standalone Terminal \n Your dApp does not have a  <WalletProvider /> , or is a plain HTML/JS website. \n window.Jupiter.init({});\n \n 3. Setup other props \n :::tip Before you start, get a Free/Paid RPC\nSome recommended RPC providers include  Quicknode ,  Helius  &  Triton One .\nYou can then use the RPC endpoint with Terminal.\n::: \n window.Jupiter.init({\n  /** Required\n   * Solana RPC endpoint\n   * We do not recommend using the public RPC endpoint for production dApp, you will get severely rate-limited\n  */\n  endpoint: 'https://api.mainnet-beta.solana.com',\n  // ...other props\n});\n \n 4. Finishing touches \n Terminals are light but full of features, such as customizing form behavior, fees, styling, and much more. \n Go to our Demo  to explore all these features, with automatically generated integration code. \n Or,  check out our fully typed API reference  for more details. \n \n \n \n \n \n Additional API Reference \n Typescript Support \n Since Jupiter Terminal is only importable via CDN, to get proper typing, you can create a typing declaration  jupiter-terminal.d.ts  file in your project, and copy the contents in  src/types/index.d.ts \n declare global {\n  interface Window {\n    Jupiter: JupiterTerminal;\n  }\n}\n// ...\n// ...\n// ...\n \n \n Fee Support \n Similar to Jupiter, Jupiter Terminal supports fee for integrators. \n There are no protocol fees on Jupiter, but integrators can introduce a platform fee on swaps. The platform fee is provided in basis points, e.g. 20 bps for 0.2% of the token output. \n Refer to Adding your own fees docs for more details. \n Note: You will need to create the Token fee accounts to collect the platform fee. \n import { getPlatformFeeAccounts } from '@jup-ag/react-hook';\n\n// Jupiter Core provides a helper function that returns all your feeAccounts\nconst platformFeeAndAccounts = {\n  feeBps: 50,\n  feeAccounts: await getPlatformFeeAccounts(\n    connection,\n    new PublicKey('BUX7s2ef2htTGb2KKoPHWkmzxPj4nTWMWRgs5CSbQxf9'), // The platform fee account owner\n  ), // map of mint to token account pubkey\n};\n\nwindow.Jupiter.init({\n  // ...\n  platformFeeAndAccounts,\n});\n \n \n Resuming / Closing Activity \n \n \n Everytime  init()  is called, it will create a new activity. \n \n \n If you want to resume the previous activity, you can use  resume() . \n \n \n close()  function only hide the widget. \n \n \n if (window.Jupiter._instance) {\n  window.Jupiter.resume();\n}\n\nwindow.Jupiter.close();\n \n Strict Token List \n \n strictTokenList?: boolean; \n Default:  true \n \n The Jupiter Token List API is an open, collaborative, and dynamic token list to make trading on Solana more transparent and safer for users and developers.\nIt is true by default to ensure that only validated tokens are shown. \n \n Default Explorer \n \n defaultExplorer?: 'Solana Explorer' | 'Solscan' | 'Solana Beach' | 'SolanaFM'; \n Default:  Solana Explorer \n \n The default explorer is set to  Solana Explorer ; \n You can change the default explorer by passing in the explorer name to the  defaultExplorer  prop. \n \n onSuccess/onSwapError callback \n onSuccess()  reference can be provided, and will be called when swap is successful. \n While  onSwapError()  will be called when an error has occurred. \n window.Jupiter.init({\n  onSuccess: ({ txid, swapResult }) => {\n    console.log({ txid, swapResult });\n  },\n  onSwapError: ({ error }) => {\n    console.log('onSwapError', error);\n  },\n});\n \n Customising styles: CSSProperties \n Any CSS-in-JS can be injected to the outer-most container via containerStyles API. \n Examples: \n \n Custom zIndex \n \n window.Jupiter.init({\n  // ...\n  containerStyles: { zIndex: 100 },\n});\n \n \n Custom height \n \n window.Jupiter.init({\n  // ...\n  containerStyles: { maxHeight: '90vh' },\n});\n \n Customising className: Tailwind className \n Tailwind classes can be injected to the outer-most container via containerClassName API. \n Example: \n \n Custom breakpoints \n \n window.Jupiter.init({\n  // ...\n  containerClassName: 'max-h-[90vh] lg:max-h-[600px]',\n});\n \n \n Upcoming feature / Experimentation \n \n \nLimit Order \n \nDCA \n \nExperiment separate bundle for passthroughWallet",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/docs_versioned_docs/version-old/5-jupiter-terminal/1-jupiter-terminal.md",
  "extracted_at": "2025-09-03T01:39:45.830219Z"
}
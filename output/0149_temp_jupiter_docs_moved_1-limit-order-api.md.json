{
  "url": "file://temp_jupiter_docs/Moved/1-limit-order-api.md",
  "content": "sidebar_label: Limit Order API\ndescription: Streamline trading with Jupiter Limit Order API on Solana. Access tutorials, SDK tools, and tips to boost your crypto strategies efficiently.\ntitle: Build a Limit Order Bot With Javascript \n\n     Jupiter Limit Order API Documentation \n     \n\n \n{`\n  .api-method-box {\n    border-radius: 8px;\n    margin: 16px 0;\n    display: inline;\n    padding: 4px;\n    font-weight: 700;\n    margin-right: 8px;\n    font-size: 12px;\n    color: white\n  }\n\n.get {\n  border: 1px solid #018847;\n  background-color: #018847 !important;\n}\n\n.post {\n  border: 1px solid #eaba0c;\n  background-color: #eaba0c !important;\n}\n\n  .api-method-path {\n    font-size: 14px;\n    display: inline;\n  }\n`} \n Jupiter Limit Order provides users with the simplest way to place limit orders on Solana and receive tokens directly in your wallet when the order is filled! \n \n Query user open order, order history and trade history APIs \n \n   \n     \n       GET \n       https://jup.ag/api/limit/v1/ openOrders \n     \n   \n Parameters \n Query Type Required Description \n wallet string No The wallet address \n inputMint string No The contract address of the token used to place the limit order \n outputMint string No The contract address of the token being bought \n \n :::info\nDue to the transaction size limit, it is best to provide a wallet address even if it is not required.\n::: \n Example Request \n curl -X GET \"https://jup.ag/api/limit/v1/openorders?wallet=TVeKgyTMp3DjwVFRYC9mYcRStRnbRsFExrZDFCKrXnT&inputMint=So11111111111111111111111111111111111111112&outputMint=WENWENvqqNya429ubCdR81ZmD69brwQaaBYY6p3LCpk\"\n \n Response \n   \n     \n       •  \n       \n       200: OK \n        Success Response\n       \n     \n [\n    {\n        \"publicKey\": \"APCQFtJqMhv6MpXHEtwTBxuSzGTLcJz3XcQGKc1hNpc2\",\n        \"account\": {\n            \"maker\": \"TVeKgyTMp3DjwVFRYC9mYcRStRnbRsFExrZDFCKrXnT\",\n            \"inputMint\": \"So11111111111111111111111111111111111111112\",\n            \"outputMint\": \"WENWENvqqNya429ubCdR81ZmD69brwQaaBYY6p3LCpk\",\n            \"oriInAmount\": \"30000000\",\n            \"oriOutAmount\": \"150000000000\",\n            \"inAmount\": \"30000000\",\n            \"outAmount\": \"150000000000\",\n            \"expiredAt\": null,\n            \"base\": \"314Ybz35QBeJ4DNRYbpBVM8DFhcDrchpmvTLQQhcLj23\"\n        }\n    }\n]\n \n   \n   \n   •  default   Error Response \n {​\n  \"message\": \"string\",​\n  \"code\": \"string\",​\n  \"issues\": [​\n    {​\n      \"message\": \"string\"​\n    }​\n  ]​\n​}\n \n \n \n \n   \n     \n       GET \n       https://jup.ag/api/limit/v1/ orderHistory \n     \n   \n Parameters \n Query Type Required Description \n wallet string Yes wallet address \n cursor number No \n skip number No \n take number No \n \n Example Request \n curl -X GET \"https://jup.ag/api/limit/v1/orderHistory?wallet=TVeKgyTMp3DjwVFRYC9mYcRStRnbRsFExrZDFCKrXnT\"\n \n Response \n   \n     \n       •  \n       \n       200: OK \n        Success Response\n       \n     \n [\n{\n        \"id\": 38422148,\n        \"orderKey\": \"BBdAfjXB3kiu2Z6XZM6BAm5hei5awU3SwTT12btaQmgx\",\n        \"maker\": \"TVeKgyTMp3DjwVFRYC9mYcRStRnbRsFExrZDFCKrXnT\",\n        \"inputMint\": \"So11111111111111111111111111111111111111112\",\n        \"outputMint\": \"WENWENvqqNya429ubCdR81ZmD69brwQaaBYY6p3LCpk\",\n        \"inAmount\": \"0\",\n        \"oriInAmount\": \"30000000\",\n        \"outAmount\": \"0\",\n        \"oriOutAmount\": \"2715393334\",\n        \"expiredAt\": null,\n        \"state\": \"Completed\",\n        \"createTxid\": \"5xbd6BhqCbfhrorEsrxSGs2wGzaJMycuqy6X11PTMrJtF2mMAoAo4e7vJgCzjWDKNRWMqrMyAL4u5aaWaEtnAFKW\",\n        \"cancelTxid\": null,\n        \"updatedAt\": \"2024-05-23T17:09:31.024Z\",\n        \"createdAt\": \"2024-05-23T17:07:47.000Z\"\n    }\n]\n \n   \n   \n   •  default   Error Response \n {​\n  \"message\": \"string\",​\n  \"code\": \"string\",​\n  \"issues\": [​\n    {​\n      \"message\": \"string\"​\n    }​\n  ]​\n​}\n \n \n \n \n   \n     \n       GET \n       https://jup.ag/api/limit/v1/ tradeHistory \n     \n   \n Parameters \n Query Type Required Description \n wallet string No Wallet Address \n inputMint string No Contract address of the token being sold \n outputMint string No Contract address of the token being bought \n cursor number No \n skip number No \n take number No \n \n Example Request \n curl -X GET \"https://jup.ag/api/limit/v1/tradeHistory?wallet=TVeKgyTMp3DjwVFRYC9mYcRStRnbRsFExrZDFCKrXnT\"\n \n Response \n   \n     \n       •  \n       \n       200: OK \n        Success Response\n       \n     \n [\n    {\n        \"id\": 47520095,\n        \"inAmount\": \"30000000\",\n        \"outAmount\": \"2715393334\",\n        \"txid\": \"2csWeVyrqfCcjYHUhpYikEW7aspz7piThp1CjrXv3iCofwa4Kd9zhF5PrRuidH4pJ4U5ZCeA9edYgqZgHWhKYVpt\",\n        \"updatedAt\": \"2024-05-23T17:09:29.999Z\",\n        \"createdAt\": \"2024-05-23T17:09:23.000Z\",\n        \"order\": {\n            \"id\": 38422148,\n            \"orderKey\": \"BBdAfjXB3kiu2Z6XZM6BAm5hei5awU3SwTT12btaQmgx\",\n            \"inputMint\": \"So11111111111111111111111111111111111111112\",\n            \"outputMint\": \"WENWENvqqNya429ubCdR81ZmD69brwQaaBYY6p3LCpk\"\n        }\n    }\n]\n \n   \n   \n   •  default   Error Response \n {​\n  \"message\": \"string\",​\n  \"code\": \"string\",​\n  \"issues\": [​\n    {​\n      \"message\": \"string\"​\n    }​\n  ]​\n​}\n \n \n \n Cancel order \n \n   \n     \n       POST \n       https://jup.ag/api/limit/v1/ cancelOrders \n     \n   \n Parameters \n Query Type Required Description \n owner string No \n feePayer string No \n orders string list No List of orders being attempted to cancel \n \n Body \n {​\n  \"owner\": \"string\",​\n  \"feePayer\": \"string\",​\n  \"orders\": [​\n    \"string\"​\n  ]​\n​}\n \n Response \n   \n     \n       •  \n       \n       200: OK \n        Success Response\n       \n     \n { \"tx\": \"string\"​ }\n \n   \n   \n   •  default   Error Response \n {​\n  \"message\": \"string\",​\n  \"code\": \"string\",​\n  \"issues\": [​\n    {​\n      \"message\": \"string\"​\n    }​\n  ]​\n​}\n \n \n \n Create Limit Order (Code Example) \n 1. Install the libraries \n Running this example requires a minimum of  NodeJS 16 . In your command line terminal, install the libraries. \n npm i @solana/web3.js@1\nnpm i cross-fetch\nnpm i @project-serum/anchor\nnpm i bs58\n \n 2. Import from libraries and setup connection \n Next you can copy the following code snippets to a javascript file  jupiter-api-example.js . And when you are ready to run the code, just type:  node jupiter-api-example.js \n import { Connection, Keypair, Transaction } from \"@solana/web3.js\";\nimport fetch from \"cross-fetch\";\nimport { Wallet } from \"@project-serum/anchor\";\nimport bs58 from \"bs58\";\n\n// This RPC endpoint is only for demonstration purposes so it may not work.\nconst connection = new Connection(\n  \"https://neat-hidden-sanctuary.solana-mainnet.discover.quiknode.pro/2af5315d336f9ae920028bbb90a73b724dc1bbed/\"\n);\n \n :::info\nAlways make sure that you are using your own RPC endpoint. The RPC endpoint used by the connection object in the above example may not work anymore.\n::: \n 3. Setup your wallet \n In this example, you can paste in your private key for testing purposes but this is not recommended for production applications. \n const wallet = new Wallet(\n  Keypair.fromSecretKey(bs58.decode(process.env.PRIVATE_KEY || \"\"))\n);\n \n 4. Get the serialized transactions to perform the limit order \n // Base key are used to generate a unique order id\nconst base = Keypair.generate();\n\n// get serialized transactions\nconst { tx } = await (\n  await fetch('https://jup.ag/api/limit/v1/createOrder', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      owner: wallet.publicKey.toString(),\n      inAmount: 100000, // 1000000 => 1 USDC if inputToken.address is USDC mint\n      outAmount: 100000,\n      inputMint: inputMint.toString(),\n      outputMint: outputMint.toString(),\n      expiredAt: null, // new Date().valueOf() / 1000,\n      base: base.publicKey.toString(),\n      // referralAccount and name are both optional.\n      // Please provide both to get referral fees.\n      // More details in the section below.\n      // referralAccount: referralPublicKey,\n      // referralName: \"Referral Name\"\n    })\n  })\n).json();\n \n expiredAt  - Can be either null or Unix timestamp in seconds. \n Execute transaction \n 5. Deserialize and sign the transaction \n // deserialize the transaction\nconst transactionBuf = Buffer.from(tx, \"base64\");\nvar transaction = Transaction.deserialize(transactionBuf);\n\n// sign the transaction using the required key\n// for create order, wallet and base key are required.\ntransaction.sign([wallet.payer, base]);\n \n 6. Execute the transaction \n // get the latest block hash\nconst latestBlockHash = await connection.getLatestBlockhash();\n\n// Execute the transaction\nconst rawTransaction = transaction.serialize();\nconst txid = await connection.sendRawTransaction(rawTransaction, {\n  skipPreflight: true,\n  maxRetries: 2,\n});\nawait connection.confirmTransaction({\n  blockhash: latestBlockHash.blockhash,\n  lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,\n  signature: txid\n});\nconsole.log(`https://solscan.io/tx/${txid}`);\n \n \n   \n     \n       Whole code snippet \n     \n   \n import { Connection, Keypair, Transaction } from \"@solana/web3.js\";\nimport fetch from \"cross-fetch\";\nimport { Wallet } from \"@project-serum/anchor\";\nimport bs58 from \"bs58\";\n\n// This RPC endpoint is only for demonstration purposes so it may not work.\nconst connection = new Connection(\n  \"https://neat-hidden-sanctuary.solana-mainnet.discover.quiknode.pro/2af5315d336f9ae920028bbb90a73b724dc1bbed/\"\n);\n\n// Base key are used to generate a unique order id\nconst base = Keypair.generate();\n\n// get serialized transaction\nconst { tx } = await (\n  await fetch('https://jup.ag/api/limit/v1/createOrder', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      owner: wallet.publicKey.toString(),\n      inAmount: 100000, // 1000000 => 1 USDC if inputToken.address is USDC mint\n      outAmount: 100000,\n      inputMint: inputMint.toString(),\n      outputMint: outputMint.toString(),\n      expiredAt: null, // new Date().valueOf() / 1000,\n      base: base.publicKey.toString(),\n      // referralAccount and name are both optional.\n      // Please provide both to get referral fees.\n      // More details in the section below.\n      // referralAccount: referralPublicKey,\n      // referralName: \"Referral Name\"\n    })\n  })\n).json();\n\n// deserialize the transaction\nconst transactionBuf = Buffer.from(tx, \"base64\");\nvar transaction = Transaction.deserialize(transactionBuf);\n\n// add priority fee\nconst addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({\n  microLamports: 1, // probably need to be higher for the transaction to be included on chain.\n});\ntransaction.add(addPriorityFee);\n\n// sign the transaction using the required key\n// for create order, wallet and base key are required.\ntransaction.sign([wallet.payer, base]);\n\n// Execute the transaction\nconst rawTransaction = transaction.serialize();\nconst txid = await connection.sendRawTransaction(rawTransaction, {\n  skipPreflight: true,\n  maxRetries: 2,\n});\nawait connection.confirmTransaction(txid);\nconsole.log(`https://solscan.io/tx/${txid}`);\n \n \n Deserialize, sign and execute the transaction from the response like  here . \n :::info\nDue to the transaction size limit, the maximum cancellation order in a batch is 10.\n::: \n :::info\nThe Jupiter Limit Order's project account for the Referral Program is  45ruCyfdRkWpRNGEqWzjCiXRHkZs8WXCLQ67Pnpye7Hp .\n::: \n Referral \n Check out the  referral program  for Limit Order.",
  "item_type": "markdown",
  "module_path": "temp_jupiter_docs/Moved/1-limit-order-api.md",
  "extracted_at": "2025-09-03T01:39:45.923167Z"
}